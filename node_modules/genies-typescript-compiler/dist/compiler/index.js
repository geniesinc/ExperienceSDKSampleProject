!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["genies-typescript-compiler"]=t():e["genies-typescript-compiler"]=t()}(this,(()=>(()=>{"use strict";var e={24:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventContextTransformer=void 0;const r=n(710),s=n(71);t.EventContextTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="EventContextTransformer"}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=n.getExpression();if(r.Node.isPropertyAccessExpression(i)){const e=i.getName(),t=i.getExpression(),a=o.getTypeAtLocation(t),l=(0,s.isSignalBusType)(a)&&("subscribe"===e||"unsubscribe"===e),c=(0,s.isGeniesEventType)(a)&&("addListener"===e||"removeListener"===e);if(l||c){const e=n.getArguments(),t=l?1:0,s=l?2:1;if(e.length==s&&e.length>t&&r.Node.isPropertyAccessExpression(e[t])){const r=e[t],s=this.getContextExpression(r);n.addArgument(`//@ts-ignore\n${s.getText()}`)}}}return n}getContextExpression(e){return r.Node.isPropertyAccessExpression(e)?e.getExpression():e}}},58:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TransformationContext=void 0,t.TransformationContext=class{constructor(e){this.sourceFileGenericTypeMap=new Map,this.lastGenericTypeVarIndex=new Map,this.overloadMap=new Map,this.typeChecker=e}setSwapOverload(e,t){this.overloadMap.set(e,t)}getSwapOverload(e){return this.overloadMap.get(e)}}},71:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.updateImportsToAliasPaths=t.convertToAliasPath=t.convertToGeniesAliasPath=t.isGeniesScriptType=t.getGeniesScriptTypeFromType=t.getIsUnityAPIDeclaration=t.isAssignmentToSymbol=t.cleanTypeText=t.getTypeByName=t.getIsUnityAPIType=t.isUserDefinedType=t.getIsValidUnityGenericTypeArg=t.getCompleteTypeArgumentMap=t.extractProperties=t.getFullTypeName=t.getTypeNameAndEnsureImported=t.getTypeName=t.getGenericTypeKey=t.createGenericTypeVariable=t.sortImportsAndVars=t.getBaseTypes=t.inheritsFrom=t.isOrInheritsFromGameObjectOrComponent=t.isTypeAssignableTo=t.typesAreEqual=t.isOrInheritsFromObject=t.isGeniesEventType=t.isSignalBusType=t.traversePrototypeChain=t.traversePostOrder=t.collectNodes=t.removeDecorators=t.extendsScriptableObject=t.extendsMonoBehaviour=t.setProjectRoot=t.GeniesScriptType=t.NumericalAliases=t.UiInterfaceToEnumMap=t.AllowedUiInterfaces=t.GeniesScriptUiEvents=t.componentMethods=t.SET_ITEM_NAME=t.GET_ITEM_NAME=t.SerializeFieldDecorator=t.NonSerializedDecorator=t.ScriptableObjectTypeName=t.MonobehaviourTypeName=t.GeniesInstancePropName=t.GeniesDeclarationFileAnnotation=t.projectRoot=void 0;const i=n(710),a=o(n(928)),l=new Map;var c;t.projectRoot="",t.GeniesDeclarationFileAnnotation="//@Genies-UnityApiInterface",t.GeniesInstancePropName="__geniesInstance__",t.MonobehaviourTypeName="MonoBehaviour",t.ScriptableObjectTypeName="ScriptableObject",t.NonSerializedDecorator="NonSerialized",t.SerializeFieldDecorator="SerializeField",t.GET_ITEM_NAME="get_Item",t.SET_ITEM_NAME="set_Item",t.componentMethods=new Set(["GetComponent","TryGetComponent","GetComponentInChildren","GetComponentsInChildren","GetComponentInParent","GetComponentsInParent","GetComponents","AddComponent"]),function(e){e[e.None=0]="None",e[e.PointerClick=1]="PointerClick",e[e.PointerDown=2]="PointerDown",e[e.PointerEnter=4]="PointerEnter",e[e.PointerExit=8]="PointerExit",e[e.PointerUp=16]="PointerUp",e[e.BeginDrag=32]="BeginDrag",e[e.Deselect=64]="Deselect",e[e.Drag=128]="Drag",e[e.Drop=256]="Drop",e[e.EndDrag=512]="EndDrag",e[e.InitializePotentialDrag=1024]="InitializePotentialDrag",e[e.Scroll=2048]="Scroll",e[e.Select=4096]="Select",e[e.Submit=8192]="Submit",e[e.UpdateSelected=16384]="UpdateSelected",e[e.Move=32768]="Move",e[e.Cancel=65536]="Cancel"}(c||(t.GeniesScriptUiEvents=c={})),t.AllowedUiInterfaces=new Set(["UnityEngine.EventSystems.IPointerClickHandler","UnityEngine.EventSystems.IPointerDownHandler","UnityEngine.EventSystems.IPointerEnterHandler","UnityEngine.EventSystems.IPointerExitHandler","UnityEngine.EventSystems.IPointerUpHandler","UnityEngine.EventSystems.IBeginDragHandler","UnityEngine.EventSystems.IDeselectHandler","UnityEngine.EventSystems.IDragHandler","UnityEngine.EventSystems.IDropHandler","UnityEngine.EventSystems.IEndDragHandler","UnityEngine.EventSystems.IInitializePotentialDragHandler","UnityEngine.EventSystems.IScrollHandler","UnityEngine.EventSystems.ISelectHandler","UnityEngine.EventSystems.ISubmitHandler","UnityEngine.EventSystems.IUpdateSelectedHandler","UnityEngine.EventSystems.IMoveHandler","UnityEngine.EventSystems.ICancelHandler"]),t.UiInterfaceToEnumMap=new Map([["UnityEngine.EventSystems.IPointerClickHandler",c.PointerClick],["UnityEngine.EventSystems.IPointerDownHandler",c.PointerDown],["UnityEngine.EventSystems.IPointerEnterHandler",c.PointerEnter],["UnityEngine.EventSystems.IPointerExitHandler",c.PointerExit],["UnityEngine.EventSystems.IPointerUpHandler",c.PointerUp],["UnityEngine.EventSystems.IBeginDragHandler",c.BeginDrag],["UnityEngine.EventSystems.IDeselectHandler",c.Deselect],["UnityEngine.EventSystems.IDragHandler",c.Drag],["UnityEngine.EventSystems.IDropHandler",c.Drop],["UnityEngine.EventSystems.IEndDragHandler",c.EndDrag],["UnityEngine.EventSystems.IInitializePotentialDragHandler",c.InitializePotentialDrag],["UnityEngine.EventSystems.IScrollHandler",c.Scroll],["UnityEngine.EventSystems.ISelectHandler",c.Select],["UnityEngine.EventSystems.ISubmitHandler",c.Submit],["UnityEngine.EventSystems.IUpdateSelectedHandler",c.UpdateSelected],["UnityEngine.EventSystems.IMoveHandler",c.Move],["UnityEngine.EventSystems.ICancelHandler",c.Cancel]]);const p=new Map([["float","Single"],["int","Int32"],["double","Double"],["long","Int64"],["ulong","UInt64"],["bool","Boolean"],["string","String"],["number","Double"],["short","Int16"],["ushort","UInt16"],["byte","Byte"],["sbyte","SByte"],["uint","UInt32"],["char","Char"],["any","Object"]]),u=new Map([["float","System.Single"],["int","System.Int32"],["double","System.Double"],["long","System.Int64"],["ulong","System.UInt64"],["bool","System.Boolean"],["string","System.String"],["number","System.Double"],["short","System.Int16"],["ushort","System.UInt16"],["byte","System.Byte"],["sbyte","System.SByte"],["uint","System.UInt32"],["char","System.Char"],["any","System.Object"]]);var g;function d(e){let t=e.getBaseClass();for(;t;){if("MonoBehaviour"===t.getName())return!0;t=t.getBaseClass()}return!1}function f(e){let t=e.getBaseClass();for(;t;){if("ScriptableObject"===t.getName())return!0;t=t.getBaseClass()}return!1}function y(e,t){return e===t||D(e.getText())===D(t.getText())}function m(e,t,n){var r;const s=h(e,n);for(const e of s){const s=null===(r=e.getSymbol())||void 0===r?void 0:r.getName();if(s&&t.includes(s))return!0;if(m(e,t,n))return!0}return!1}function h(e,t,n=new Set){const r=[],s=e.getSymbol();if(!s)return r;const o=s.getDeclarations();if(!o)return r;for(const e of o)if(i.Node.isClassDeclaration(e)){const s=e.getHeritageClauses();for(const e of s){const s=e.getTypeNodes();for(const e of s){const s=t.getTypeAtLocation(e);s&&!n.has(s)&&(n.add(s),r.push(s),r.push(...h(s,t,n)))}}}return r}function T(e,t){return`${x(e)}$${t.map((e=>{const t=e.getTypeArguments();return t.length>0?T(e,t):x(e)})).join("$")}`}function x(e){var t,n;return null!==(n=null===(t=e.getSymbol())||void 0===t?void 0:t.getName())&&void 0!==n?n:e.getText()}function S(e,t){let n=x(e),r="",s="";if(p.has(n)){let e=n;n=p.get(e),s="System"}else{const t=w(e);if(t!==g.None)switch(t){case g.Monobehaviour:n="MonoBehaviour",s="UnityEngine";break;case g.ScriptableObject:n="ScriptableObject",s="UnityEngine"}else{if(!O(e))throw new Error("Can't use non CSharp types");{r=E(e,!0,!1);const t=r.lastIndexOf(".");s=r.substring(0,t)}}}const o=t.getImportDeclarations().find((e=>e.getModuleSpecifierValue()===s));if(o)o.getNamedImports().some((e=>e.getName()===n))||o.addNamedImport(n);else{const e={kind:i.StructureKind.ImportDeclaration,moduleSpecifier:s,namedImports:[{name:n}]};t.addImportDeclaration(e)}return n}function E(e,n=!0,r=!0){let s="";const o=e.getAliasSymbol();if(s=o?o.getName():e.getText(),u.has(s))return u.get(s);const l=e.getSymbol();if(!l)return s;if(O(e))s=l.getFullyQualifiedName().replace(/['"]/g,"");else{const e=l.getDeclarations();let n=!1;if(e.forEach((e=>{(i.Node.isInterfaceDeclaration(e)||i.Node.isClassDeclaration(e))&&(n=e.isExported())})),!n&&e.length>0){const n=e[0].getSourceFile().getFilePath(),r=_(t.projectRoot,n),o=a.parse(r),i=a.join(o.dir,o.name);s=`${i}.${l.getFullyQualifiedName().replace(/['"]/g,"")}`}else s=l.getFullyQualifiedName().replace(/['"]/g,"");const r=a.parse(s);if(""!==r.dir||""!==r.root){let e=F(s);null!=e&&(s=e)}}const c=/\$(\d+)$/;if(n&&c.test(s)&&(s=s.replace(c,((e,t)=>"`"+t)),r)){const t=e.getTypeArguments();t.length>0&&(s+="<",t.forEach(((e,n)=>{let r=E(e);s+=r,n<t.length-1&&(s+=", ")})),s+=">")}return s}function N(e,t){return e.map((e=>{const n=Object.assign({},e);return n.Path=`${t}.${e.Name}`,n.ChildProperties&&n.ChildProperties.length>0&&(n.ChildProperties=N(n.ChildProperties,n.Path)),n}))}function v(e,n="",r=new Map){const s=e.getName()||"",o=`${e.getSourceFile().getFilePath()}|${s}|${e.getTypeParameters().map((e=>e.getName())).join(",")}|${Array.from(r.entries()).map((([e,t])=>{let n="";const r=t.getTypeArguments();return n=(null==r?void 0:r.length)>0?T(t,r):E(t),`${e}:${n}`})).join(",")}`;if(l.has(o)){const e=l.get(o);return n?e.map((e=>{const t=Object.assign({},e);return t.Path=n?`${n}.${e.Name}`:e.Name,t.ChildProperties&&t.ChildProperties.length>0&&(t.ChildProperties=N(t.ChildProperties,t.Path)),t})):e}const a=[];return e.getProperties().forEach((e=>{const s=e.getScope(),o=j(e);if(e.isStatic()||e.isReadonly())return;if("private"===s&&!o.some((e=>e.Type===t.SerializeFieldDecorator)))return;if("public"===s&&o.some((e=>e.Type===t.NonSerializedDecorator)))return;const l=I(e.getType(),r),c=l.isArray(),p=K(l,r),u=E(p),g=e.getName();let d=n?`${n}.${g}`:g;function f(e){if(e.getKind()===i.SyntaxKind.NewExpression){const t=e;return`new ${E(t.getType())}(${t.getArguments().map((e=>e.getText())).join(", ")});`}if(e.getKind()===i.SyntaxKind.PropertyAccessExpression){const t=e;return`${E(t.getExpression().getType())}.${t.getName()}`}return e.getKind()===i.SyntaxKind.StringLiteral?e.getLiteralValue():e.getText()}const y=[];if(e.hasInitializer()){const t=e.getInitializer();if(t)if(t.getKind()===i.SyntaxKind.ArrayLiteralExpression){const e=t;for(let t=0;t<e.getElements().length;t++){const n=e.getElements()[t];y.push(f(n))}}else y.push(f(t))}const m={Path:d,Name:g,TypeName:u,ChildProperties:[],IsArray:c,IsEnum:!1,EnumKeys:[],EnumValues:[],Decorators:j(e),IsGeniesBehaviourRef:!1,IsGeniesScriptableObjectRef:!1,Initializers:y,ArrayElementInitializer:void 0,ArrayDimension:-1};if(c){let e=1;return m.ArrayElementInitializer=A(l,u,g,d,e,r),m.ArrayDimension=e,void a.push(m)}b(p,m,r),a.push(m)})),l.set(o,a),a}function b(e,t,n){const r=e.isEnum(),s=e.getSymbol()||e.getAliasSymbol();if(!s)return;const o=s.getDeclarations()[0],a=$(o),l=k(o,a);if(t.IsGeniesBehaviourRef=l==g.Monobehaviour,t.IsGeniesScriptableObjectRef=l==g.ScriptableObject,!a&&l===g.None&&(r&&function(e,t){const{keys:n,values:r}=function(e){const t=e.getSymbol(),n=null==t?void 0:t.getDeclarations().find((e=>e.getKind()===i.SyntaxKind.EnumDeclaration));return n?{keys:n.getMembers().map((e=>e.getName())),values:n.getMembers().map((e=>e.getValue()))}:{keys:[],values:[]}}(t);e.EnumKeys=n,e.EnumValues=r.map((e=>void 0===e?"":e.toString())),e.IsEnum=!0}(t,e),s.getDeclarations().some((e=>i.Node.isClassDeclaration(e))))){const r=s.getDeclarations().find(i.Node.isClassDeclaration),o=r.getTypeParameters(),a=e.getTypeArguments();o.forEach(((e,t)=>{const s=`${e.getName()}_${r.getName()}`;n.set(s,a[t])})),n=P(r,n);const l=[];let c=r;for(;c;){l.unshift(...v(c,t.Path,n));let e=c.getBaseClass();if(void 0===e)break;c=e}t.ChildProperties=l}}function A(e,t,n,r,s,o){let i=e.isArray()?e.getArrayElementType():e;i.isArray()||(i=K(i,o));let a=s;const l={Path:r+"_D"+s,Name:n,TypeName:t,ArrayDimension:s,ChildProperties:[],IsArray:i.isArray(),IsEnum:i.isEnum(),EnumKeys:[],EnumValues:[],Decorators:[],IsGeniesBehaviourRef:!1,IsGeniesScriptableObjectRef:!1,Initializers:[],ArrayElementInitializer:void 0};return i.isArray()?l.ArrayElementInitializer=A(i,t,n,r,++a,o):b(i,l,o),l}function P(e,t){return C(e,t),t}function C(e,t){const n=e.getBaseClass();if(!n)return;const r=e.getHeritageClauseByKind(i.SyntaxKind.ExtendsKeyword);if(!r)return;const s=r.getTypeNodes();if(0===s.length)return;const o=s[0].getTypeArguments(),a=n.getTypeParameters(),l=e.getBaseTypes()[0];if(l){const e=l.getTypeArguments();a.forEach(((r,s)=>{if(s<e.length){const o=`${r.getName()}_${n.getName()||""}`;t.set(o,e[s]);const a=e[s];if(a.isTypeParameter()){const e=a.getSymbol();if(e){const n=e.getDeclarations();if(n&&n.length>0){const r=n[0];if(i.Node.isTypeParameterDeclaration(r)){const n=r.getParent();if(i.Node.isClassDeclaration(n)||i.Node.isInterfaceDeclaration(n)){const r=n.getName()||"",s=`${e.getName()}_${r}`;t.has(s)&&t.set(o,t.get(s))}}}}}}}))}else o.length>0&&a.forEach(((r,s)=>{if(s>=o.length)return;const a=`${r.getName()}_${n.getName()||""}`,l=o[s];if(l.getKind()===i.SyntaxKind.TypeReference){const n=l.getTypeName();if(i.Node.isIdentifier(n)){const r=`${n.getText()}_${e.getName()||""}`;t.has(r)&&t.set(a,t.get(r))}}else{const e=l.getType();t.set(a,e)}}));C(n,t)}function I(e,t){var n,r;let s=e;if(s.isTypeParameter()){const e=null===(n=s.getSymbol())||void 0===n?void 0:n.getName(),o=null===(r=s.getSymbol())||void 0===r?void 0:r.getDeclarations()[0].getParent(),a=`${e}_${o&&i.Node.isClassDeclaration(o)?o.getName():""}`;a&&t.has(a)&&(s=t.get(a))}return s}function K(e,t){let n=e;for(;null==n?void 0:n.isArray();)n=n.getArrayElementType();return n=I(n,t),n}function M(e){if(!e)return!1;const n=e.getFirstChild();if(!n)return console.log("No nodes found in the file."),!1;const r=n.getLeadingCommentRanges();return r.length>0&&r[0].getText()===t.GeniesDeclarationFileAnnotation}function O(e){let t=e.getSymbol();if(!t)return!1;const n=t.getDeclarations();return!(!n||0===n.length)&&M(n[0].getSourceFile())}function D(e){return e.replace(/&\s*\{[^}]*\}/,"").trim()}function $(e){return M(e.getSourceFile())}function k(e,t){if(e.getKind()!==i.SyntaxKind.ClassDeclaration||t)return g.None;const n=e,r=d(n),s=f(n);return r?g.Monobehaviour:s?g.ScriptableObject:g.None}function w(e){const t=e.getSymbol();if(!t)return g.None;const n=t.getDeclarations();if(0===n.length)return g.None;const r=n[0];return k(r,$(r))}function F(e){const t=e.split(a.sep).join("/"),n=t.indexOf("/Assets/");if(-1!==n)return`@assets/${t.substring(n+8)}`;const r=t.match(/\/(com\.genies\.[^\/]+)\//);return r?`@${r[1]}/${t.substring(r.index+r[0].length)}`:null}function _(e,t){return F(a.resolve(e,t))||t}function j(e){return e.getDecorators().map((e=>({Type:e.getName(),Args:e.getArguments().map((e=>e.getText()))})))}t.NumericalAliases=new Set(["byte","sbyte","short","ushort","int","uint","float","double","number"]),function(e){e[e.None=0]="None",e[e.Monobehaviour=1]="Monobehaviour",e[e.ScriptableObject=2]="ScriptableObject"}(g||(t.GeniesScriptType=g={})),t.setProjectRoot=function(e){t.projectRoot=e},t.extendsMonoBehaviour=d,t.extendsScriptableObject=f,t.removeDecorators=function(e,t){const n=t.map((e=>({start:e.getFullStart(),end:e.getEnd()}))).sort(((e,t)=>t.start-e.start));for(const{start:t,end:r}of n)e.replaceText([t,r],"")},t.collectNodes=function e(t,n=0,r=[]){return console.log(t),t.forEachChild((t=>e(t,n+1,r))),r.push({node:t,depth:n}),r},t.traversePostOrder=function e(t,n){t.forEachChild((t=>e(t,n))),n(t)},t.traversePrototypeChain=function(e){const t=new Set;let n=e;for(;n;){const e=E(n.getType());e&&t.add(e),n.getImplements().forEach((e=>{const n=[e.getType()];for(;n.length>0;){const e=n.shift();if(!e)continue;const r=E(e);r&&!t.has(r)&&(t.add(r),e.getBaseTypes().forEach((e=>{n.push(e)})))}})),n=n.getBaseClass()}return Array.from(t)},t.isSignalBusType=function(e){const t=e.getSymbol();return!!t&&"SignalBus"===t.getName()},t.isGeniesEventType=function(e){const t=e.getSymbol();return!!t&&"GeniesEvent"===t.getName()},t.isOrInheritsFromObject=function(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&(!!["Object"].includes(n.getName())||m(e,["Object"],t))},t.typesAreEqual=y,t.isTypeAssignableTo=function(e,t,n){return!!y(e,t)||void 0!==h(e,n).find((e=>y(e,t)))},t.isOrInheritsFromGameObjectOrComponent=function(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&(!!["GameObject","Component","MonoBehaviour"].includes(n.getName())||m(e,["GameObject","Component","MonoBehaviour"],t))},t.inheritsFrom=m,t.getBaseTypes=h,t.sortImportsAndVars=function(e){const t=e.getStatements(),n=t.filter((e=>e.getKind()===i.SyntaxKind.ImportDeclaration)),r=t.filter((e=>e.getKind()===i.SyntaxKind.VariableStatement)),s=t.filter((e=>e.getKind()!==i.SyntaxKind.ImportDeclaration&&e.getKind()!==i.SyntaxKind.VariableStatement)),o=[...n.map((e=>e.getText())),"",...r.map((e=>e.getText())),"",...s.map((e=>e.getText()))].join("\n\n");e.replaceWithText(o)},t.createGenericTypeVariable=function e(t,n,r,s){s.sourceFileGenericTypeMap.has(r)||s.sourceFileGenericTypeMap.set(r,new Map);const o=s.sourceFileGenericTypeMap.get(r),a=T(t,n);if(!o.has(a)){const l=x(t),c=n.map((t=>function(t,n,r){return t.getTypeArguments().length>0?e(t,t.getTypeArguments(),n,r):S(t,n)}(t,r,s))),p=`// @ts-ignore \n $generic(${l}, ${c.join(", ")})`,u=`_${a.replace(/\$/g,"_")}`;o.set(a,u),r.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,declarations:[{name:u,initializer:p}]})}return o.get(a)},t.getGenericTypeKey=T,t.getTypeName=x,t.getTypeNameAndEnsureImported=S,t.getFullTypeName=E,t.extractProperties=v,t.getCompleteTypeArgumentMap=P,t.getIsValidUnityGenericTypeArg=function e(t){if(t.isTypeParameter()){const n=t.getConstraint();return!!n&&e(n)}let n="";const r=t.getAliasSymbol();return n=r?r.getName():t.getText(),!!p.has(n)||w(t)!==g.None||O(t)},t.isUserDefinedType=function(e){const t=e.getSymbol();return!!t&&t.getDeclarations().some((e=>{const t=e.getSourceFile();return(i.Node.isClassLikeDeclarationBase(e)||i.Node.isInterfaceDeclaration(e))&&!t.isFromExternalLibrary()&&!t.isDeclarationFile()}))},t.getIsUnityAPIType=O,t.getTypeByName=function(e,t){const n=t.resolveName(e,void 0,i.SymbolFlags.All,!1);return n?t.getDeclaredTypeOfSymbol(n):void console.log(`Global type '${e}' not found.`)},t.cleanTypeText=D,t.isAssignmentToSymbol=function(e,t){if(i.Node.isPropertyAccessExpression(e)){const n=e.getExpression();if(i.Node.isThisExpression(n))return e.getNameNode().getSymbol()===t}else if(i.Node.isIdentifier(e))return e.getSymbol()===t;return!1},t.getIsUnityAPIDeclaration=$,t.getGeniesScriptTypeFromType=w,t.isGeniesScriptType=function(e){let t=w(e);return t===g.Monobehaviour||t===g.ScriptableObject},t.convertToGeniesAliasPath=F,t.convertToAliasPath=_,t.updateImportsToAliasPaths=function(e){const t=e.getDirectoryPath();e.getImportDeclarations().forEach((e=>{const n=e.getModuleSpecifierValue();if(n.startsWith("./")||n.startsWith("../")){const r=_(t,n);(r.startsWith("@assets/")||r.startsWith("@com.genies"))&&e.setModuleSpecifier(r)}}))}},101:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getNumericValue=t.isNumericCastable=t.selectBestOverload=t.inferPossibleTypes=void 0;const r=n(710),s=n(71);function o(e,t){const n=[],r=t.getTypeAtLocation(e);let o=[];const i=function(e,t){const n=e.getText();if(s.NumericalAliases.has(n)){const e=(0,s.getTypeByName)(n,t);if(e)return e}const r=n.match(/number\s*&\s*\{\s*__([a-zA-Z]+)Brand\?:\s*undefined\s*\}/);if(r){const e=r[1],n=(0,s.getTypeByName)(e,t);if(n)return n}return null}(r,t);if(null!=i)n.push(i);else{const t=c(e);if(void 0!==t)o=function(e){const{value:t,hasDecimal:n}=e,r=new Set;return n?(r.add("float"),r.add("double")):(t>=-2147483648&&t<=2147483647&&r.add("int"),t>=-32768&&t<=32767&&r.add("short"),t>=-128&&t<=127&&r.add("sbyte"),t>=0&&t<=255&&r.add("byte"),t>=0&&t<=65535&&r.add("ushort"),t>=0&&t<=4294967295&&r.add("uint")),Array.from(r)}(t);else{if(a=r,"number"!==(0,s.cleanTypeText)(a.getText()))return n.push(r),n;o=["byte","sbyte","short","ushort","int","uint","float","double"]}}var a;for(const e of o){const r=(0,s.getTypeByName)(e,t);r&&n.push(r)}return n}function i(e,t,n){const r=e.getParameters();if(r.length<t.length)return-1;let s=r.length==t.length?1:0;for(let e=0;e<r.length;e++){const o=n.getTypeAtLocation(r[e]),i=t[e];if(!i||i.length<=0)return-1;const l=a(o,i,n);if(l<0)return-1;s+=l}return s}function a(e,t,n){let r=-1;if(e.isTypeParameter()){const o=e.getConstraint();if(!o)return t.length>0?1:-1;for(const e of t)(0,s.typesAreEqual)(e,o)?r=Math.max(r,2):n.isTypeAssignableTo(e,o)&&(r=Math.max(r,1));return r}if(function(e){const t=(0,s.cleanTypeText)(e.getText());return s.NumericalAliases.has(t)}(e)){for(const n of t)(0,s.typesAreEqual)(n,e)?r=Math.max(r,2):l(n,e)&&(r=Math.max(r,1));return r}for(const o of t)(0,s.typesAreEqual)(o,e)?r=Math.max(r,2):n.isTypeAssignableTo(o,e)&&(r=Math.max(r,1));return r}function l(e,t){var n,r;const o=(0,s.cleanTypeText)(e.getText()),i=(0,s.cleanTypeText)(t.getText());return null!==(r=null===(n={byte:["short","ushort","int","uint","float","double","number"],sbyte:["short","int","float","double","number"],short:["int","float","double","number"],ushort:["int","uint","float","double","number"],int:["float","double","number"],uint:["float","double","number"],float:["double","number"],double:["number"],number:["byte","sbyte","short","ushort","int","uint","float","double"]}[o])||void 0===n?void 0:n.includes(i))&&void 0!==r&&r}function c(e){const t=p(e);if(void 0!==t)return t;if(r.Node.isIdentifier(e)||r.Node.isPropertyAccessExpression(e)){const t=e.getSymbol();if(t){const n=t.getDeclarations();if(n&&n.length>0){const s=n[0];if(r.Node.isVariableDeclaration(s)||r.Node.isPropertyDeclaration(s)){const n=u(t,s,e);if(n)return n}}}}}function p(e){if(r.Node.isNumericLiteral(e)){const t=e.getText();return{value:Number(t),hasDecimal:t.includes(".")}}if(r.Node.isPrefixUnaryExpression(e)&&e.getOperatorToken()===r.SyntaxKind.MinusToken){const t=e.getOperand();if(r.Node.isNumericLiteral(t)){const e=t.getText();return{value:-Number(e),hasDecimal:e.includes(".")}}}}function u(e,t,n){let o;const i=t.getInitializer();if(i){const r=g(i,e,t,n);r&&(o=r)}const a=n.getFirstAncestorByKind(r.SyntaxKind.MethodDeclaration);if(!a)return o;const l=a.getStatements()||[],c=n.getStart();for(const i of l){if(i.getStart()>c)break;{const a=i.getDescendants().filter((e=>r.Node.isBinaryExpression(e)||r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)));for(const i of a)if(r.Node.isBinaryExpression(i)){const a=i.getOperatorToken().getKind(),l=i.getLeft(),c=i.getRight();if((0,s.isAssignmentToSymbol)(l,e))if(a===r.SyntaxKind.EqualsToken){o=g(c,e,t,n,o)||void 0}else if([r.SyntaxKind.PlusEqualsToken,r.SyntaxKind.MinusEqualsToken,r.SyntaxKind.AsteriskEqualsToken,r.SyntaxKind.SlashEqualsToken,r.SyntaxKind.PercentEqualsToken].includes(a)){const r=g(c,e,t,n,o);if(r&&o){o=d(a,o,r)||void 0}else o=void 0}}else if(r.Node.isPrefixUnaryExpression(i)||r.Node.isPostfixUnaryExpression(i)){const t=i.getOperatorToken(),n=i.getOperand();if((0,s.isAssignmentToSymbol)(n,e))if(o){let e=t===r.SyntaxKind.PlusPlusToken?1:-1;o={value:o.value+e,hasDecimal:o.hasDecimal}}else o=void 0}}}return o}function g(e,t,n,o,i){if(r.Node.isNumericLiteral(e))return p(e);if(r.Node.isIdentifier(e)||r.Node.isPropertyAccessExpression(e)){if((0,s.isAssignmentToSymbol)(e,t))return i;{const t=e.getSymbol();if(t){const n=t.getDeclarations();if(n&&n.length>0){const s=n[0];if(r.Node.isVariableDeclaration(s)||r.Node.isPropertyDeclaration(s))return u(t,s,e)}}}}else if(r.Node.isBinaryExpression(e)){const r=g(e.getLeft(),t,n,o,i),s=g(e.getRight(),t,n,o,i);if(r&&s)return f(e.getOperatorToken().getKind(),r,s)}}function d(e,t,n){const s={[r.SyntaxKind.PlusEqualsToken]:r.SyntaxKind.PlusToken,[r.SyntaxKind.MinusEqualsToken]:r.SyntaxKind.MinusToken,[r.SyntaxKind.AsteriskEqualsToken]:r.SyntaxKind.AsteriskToken,[r.SyntaxKind.SlashEqualsToken]:r.SyntaxKind.SlashToken,[r.SyntaxKind.PercentEqualsToken]:r.SyntaxKind.PercentToken}[e];if(void 0!==s)return f(s,t,n)}function f(e,t,n){let s,o=t.hasDecimal||n.hasDecimal;switch(e){case r.SyntaxKind.PlusToken:s=t.value+n.value;break;case r.SyntaxKind.MinusToken:s=t.value-n.value;break;case r.SyntaxKind.AsteriskToken:s=t.value*n.value;break;case r.SyntaxKind.SlashToken:s=t.value/n.value,o=!0;break;case r.SyntaxKind.PercentToken:s=t.value%n.value;break;default:return}if(void 0!==s)return{value:s,hasDecimal:o}}t.inferPossibleTypes=o,t.selectBestOverload=function(e,t,n){if(!e||e.length<=0)return;if(1==e.length)return e[0];const r=t.getTypeArguments(),s=r&&r.length>0?function(e,t,n){return e.filter((e=>{const r=e.getTypeParameters();if(!r||0===r.length)return!1;if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++){const s=n.getTypeAtLocation(t[e]),o=r[e].getConstraint();if(o){const e=n.getTypeAtLocation(o);if(!n.isTypeAssignableTo(s,e))return!1}}return!0}))}(e,r,n):e;if(0===s.length)return;if(1===s.length)return s[0];const a=t.getArguments();if(!a||a.length<=0){return s.find((e=>{const t=e.getParameters();return 0===t.length||t.every((e=>e.isOptional()))}))||void 0}const l=t.getArguments().map((e=>o(e,n)));let c,p=-1;for(const e of s){const t=i(e,l,n);t>p&&(p=t,c=e)}return c},t.isNumericCastable=l,t.getNumericValue=c},105:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getGeniesSemanticDiagnostics=void 0;const s=n(710),o=r(n(985)),i=n(71),a=n(101),l=10006,c=new Set(["MonoBehaviour","ScriptableObject"]),p=new Set(["GetComponent","TryGetComponent","GetComponentInChildren","GetComponentsInChildren","GetComponentInParent","GetComponentsInParent","GetComponents","AddComponent"]);function u(e,t,n){return(0,i.isTypeAssignableTo)(e,t,n)}function g(e,t,n,r){const s=t.getStart(),i=t.getWidth(),a={file:t.getSourceFile().compilerNode,start:s,length:i,messageText:n,category:o.default.DiagnosticCategory.Error,code:r,source:"Genies"};e.push(a)}t.getGeniesSemanticDiagnostics=function(e,t){if(!e)return[];const n=[];return function(e,t){e.getClasses().forEach((n=>{var r;const s=n.getBaseClass(),a=n.getImplements(),l=null==s?void 0:s.getName();if(s&&(0,i.getIsUnityAPIType)(s.getType())&&l&&!c.has(l)){const i=s.getStart(),a=null===(r=s.getName())||void 0===r?void 0:r.length,l=`Class '${n.getName()}' inherits from a Unity type '${s.getName()}' that is not 'MonoBehaviour' or 'ScriptableObject'.`,c={file:e.compilerNode,start:i,length:a,messageText:l,category:o.default.DiagnosticCategory.Error,code:10001,source:"Genies"};t.push(c)}a.forEach((r=>{if((0,i.getIsUnityAPIType)(r.getType())){const s=(0,i.getFullTypeName)(r.getType());if(i.AllowedUiInterfaces.has(s))return;const a=r.getStart(),l=r.getWidth(),c=`Class '${n.getName()}' implements a forbidden Unity interface '${r.getText()}'.`,p={file:e.compilerNode,start:a,length:l,messageText:c,category:o.default.DiagnosticCategory.Error,code:10002,source:"Genies"};t.push(p)}}))}))}(e,n),function(e,t,n){e.getDescendantsOfKind(s.SyntaxKind.CallExpression).forEach((e=>{!function(e,t){const n=e.getExpression();let r=[];if(s.Node.isPropertyAccessExpression(n)||s.Node.isIdentifier(n)){const e=n.getSymbol();e&&(r=e.getDeclarations().filter((e=>s.Node.isMethodDeclaration(e))))}if(0===r.length)return;if(!(r.filter((e=>e.getTypeParameters().length>0)).length>0))return;if(r=r.filter((e=>(0,i.getIsUnityAPIDeclaration)(e))),0===r.length)return;const o=function(e){return s.Node.isPropertyAccessExpression(e)?e.getName():s.Node.isIdentifier(e)?e.getText():""}(n);if(function(e,t){const n=t.getArguments().map((e=>e.getType())),r=t.getProject().getTypeChecker();return e.some((e=>{if(e.getTypeParameters().length>0)return!1;const t=e.getParameters();if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++){const s=t[e].getType(),o=n[e];if(!r.isTypeAssignableTo(o,s))return!1}return!0}))}(r,e))return;const a=e.getTypeArguments();if(0===a.length)return void g(t,e,`Generic method '${o}' must be called with type arguments.`,10003);let c=r.map((e=>e.getTypeParameters().length));c.includes(a.length)||g(t,e,`Generic method '${o}' was provided the wrong number of arguments. Valid args counts: '${c.join(", ")}'`,l),p.has(o)?a.forEach((e=>{(function(e){const t=e.getType();if((0,i.getIsValidUnityGenericTypeArg)(t))return!0;if((0,i.getGeniesScriptTypeFromType)(t)===i.GeniesScriptType.Monobehaviour)return!0;const n=t.getSymbol();if(n){const e=n.getDeclarations();if(e&&e.length>0&&s.Node.isInterfaceDeclaration(e[0]))return!0}return!1})(e)||g(t,e,`Type arguments for method '${o}' must be a Unity API type, an interface, or a type that extends MonoBehaviour.`,10004)})):a.forEach((e=>{const n=e.getType();(0,i.getIsValidUnityGenericTypeArg)(n)||g(t,e,`Type arguments for method '${o}' must be Unity API types.`,10004)}))}(e,t),function(e,t,n){var r;const o=e.getExpression();if(!s.Node.isPropertyAccessExpression(o))return;const l=o.asKind(s.SyntaxKind.PropertyAccessExpression),c=null==l?void 0:l.getSymbol();if(!c)return;const p=c.getDeclarations();if(!p||p.length<=0)return;const d=p.filter((e=>s.Node.isMethodDeclaration(e)||s.Node.isMethodSignature(e)));if(0===d.length)return;const f=d[0];if(!(0,i.getIsUnityAPIDeclaration)(f))return;const y=(0,a.selectBestOverload)(d,e,n);if(!y)return;const m=y.getParameters(),h=e.getArguments(),T=e.getTypeArguments(),x=y.getTypeParameters(),S=T&&T.length>0&&x&&x.length>0,E=new Map;if(S)for(let e=0;e<Math.min(T.length,x.length);e++)E.set(x[e].getName(),n.getTypeAtLocation(T[e]));for(let e=0;e<Math.min(m.length,h.length);e++){const s=m[e],o=h[e];let a=s.getType();const l=o.getType();if((0,i.isUserDefinedType)(l)){if(a.isTypeParameter()){const e=null===(r=a.getSymbol())||void 0===r?void 0:r.getName();e&&E.has(e)?a=E.get(e):a.getConstraint()&&(a=a.getConstraint())}u(l,a,n)||g(t,o,`Argument of type '${(0,i.getFullTypeName)(l)}' is not assignable to parameter of type '${(0,i.getFullTypeName)(a)}'.`,10008)}}}(e,t,n)}))}(e,n,t),function(e,t){e.getDescendantsOfKind(s.SyntaxKind.NewExpression).forEach((e=>{const n=e.getType().getSymbol();if(!n)return;const r=n.getDeclarations();if(!r||0===r.length)return;const o=r.filter((e=>s.Node.isClassDeclaration(e)&&(0,i.getIsUnityAPIDeclaration)(e)&&e.getTypeParameters().length>0));if(0===o.length)return;const a=o[0].getTypeParameters().length,c=e.getTypeArguments(),p=c.length;0===p?g(t,e,`Generic class '${(0,i.getFullTypeName)(e.getType())}' must be instantiated with ${a} type argument(s).`,10005):(p!==a&&g(t,e,`Generic class '${(0,i.getFullTypeName)(e.getType())}' expects ${a} type argument(s), but got ${p}.`,l),c.forEach((n=>{const r=n.getType();(0,i.getIsValidUnityGenericTypeArg)(r)||g(t,n,`Type arguments for type '${(0,i.getFullTypeName)(e.getType())}' must be Unity API types.`,l)})))}))}(e,n),n}},113:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PromiseWrapperTransformer=void 0;const r=n(710);t.PromiseWrapperTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="PromiseWrapperTransformer"}transformNode(e,t){const n=t.typeChecker;if(r.Node.isCallExpression(e)){const t=e,r=n.getTypeAtLocation(t);if(this.isPromise(r)&&!this.isPromiseParent(e)){const e=this.wrap(r,t.getText());return t.replaceWithText(e)}}return e}wrap(e,t){const n=e.getTypeArguments();return 1===n.length?`$promise<${n[0].getText()}>(${t})`:`$promise(${t})`}isPromise(e){const t=e.getSymbol();if(!t)return!1;const n=t.getName();return"Task"===n||"Task$1"===n||"UniTask"===n||"UniTask$1"===n||"YieldAwaitable"===n}isPromiseParent(e){const t=e.getParent();return void 0!==t&&t.getText().startsWith("$promise(")}}},130:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getOperatorNodeReturnType=t.getUnaryOperatorMethodReturnType=t.getEquivalentOperatorForCompound=t.isCompoundAssignment=t.unwrapParenthesizedExpression=t.getOperatorMethodName=t.getOperatorMethodReturnType=void 0;const r=n(710),s=n(71);function o(e,t,n,o){const i=t.getSymbol();if(!i)return null;const a=i.getDeclarations();for(const i of a)if(r.Node.isClassDeclaration(i)){const r=i.getMethods().filter((e=>e.getName()===n&&0===e.getTypeParameters().length));for(const n of r){const r=n.getParameters();if(2===r.length){const i=r[0].getType(),a=r[1].getType(),l=(0,s.typesAreEqual)(a,o)||e.isTypeAssignableTo(o,a);if(((0,s.typesAreEqual)(i,t)||e.isTypeAssignableTo(t,i))&&l)return n.getReturnType()}}}return null}function i(e,t=!1){if(t)switch(e){case r.SyntaxKind.MinusToken:return"op_UnaryNegation";case r.SyntaxKind.PlusToken:return"op_UnaryPlus";case r.SyntaxKind.ExclamationToken:return"op_LogicalNot";case r.SyntaxKind.TildeToken:return"op_OnesComplement";case r.SyntaxKind.PlusPlusToken:return"op_Increment";case r.SyntaxKind.MinusMinusToken:return"op_Decrement";default:return}else switch(e){case r.SyntaxKind.PlusToken:return"op_Addition";case r.SyntaxKind.MinusToken:return"op_Subtraction";case r.SyntaxKind.AsteriskToken:return"op_Multiply";case r.SyntaxKind.SlashToken:return"op_Division";case r.SyntaxKind.PercentToken:return"op_Modulus";case r.SyntaxKind.EqualsEqualsToken:case r.SyntaxKind.EqualsEqualsEqualsToken:return"op_Equality";case r.SyntaxKind.ExclamationEqualsToken:case r.SyntaxKind.ExclamationEqualsEqualsToken:return"op_Inequality";case r.SyntaxKind.GreaterThanToken:return"op_GreaterThan";case r.SyntaxKind.LessThanToken:return"op_LessThan";case r.SyntaxKind.GreaterThanEqualsToken:return"op_GreaterThanOrEqual";case r.SyntaxKind.LessThanEqualsToken:return"op_LessThanOrEqual";case r.SyntaxKind.BarToken:return"op_BitwiseOr";case r.SyntaxKind.AmpersandToken:return"op_BitwiseAnd";case r.SyntaxKind.CaretToken:return"op_ExclusiveOr";case r.SyntaxKind.LessThanLessThanToken:return"op_LeftShift";case r.SyntaxKind.GreaterThanGreaterThanToken:return"op_RightShift";default:return}}function a(e){return r.Node.isParenthesizedExpression(e)?a(e.getExpression()):e}function l(e){return e>=r.SyntaxKind.FirstCompoundAssignment&&e<=r.SyntaxKind.LastCompoundAssignment}function c(e){switch(e){case r.SyntaxKind.PlusEqualsToken:return r.SyntaxKind.PlusToken;case r.SyntaxKind.MinusEqualsToken:return r.SyntaxKind.MinusToken;case r.SyntaxKind.AsteriskEqualsToken:return r.SyntaxKind.AsteriskToken;case r.SyntaxKind.SlashEqualsToken:return r.SyntaxKind.SlashToken;case r.SyntaxKind.PercentEqualsToken:return r.SyntaxKind.PercentToken;case r.SyntaxKind.AmpersandEqualsToken:return r.SyntaxKind.AmpersandToken;case r.SyntaxKind.BarEqualsToken:return r.SyntaxKind.BarToken;case r.SyntaxKind.CaretEqualsToken:return r.SyntaxKind.CaretToken;case r.SyntaxKind.LessThanLessThanEqualsToken:return r.SyntaxKind.LessThanLessThanToken;case r.SyntaxKind.GreaterThanGreaterThanEqualsToken:return r.SyntaxKind.GreaterThanGreaterThanToken;case r.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:return r.SyntaxKind.GreaterThanGreaterThanGreaterThanToken;default:throw new Error(`Unsupported compound operator: ${r.SyntaxKind[e]}`)}}function p(e,t){const n=e.getSymbol();if(!n)return null;const s=n.getDeclarations();for(const n of s)if(r.Node.isClassDeclaration(n)){const r=n.getMethods().filter((e=>e.getName()===t&&0===e.getTypeParameters().length));for(const t of r){const n=t.getParameters();if(1===n.length&&n[0].getType().getText()===e.getText())return t.getReturnType()}}return null}function u(e,t){return r.Node.isBinaryExpression(e)?g(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?d(e,t):t.TypeChecker.getTypeAtLocation(e)}function g(e,t){const n=e.getOperatorToken().getKind();let p=i(n);if(l(n)&&(p=i(c(n))),null==p)return null;if(n===r.SyntaxKind.EqualsEqualsEqualsToken||n===r.SyntaxKind.EqualsEqualsToken||n===r.SyntaxKind.ExclamationEqualsEqualsToken||n==r.SyntaxKind.ExclamationEqualsToken){const t=a(e.getRight());if(r.Node.isNullLiteral(t)||r.Node.isUndefinedKeyword(t))return null;const n=a(e.getLeft());if(r.Node.isNullLiteral(n)||r.Node.isUndefinedKeyword(n))return null}const g=a(e.getLeft()),d=a(e.getRight());let f=u(g,t),y=u(d,t);if(null==f||null==y)return null;if(y.isLiteral()&&(y=t.TypeChecker.getBaseTypeOfLiteralType(y)),f.isLiteral()&&(f=t.TypeChecker.getBaseTypeOfLiteralType(f)),!(0,s.getIsUnityAPIType)(f)&&!(0,s.getIsUnityAPIType)(y))return t.TypeChecker.getTypeAtLocation(e);const m=o(t.TypeChecker,f,p,y),h=o(t.TypeChecker,y,p,f);if(null==m&&null==h)return null;if(l(n)){const e=i(c(n));return null==e?null:o(t.TypeChecker,f,e,y)}return null!=m?m:h}function d(e,t){const n=a(e.getOperand()),r=i(e.getOperatorToken(),!0);return r?p(t.TypeChecker.getTypeAtLocation(n),r):null}t.getOperatorMethodReturnType=o,t.getOperatorMethodName=i,t.unwrapParenthesizedExpression=a,t.isCompoundAssignment=l,t.getEquivalentOperatorForCompound=c,t.getUnaryOperatorMethodReturnType=p,t.getOperatorNodeReturnType=function(e,t){return r.Node.isBinaryExpression(e)?g(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?d(e,t):null}},150:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(n(928)),l=n(71),c=n(899),p=n(710),u=n(113),g=n(538),d=n(340),f=n(780),y=n(195),m=n(371),h=n(58),T=n(551),x=n(452),S=n(821),E=n(24),N=n(105),v=n(286),b=n(682),A=n(325),P=n(256),C=i(n(471)),I=n(276),K=i(n(669)),M=n(772);t.default=class{constructor(e){this.project=new p.Project({tsConfigFilePath:e,skipAddingFilesFromTsConfig:!0}),this.rootDirectory=a.dirname(e);const t=this.project.getTypeChecker();(0,l.setProjectRoot)(this.rootDirectory),this.transformationContext=new h.TransformationContext(t),this.transformers=[{phase:0,transformer:new u.PromiseWrapperTransformer},{phase:1,transformer:new P.CSharpEventTransformer},{phase:1,transformer:new d.RefTransformer},{phase:1,transformer:new E.EventContextTransformer},{phase:1,transformer:new v.DelegateToArrowFunctionTransformer},{phase:1,transformer:new A.BracketAccessTransformer},{phase:1,transformer:new M.ObjectInstantiateTransformer},{phase:1,transformer:new g.ComponentCallTransformer},{phase:1,transformer:new x.ScriptableObjectCreateInstanceTransformer},{phase:1,transformer:new m.ExtensionMethodTransformer},{phase:1,transformer:new T.GeniesInstanceTransformer},{phase:2,transformer:new f.GenericTypeTransformer},{phase:3,transformer:new S.OperatorOverloadingTransformer},{phase:4,transformer:new b.NumericOverloadResolutionTransformer},{phase:5,transformer:new y.GenericMethodTransformer}]}compile(e,t,n){this.project.addSourceFilesAtPaths(e),this.project.addSourceFilesAtPaths(t),n&&n.length>0&&(this.fixReferences(n,this.rootDirectory),this.project.saveSync());let r=new Set,s=new Set,o=new Map;e.forEach((e=>{const t=this.project.getSourceFileOrThrow(e);this.collectFiles(t,r,s,o)}));const i=this.topologicalSort(Array.from(r),o),a=new Map;let c=new Map;i.forEach((e=>{let t=new C.default(e.getFullText());this.setDefaultExport(e),(0,l.updateImportsToAliasPaths)(e),this.initializeCompileOutput(c,e);try{this.applyTransformationDiffs(t,e),a.set(e,t)}catch(e){console.error(e)}})),i.forEach((e=>{this.emit(c,a,e)}));let p=JSON.stringify({outputs:[...c.values()]});return console.log(p),p}setDefaultExport(e){const t=e.getDefaultExportSymbol();let n=null;if(t&&(n=t.getDeclarations().find((e=>e.getKind()===p.SyntaxKind.ClassDeclaration))),null==n)for(const t of e.getClasses())if(((0,l.extendsMonoBehaviour)(t)||(0,l.extendsScriptableObject)(t))&&!t.isDefaultExport()){t.setIsDefaultExport(!0);break}}fixReferences(e,t){const n=new Map;for(const{oldPath:t,newPath:r}of e)n.set(a.resolve(t),a.resolve(r));for(const e of this.project.getSourceFiles())for(const r of e.getImportDeclarations()){let s=r.getModuleSpecifierValue();if(!s)continue;s=s.replace("@assets","Assets");const o=this.resolveSpecifier(s,e.getDirectoryPath(),t)+".ts";if(n.has(o)){const t=n.get(o);let s;const i=this.project.getSourceFile(t);if(i){const n=(0,l.convertToGeniesAliasPath)(t);s=null!==n?n.replace(".ts",""):e.getRelativePathAsModuleSpecifierTo(i)}else{const n=e.getDirectoryPath();s=a.relative(n,t).replace(/\\/g,"/"),s.startsWith(".")||(s="./"+s)}r.setModuleSpecifier(s)}}}resolveSpecifier(e,t,n){return e.startsWith(".")?a.resolve(t,e):e.startsWith("/")?a.resolve(e):a.resolve(n,e)}groupTransformersByPhase(){return this.transformers.reduce(((e,t)=>{const{phase:n}=t;return e[n]||(e[n]=[]),e[n].push(t),e}),{})}runTransformers(e){const t=this.groupTransformersByPhase(),n=Object.keys(t).sort(((e,t)=>Number(e)-Number(t)));for(const r of n){const n=t[Number(r)];for(const{transformer:t}of n)for(const n of t.nodeTypes){let r=!0;const s=new Set;let o=0;const i=200;for(;r&&o<i;){r=!1,o++;const a=e.getDescendantsOfKind(n);for(const e of a){if(s.has(e))continue;if(e.wasForgotten()){console.log(e),r=!0;break}const n=t.transformNode(e,this.transformationContext);s.add(n)}if(o>=i)throw new Error("Transformations reached max retries")}}}}initializeCompileOutput(e,t){var n;try{const n=this.getGeniesDiagnostics(t);if((null==n?void 0:n.length)<=0&&(this.runTransformers(t),t.fixMissingImports()),(0,l.sortImportsAndVars)(t),n.push(...this.getDiagnostics(t)),n.length>0)return void e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:n,JsSource:"",IsMonobehaviour:!1,IsScriptableObj:!1,Properties:[],Id:t.getFilePath(),DefaultTypeName:"",InheritanceChain:[],SupportedUiEvents:l.GeniesScriptUiEvents.None,ReferencedSpecifiers:[]});const r=t.getDefaultExportSymbol();let s;r&&(s=r.getDeclarations().find((e=>e.getKind()===p.SyntaxKind.ClassDeclaration)));let o=!1,i=!1,a="";void 0!==s&&(o=(0,l.extendsMonoBehaviour)(s),i=(0,l.extendsScriptableObject)(s),a=(0,l.getFullTypeName)(s.getType()));const c=[];let u=[],g=l.GeniesScriptUiEvents.None;if(o||i&&s){let e=new Map,t=s;for(;t;){const n=t.getName();if(n==l.MonobehaviourTypeName||n==l.ScriptableObjectTypeName)break;e=(0,l.getCompleteTypeArgumentMap)(t,e),c.unshift(...(0,l.extractProperties)(t,"",e)),t=t.getBaseClass()}u=(0,l.traversePrototypeChain)(s),(null==u?void 0:u.length)>0&&u.forEach((e=>{l.UiInterfaceToEnumMap.has(e)&&(g|=l.UiInterfaceToEnumMap.get(e))}))}const d=t.getImportDeclarations().map((e=>e.getModuleSpecifierValue())).filter((e=>e.startsWith("@assets/")||e.startsWith("@com.genies")));e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:n,JsSource:"",IsMonobehaviour:o,IsScriptableObj:i,Properties:c,Id:t.getFilePath(),DefaultTypeName:a,InheritanceChain:u,SupportedUiEvents:g,ReferencedSpecifiers:d});const f=t.getDescendantsOfKind(p.SyntaxKind.Decorator);(0,l.removeDecorators)(t,f)}catch(r){let s=null!==(n=this.getDiagnostics(t))&&void 0!==n?n:[];return s.push(`Transformations Failed: ${r}`),void e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:s,JsSource:"",IsMonobehaviour:!1,IsScriptableObj:!1,Properties:[],Id:t.getFilePath(),DefaultTypeName:"",InheritanceChain:[],SupportedUiEvents:l.GeniesScriptUiEvents.None,ReferencedSpecifiers:[]})}}emit(e,t,n){try{let r=n.getEmitOutput().getOutputFiles()[0].getText();r=this.remapSources(r,n,t);let s=e.get(n),o=s.Errors;s.IsSuccessful=void 0===o||0===o.length,s.JsSource=r}catch(t){let r=e.get(n);if(!r)return void console.error(t);r.Errors?r.Errors.push(`Compilation Failed: ${t}`):r.Errors=[t],r.IsSuccessful=!1,r.JsSource=""}}remapSources(e,t,n){try{let r=n.get(t).generateMap({source:t.getBaseName(),file:t.getBaseName(),includeContent:!1,hires:!0});const s=/\/\/# sourceMappingURL=data:application\/json(?:;charset=utf-8)?;base64,([A-Za-z0-9+/=]+)/,o=e.match(s);if(!o)throw new Error("No inline source map found in the JS output.");const i=o[1],a=Buffer.from(i,"base64").toString("utf8"),l=JSON.parse(a),c=(0,K.default)([l,JSON.stringify(r)],(()=>null)),p=JSON.stringify(c),u=`data:application/json;charset=utf-8;base64,${Buffer.from(p,"utf8").toString("base64")}`;return`${e.replace(s,"").trim()}\n//# sourceMappingURL=${u}`}catch(t){return console.error(t),e}}getGeniesDiagnostics(e){return(0,N.getGeniesSemanticDiagnostics)(e,this.project.getTypeChecker()).map((t=>{var n;const r=null!==(n=t.start)&&void 0!==n?n:0,{line:s,column:o}=e.getLineAndColumnAtPos(r),i=this.flattenDiagnosticMessageText(t.messageText);return`${e.getFilePath()} (${s},${o}): ${i}`}))}getDiagnostics(e){return e.getPreEmitDiagnostics().map((e=>e.compilerObject)).map((t=>{var n;const r=null!==(n=t.start)&&void 0!==n?n:0,{line:s,column:o}=e.getLineAndColumnAtPos(r),i=this.flattenDiagnosticMessageText(t.messageText);return`${e.getFilePath()} (${s},${o}): ${i}`}))}flattenDiagnosticMessageText(e){return"string"==typeof e?e:(0,c.flattenDiagnosticMessageText)(e,"\n")}collectFiles(e,t,n,r){const s=e.getFilePath();n.has(s)||(n.add(s),t.add(e),r.has(e)||r.set(e,new Set),e.getReferencingSourceFiles().forEach((s=>{this.collectFiles(s,t,n,r),r.has(s)||r.set(s,new Set),r.get(s).add(e)})))}topologicalSort(e,t){try{return this.topologicalSortWithTarjan(e,t)}catch(e){return console.error(`Topological Sort Failed: ${e}`),[]}}topologicalSortWithCycles(e,t){const n=new Map,r=new Map,s={value:0},o=[],i=new Set,a=[],l=e=>{if(n.set(e,s.value),r.set(e,s.value),s.value++,o.push(e),i.add(e),(t.get(e)||new Set).forEach((t=>{n.has(t)?i.has(t)&&r.set(e,Math.min(r.get(e),n.get(t))):(l(t),r.set(e,Math.min(r.get(e),r.get(t))))})),r.get(e)===n.get(e)){const t=[];let n;do{if(n=o.pop(),void 0===n)break;i.delete(n),t.push(n)}while(n!==e);a.push(t)}};return e.forEach((e=>{n.has(e)||l(e)})),a}topologicalSortWithTarjan(e,t){const n=this.topologicalSortWithCycles(e,t),r=[];for(let e=n.length-1;e>=0;e--)r.push(...n[e]);return r}applyTransformationDiffs(e,t){const n=new I.diff_match_patch,r=e.original,s=t.getFullText(),o=n.diff_main(r,s);let i=0,a=0;for(const[t,n]of o)if(0===t)i+=n.length,a+=n.length;else if(-1===t){try{e.remove(i,i+n.length)}catch(e){console.error(`Error removing text at [${i}, ${i+n.length}): ${e}`)}i+=n.length}else if(1===t){try{e.appendRight(i,n)}catch(e){console.error(`Error inserting text at ${i}: ${e}`)}a+=n.length}}}},195:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericMethodTransformer=void 0;const r=n(710),s=n(71);t.GenericMethodTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="GenericMethodTransformer",this.sourceFileGenericMap=new Map}transformNode(e,t){let n=e;if(e.getKind()===r.SyntaxKind.CallExpression){const o=e.asKindOrThrow(r.SyntaxKind.CallExpression),i=o.getExpression(),a=i.getLastChildByKind(r.SyntaxKind.Identifier);if(a){const e=a.getText();if(s.componentMethods.has(e)){const e=i.getFirstChild();if(e){const r=t.typeChecker.getTypeAtLocation(e);if((0,s.isOrInheritsFromGameObjectOrComponent)(r,t.typeChecker))return n}}}if(i.getKind()===r.SyntaxKind.PropertyAccessExpression){const a=i.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression);let l,c=a.getName();const p=a.getSymbol(),u=a.getExpression(),g=u.getType();if(!p)return n;const d=t.getSwapOverload(o);if(d&&(c=d.methodSwapValue,l=d.declaration),void 0===l){const e=p.getDeclarations();if(!(e.length>0))return n;l=e[0]}if(!l)return n;{if(!(0,s.getIsUnityAPIDeclaration)(l))return n;const r=l.getParent().getType(),i=o.getArguments(),a=o.getTypeArguments();if(a.length>0){const p=e.getSourceFile();this.sourceFileGenericMap.has(p)||this.sourceFileGenericMap.set(p,new Map);const d=a.map((e=>e.getType()));if(this.hasMatchingNonGenericOverload(l,d,i))n=this.replaceWithNonGenericCall(o,d,i,t);else{const e=this.createGenericMethodVariable(r,c,d,p,t),a=i.map((e=>e.getFullText())).join(", "),f=l.isStatic(),y=(0,s.isGeniesScriptType)(g)&&!f?"//@ts-ignore\n"+u.getText()+"."+s.GeniesInstancePropName:u.getText(),m=f?`${e}(${a})`:`${e}.call(${y}, ${a})`;n=o.replaceWithText(m)}}}}}return n}getKey(e,t,n,r,s){return`${e}$${t}$${n.map((e=>this.getTypeNameAndEnsureImported(e,r,s))).join("$")}`}createGenericMethodVariable(e,t,n,s,o){e.getTypeArguments();const i=this.getTypeNameAndEnsureImported(e,s,o),a=this.getKey(i,t,n,s,o),l=this.sourceFileGenericMap.get(s);if(!l.has(a)){const e=`$genericMethod(${i}, "${t}", ${n.map((e=>this.getTypeNameAndEnsureImported(e,s,o))).join(", ")})`,c=`_${a.replace(/\$/g,"_")}`;l.set(a,c),s.addVariableStatement({declarationKind:r.VariableDeclarationKind.Const,declarations:[{name:c,initializer:e}],leadingTrivia:"// @ts-ignore"})}return l.get(a)}getTypeNameAndEnsureImported(e,t,n){if(e.getTypeArguments().length>0){if(n.sourceFileGenericTypeMap.has(t)){let r=n.sourceFileGenericTypeMap.get(t),o=e.getTypeArguments(),i=(0,s.getGenericTypeKey)(e,o);return r.has(i)?r.get(i):(0,s.createGenericTypeVariable)(e,e.getTypeArguments(),t,n)}return(0,s.createGenericTypeVariable)(e,e.getTypeArguments(),t,n)}return(0,s.getTypeNameAndEnsureImported)(e,t)}hasMatchingNonGenericOverload(e,t,n){const r=e.getParent(),o=e.getName(),i=r.getMethods().filter((e=>e.getName()===o&&0===e.getTypeParameters().length)),a="System.Type";for(const e of i){const r=e.getParameters();if(r.filter((e=>(0,s.getFullTypeName)(e.getType())===a)).length===t.length&&r.length===t.length+n.length)return r.every(((e,r)=>r<t.length?(0,s.getFullTypeName)(e.getType())===a:e.getType().getText()===n[r-t.length].getType().getText()))}return!1}replaceWithNonGenericCall(e,t,n,o){const i=e.asKindOrThrow(r.SyntaxKind.CallExpression),a=i.getExpression().asKindOrThrow(r.SyntaxKind.PropertyAccessExpression),l=a.getName(),c=a.getExpression().getText(),p=t.map((t=>(0,s.getIsUnityAPIType)(t)&&t.isInterface()?`$typeof("${(0,s.getFullTypeName)(t)}")`:`${this.getTypeNameAndEnsureImported(t,e.getSourceFile(),o)}`)).join(", "),u=n.map((e=>e.getText())).join(", "),g=`${c}.${l}(${p}${u?`, ${u}`:""}) as ${i.getReturnType().getText()}`;return e.replaceWithText(g)}}},229:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(n(150));!function(){const e=process.argv.slice(2);let t,n=[],r=[],o=[],i=null;for(const s of e)if("--tsconfig"===s||"-t"===s)i="tsconfig";else if("-c"===s||"--compile"===s)i="compile";else if("-p"===s||"--project"===s)i="project";else if("-mf"===s||"--movedFiles"===s)i="movedFiles";else if("tsconfig"===i)t=s,i=null;else if("compile"===i)n.push(s);else if("project"===i)r.push(s);else if("movedFiles"===i){try{o=JSON.parse(s)}catch(e){console.error("Failed to parse movedFiles JSON:",e),process.exit(1)}i=null}t&&0!==n.length||(console.error("Usage: node index.js --tsconfig <tsconfigPath> -c <file1> [<file2> [...]] -p <additionalFile1> [<additionalFile2> [...]]"),process.exit(1));try{const e=new s.default(t).compile(n,r,o);process.stdout.write(e.toString())}catch(e){console.error("Compilation failed:",e),process.exit(1)}}()},256:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CSharpEventTransformer=void 0;const r=n(710);t.CSharpEventTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="CSharpEventTransformer"}transformNode(e,t){if(r.Node.isCallExpression(e)){const n=e,s=n.getExpression();if(r.Node.isPropertyAccessExpression(s)){const e=s.getName();if("Add"===e||"Remove"===e){const o=s.getExpression(),i=t.typeChecker.getTypeAtLocation(o);if(this.isCSharpEventType(i)&&r.Node.isPropertyAccessExpression(o)){const t=o.getName(),r=o.getExpression(),s=this.createNewCallExpression(n,r,e.toLowerCase(),t);return this.addTsIgnoreComment(s),s}}}}return e}isCSharpEventType(e){const t=e.getSymbol();if(!t)return!1;const n=t.getName();return"CSharpEvent"===n||"CSharpEvent_Add"===n||"CSharpEvent_Remove"===n}createNewCallExpression(e,t,n,r){const s=e.getArguments().map((e=>e.getText())).join(", "),o=`${n}_${r}`,i=`${t.getText()}.${o}(${s})`;return e.replaceWithText(i)}addTsIgnoreComment(e){const t=e.getSourceFile(),n=e.getStart();t.insertText(n,"// @ts-ignore\n")}}},276:e=>{e.exports=require("diff-match-patch")},286:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DelegateToArrowFunctionTransformer=void 0;const r=n(710),s=n(71);t.DelegateToArrowFunctionTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="DelegateToArrowFunctionTransformer"}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=n.getExpression();if(r.Node.isPropertyAccessExpression(i)){const t=i.getExpression(),n=o.getTypeAtLocation(t);if((0,s.isSignalBusType)(n)||(0,s.isGeniesEventType)(n))return e}const a=o.getResolvedSignature(n);if(!a)return e;const l=a.getParameters();return n.getArguments().map(((e,t)=>{const s=l[t];if(s){const t=o.getTypeOfSymbolAtLocation(s,n);if(this.isDelegateType(t)&&!r.Node.isArrowFunction(e))return this.wrapInArrowFunction(e,t)}return e})),n}isDelegateType(e){return e.getCallSignatures().length>0}wrapInArrowFunction(e,t){const n=e.getType().getCallSignatures();if(0===n.length)throw new Error("Expected delegate type to have call signatures.");const r=n[0].getParameters().length,s=Array.from({length:r},((e,t)=>`arg${t}`)),o=`(${s.join(", ")}) => ${e.getText()}(${s.join(", ")})`;return console.log(`Wrapping in arrow function: ${o}`),e.replaceWithText(o)}}},325:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BracketAccessTransformer=void 0;const r=n(710),s=n(71);t.BracketAccessTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.ElementAccessExpression],this.transformerKey="BracketAccessTransformer"}transformNode(e,t){if(!r.Node.isElementAccessExpression(e))return e;const n=e,o=n.getExpression(),i=n.getArgumentExpression();if(!i)return e;const a=o.getType();if(!(0,s.getIsUnityAPIType)(a))return e;const l=a.getSymbol();if(!l)return e;const c=l.getDeclarations().filter((e=>r.Node.isClassDeclaration(e)||r.Node.isInterfaceDeclaration(e)));if(0===c.length)return e;const p=[],u=[],g=new Set;if(c.forEach((e=>{e.getMethods().forEach((e=>{var t;const n=e.getName();if(n===s.GET_ITEM_NAME||n===s.SET_ITEM_NAME){const r=null===(t=e.getSignature().getDeclaration())||void 0===t?void 0:t.getText();r&&!g.has(r)&&(n===s.GET_ITEM_NAME?p.push(e):u.push(e),g.add(r))}}))})),0===p.length&&0===u.length)return e;const d=n.getParent();if(r.Node.isBinaryExpression(d)&&d.getOperatorToken().getKind()===r.SyntaxKind.EqualsToken&&d.getLeft()===n){if(0===u.length)return e;const n=d.getRight();if(!u.find((e=>{const r=e.getParameters();if(2!==r.length)return!1;const s=r[0].getType(),o=r[1].getType(),a=i.getType(),l=n.getType(),c=t.typeChecker;return c.isTypeAssignableTo(a,s)&&c.isTypeAssignableTo(l,o)})))return e;const r=o.getText(),a=i.getText(),l=n.getText(),c=`${r}.${s.SET_ITEM_NAME}(${a}, ${l})`;return d.replaceWithText(c),d}{if(0===p.length)return e;if(!p.find((e=>{const n=e.getParameters();if(1!==n.length)return!1;const r=n[0].getType(),s=i.getType();return t.typeChecker.isTypeAssignableTo(s,r)})))return e;const r=o.getText(),a=i.getText(),l=`${r}.${s.GET_ITEM_NAME}(${a})`;return n.replaceWithText(l),n}}}},340:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RefTransformer=void 0;const r=n(710);t.RefTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.BinaryExpression,r.SyntaxKind.PropertyAccessExpression],this.transformerKey="RefTransformer"}transformNode(e,t){let n=e;if(r.Node.isBinaryExpression(e)&&e.getOperatorToken().getKind()===r.SyntaxKind.EqualsToken){const s=e,o=s.getLeft(),i=s.getRight();if(r.Node.isPropertyAccessExpression(o)&&"value"===o.getName()&&this.isRefType(o.getExpression(),t.typeChecker)){const t=o.getExpression().getText(),r=i.getText();n=e.replaceWithText(`$set(${t}, ${r})`)}}else if(r.Node.isPropertyAccessExpression(e)){const r=e;if("value"===r.getName()&&this.isRefType(r.getExpression(),t.typeChecker)){const t=r.getExpression().getText();n=e.replaceWithText(`$unref(${t})`)}}return n}isRefType(e,t){const n=t.getTypeAtLocation(e).getSymbol();return!!n&&"$Ref"===n.getName()}}},371:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtensionMethodTransformer=void 0;const r=n(710),s=n(71),o=n(101);t.ExtensionMethodTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="ExtensionMethodTransformer"}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e,i=n.getExpression();if(!r.Node.isPropertyAccessExpression(i))return e;const a=i.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression),l=a.getName(),c=a.getExpression(),p=c.getType(),u=a.getSymbol();if(!u)return e;const g=u.getDeclarations();if(!g||g.length<=0)return e;const d=g.filter((e=>r.Node.isMethodDeclaration(e)||r.Node.isMethodSignature(e)));if(0===d.length)return e;const f=d[0];if(!(0,s.getIsUnityAPIDeclaration)(f))return e;const y=t.typeChecker,m=(0,o.selectBestOverload)(d,n,y);if(!m)return e;const h=m.getJsDocs().flatMap((e=>e.getTags()))||[];if(!h.some((e=>"extension"===e.getTagName())))return e;const T=h.find((e=>"extension"===e.getTagName()));if(!T)return e;let x=null;const S=h.find((e=>"extension-generic-arg-index"===e.getTagName()));if(S){const e=S.getCommentText()||"0";x=parseInt(e,10),isNaN(x)&&(x=null)}const E=T.getCommentText(),{extensionClass:N,extensionMethod:v,typeParameters:b}=this.parseExtensionComment(E,l),A=e.getSourceFile(),P=this.extractAndOrderTypeArguments(c,n,m,b,x);A.fixMissingImports();const C=n.getArguments(),I=N.split("."),K=I.pop()||"",M=I.join(".");this.ensureImport(A,K,M);const O=(0,s.isGeniesScriptType)(p)?"//@ts-ignore\n"+c.getText()+"."+s.GeniesInstancePropName:c.getText(),D=C.map((e=>e.getFullText())).join(", "),$=P.length>0?`${K}.${v}<${P.join(", ")}>(${O}, ${D})`:`${K}.${v}(${O}, ${D})`;return n.replaceWithText($)}parseExtensionComment(e,t){if(!e)return{extensionClass:"",extensionMethod:t,typeParameters:[]};const n=e.match(/^(?<namespace>[a-zA-Z_]\w*(?:\.[a-zA-Z_]\w*)*)\.(?<method>[a-zA-Z_]\w*)\s*(?:<(?<arguments>[^>]*)>)?$/);if(n&&n.groups){const{namespace:e,method:t,arguments:r}=n.groups;return{extensionClass:e,extensionMethod:t,typeParameters:r?r.split(",").map((e=>e.trim())):[]}}return{extensionClass:"",extensionMethod:t,typeParameters:[]}}ensureImport(e,t,n){const r=e.getImportDeclarations();let s=!1;for(const e of r)if(e.getModuleSpecifier().getLiteralText()===n){s=!0,e.getNamedImports().some((e=>e.getName()===t))||e.addNamedImport(t);break}s||e.addImportDeclaration({namedImports:[{name:t}],moduleSpecifier:n})}getTypeName(e){return e.getText(void 0,r.TypeFormatFlags.None)}extractAndOrderTypeArguments(e,t,n,r,o){const i=e.getType(),a=i.getTypeArguments(),l=i.getSymbolOrThrow().getDeclaredType().getTypeArguments(),c=new Map;a.forEach(((e,t)=>{const n=l[t];n&&c.set(n.getText(),e.getText())}));const p=t.getTypeArguments(),u=n.getTypeParameters();p.forEach(((e,t)=>{const n=u[t];n&&c.set(n.getText(),e.getText())}));let g=r.map((e=>c.get(e)||e));return null!==o&&o>=0&&o<=g.length&&((0,s.getTypeNameAndEnsureImported)(i,t.getSourceFile()),g.splice(o,0,this.getTypeName(i))),g}}},452:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScriptableObjectCreateInstanceTransformer=void 0;const r=n(710),s=n(71);t.ScriptableObjectCreateInstanceTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="ScriptableObjectCreateInstanceTransformer"}transformNode(e,t){let n=e;if(r.Node.isCallExpression(e)){const s=e,o=s.getExpression(),i=s.getTypeArguments(),a=s.getArguments();if(i.length>0||this.isTypeofArgument(a)){const e=o.getLastChildByKind(r.SyntaxKind.Identifier);if(!e)return n;const l=e.getText();if("CreateInstance"===l){const e=o.getFirstChild();if(!e)return n;const r=t.typeChecker.getTypeAtLocation(e);if(this.isScriptableObject(r,t)){const r=t.typeChecker.getTypeAtLocation(s);if(i.length>0){const o=i[0],a=t.typeChecker.getTypeAtLocation(o);n=this.processTypeArgument(s,a,!1,l,e,r)}else if(this.isTypeofArgument(a)){const o=this.getTypeFromTypeofArgument(a[0]);if(o){const i=t.typeChecker.getTypeAtLocation(o);n=this.processTypeArgument(s,i,!0,l,e,r)}}}}}}return n}isTypeofArgument(e){return e.length>0&&e[0].getText().startsWith("$typeof(")}getTypeFromTypeofArgument(e){const t=e.getFirstChildByKind(r.SyntaxKind.CallExpression);if(t){const e=t.getArguments()[0];if(r.Node.isTypeNode(e))return e}}processTypeArgument(e,t,n,r,o,i){if((0,s.getIsUnityAPIType)(t)){if(n)return e;const s=this.getTypeName(t),a=this.createOverloadedCallExpression(e,`$typeof(${s})`,r,o,i);return e.replaceWithText(a)}if((0,s.getGeniesScriptTypeFromType)(t)===s.GeniesScriptType.ScriptableObject){const n=(0,s.getFullTypeName)(t),a=this.createOverloadedCallExpression(e,`"${n}"`,r,o,i,!0);return e.replaceWithText(a)}return e}isScriptableObject(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&("ScriptableObject"===n.getName()||this.inheritsFrom(e,["ScriptableObject"],t))}inheritsFrom(e,t,n){var r;const s=this.getBaseTypes(e,n);for(const e of s){const s=null===(r=e.getSymbol())||void 0===r?void 0:r.getName();if(s&&t.includes(s))return!0;if(this.inheritsFrom(e,t,n))return!0}return!1}getBaseTypes(e,t){const n=[],s=e.getSymbol();if(!s)return n;const o=s.getDeclarations();if(!o)return n;for(const e of o)if(r.Node.isClassDeclaration(e)){const r=e.getHeritageClauses();for(const e of r){const r=e.getTypeNodes();for(const e of r){const r=t.typeChecker.getTypeAtLocation(e);r&&n.push(r)}}}return n}getTypeName(e){const t=e.getSymbol();return t?t.getName():e.getText()}createOverloadedCallExpression(e,t,n,r,s,o=!1){const i=e.getArguments().map((e=>e.getText())).join(", "),a=s.getText();let l=`(${r.getFullText()}.${n}(${t}${i?", "+i:""}) as ${a})`;return o&&(l=`${l}`),l}}},471:e=>{e.exports=require("magic-string")},538:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentCallTransformer=void 0;const r=n(710),s=n(71);t.ComponentCallTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="ComponentCallTransformer"}transformNode(e,t){if(r.Node.isCallExpression(e)){const n=e,o=n.getExpression(),i=n.getTypeArguments(),a=n.getArguments();if(i.length>0||this.isTypeofArgument(a)){const l=o.getLastChildByKind(r.SyntaxKind.Identifier);if(!l)return e;const c=l.getText();if(s.componentMethods.has(c)){const r=o.getFirstChild();if(!r)return e;const l=t.typeChecker.getTypeAtLocation(r);if((0,s.isOrInheritsFromGameObjectOrComponent)(l,t.typeChecker)){const r=t.typeChecker.getTypeAtLocation(n);if(i.length>0){const s=i[0],o=t.typeChecker.getTypeAtLocation(s);e=this.processTypeArgument(n,o,!1,r)}else if(this.isTypeofArgument(a)){const s=this.getTypeFromTypeofArgument(a[0]);if(s){const o=t.typeChecker.getTypeAtLocation(s);e=this.processTypeArgument(n,o,!0,r)}}}}}}return e}isTypeofArgument(e){return e.length>0&&e[0].getText().startsWith("$typeof(")}getTypeFromTypeofArgument(e){const t=e.getFirstChildByKind(r.SyntaxKind.CallExpression);if(t){const e=t.getArguments()[0];if(r.Node.isTypeNode(e))return e}}processTypeArgument(e,t,n,r){if((0,s.getIsUnityAPIType)(t)){if(n)return e;const o=t.isInterface()?`$typeof("${(0,s.getFullTypeName)(t)}")`:`$typeof(${this.getTypeName(t)})`;return this.createOverloadedCallExpression(e,`${o}`,r)}if(t.isInterface()){const n=(0,s.getFullTypeName)(t);return this.createOverloadedCallExpression(e,`"${n}"`,r,!0)}if((0,s.getGeniesScriptTypeFromType)(t)===s.GeniesScriptType.Monobehaviour){const n=(0,s.getFullTypeName)(t);return this.createOverloadedCallExpression(e,`"${n}"`,r,!0)}return e}getTypeName(e){const t=e.getSymbol();return t?t.getName():e.getText()}createOverloadedCallExpression(e,t,n,r=!1){const s=n.getText();e.getTypeArguments().forEach((t=>{e.removeTypeArgument(t)})),e.insertArgument(0,t);const o=`(${e.getText()} as ${s})`,i=e.replaceWithText(o);if(r){const e=i.getSourceFile(),t=i.getStart();e.insertText(t,"// @ts-ignore\n")}return i}}},551:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GeniesInstanceTransformer=void 0;const r=n(710),s=n(71);t.GeniesInstanceTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="GeniesInstanceTransformer"}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=o.getTypeAtLocation(n.getExpression());if(!(0,s.getIsUnityAPIType)(i))return e;const a=n.getArguments();return a.forEach(((e,t)=>{const n=o.getTypeAtLocation(e);if((0,s.isGeniesScriptType)(n)){const n=`//@ts-ignore\n${e.getText()}.${s.GeniesInstancePropName}`;a[t]=e.replaceWithText(n)}})),n}}},669:e=>{e.exports=require("@ampproject/remapping")},682:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NumericOverloadResolutionTransformer=void 0;const r=n(710),s=n(71),o=n(101);t.NumericOverloadResolutionTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="NumericOverloadResolutionTransformer"}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e,i=n.getExpression();if(!r.Node.isPropertyAccessExpression(i)&&!r.Node.isIdentifier(i))return e;const a=(r.Node.isPropertyAccessExpression(i)?i.getNameNode():i).getSymbol();if(!a)return e;const l=a.getDeclarations().filter((e=>r.Node.isMethodDeclaration(e)||r.Node.isMethodSignature(e)));if(0===l.length)return e;const c=l[0];if(!(0,s.getIsUnityAPIDeclaration)(c))return e;const p=t.typeChecker,u=(0,o.selectBestOverload)(l,n,p);if(!u)return e;const g=u.getJsDocs();let d;for(const e of g){const t=e.getTags();for(const e of t)if("methodSwap"===e.getTagName()){d=e.getCommentText();break}if(d)break}if(!d)return e;if(u.getTypeParameters().length>0)return t.setSwapOverload(n,{declaration:u,methodSwapValue:d}),e;const f=n.getArguments().map((e=>(0,o.inferPossibleTypes)(e,p))),y=n.getArguments().map(((e,t)=>{const n=f[t],r=p.getTypeAtLocation(u.getParameters()[t]);return n.find((e=>(0,s.typesAreEqual)(e,r)))?e.getFullText():(n.some((e=>(0,o.isNumericCastable)(e,r))),`(${e.getFullText()}) as ${r.getText()}`)}));let m;m=r.Node.isPropertyAccessExpression(i)?`${i.getExpression().getText()}.${d}`:d;const h=`${m}(${y.join(", ")})`,T=n.replaceWithText(h),x=T.getSourceFile(),S=T.getStart();return x.insertText(S,"// @ts-ignore\n"),T}}},710:e=>{e.exports=require("ts-morph")},772:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectInstantiateTransformer=void 0;const r=n(710),s=n(71);t.ObjectInstantiateTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.transformerKey="ObjectInstantiateTransformer"}transformNode(e,t){let n=e;if(r.Node.isCallExpression(e)){const o=e,i=o.getExpression(),a=o.getTypeArguments();if(o.getArguments(),a.length>0){const e=i.getLastChildByKind(r.SyntaxKind.Identifier);if(!e)return n;if("Instantiate"===e.getText()){const e=i.getFirstChild();if(!e)return n;const r=t.typeChecker.getTypeAtLocation(e);if((0,s.isOrInheritsFromObject)(r,t.typeChecker)){const e=t.typeChecker.getTypeAtLocation(o);if(a.length>0){const r=a[0],s=t.typeChecker.getTypeAtLocation(r);n=this.processTypeArgument(o,s,e)}}}}}return n}processTypeArgument(e,t,n){if(!(0,s.getIsUnityAPIType)(t)){e.getTypeArguments().forEach((t=>{e.removeTypeArgument(t)}));const n=t.getText(),r=`(${e.getText()} as ${n})`,s=e.replaceWithText(r),o=s.getSourceFile(),i=s.getStart();return o.insertText(i,"// @ts-ignore\n"),s}return e}}},780:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericTypeTransformer=void 0;const r=n(710),s=n(71);t.GenericTypeTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.NewExpression],this.transformerKey="GenericTypeTransformer"}transformNode(e,t){return e.isKind(r.SyntaxKind.NewExpression)?this.transformNewExpression(e,t):e}transformNewExpression(e,t){const n=e.asKindOrThrow(r.SyntaxKind.NewExpression),o=n.getType(),i=n.getTypeArguments().map((e=>e.getType())),a=n.getArguments();if((0,s.getIsUnityAPIType)(o)&&i.length>0){const r=e.getSourceFile(),l=`new ${(0,s.createGenericTypeVariable)(o,i,r,t)}(${a.map((e=>e.getFullText())).join(", ")}) as ${o.getText()}`;return n.replaceWithText(l)}return e}}},821:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorOverloadingTransformer=void 0;const r=n(710),s=n(71),o=n(130);t.OperatorOverloadingTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.BinaryExpression,r.SyntaxKind.PrefixUnaryExpression,r.SyntaxKind.PostfixUnaryExpression],this.transformerKey="OperatorOverloadingTransformer"}transformNode(e,t){return r.Node.isBinaryExpression(e)?this.transformBinaryExpression(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?this.transformUnaryExpression(e,t):e}transformBinaryExpression(e,t){var n,i;const a=e.getOperatorToken().getKind();let l=(0,o.getOperatorMethodName)(a);if((0,o.isCompoundAssignment)(a)){const e=(0,o.getEquivalentOperatorForCompound)(a);l=(0,o.getOperatorMethodName)(e)}if(l){if(a===r.SyntaxKind.EqualsEqualsEqualsToken||a===r.SyntaxKind.EqualsEqualsToken||a===r.SyntaxKind.ExclamationEqualsEqualsToken||a==r.SyntaxKind.ExclamationEqualsToken){const t=(0,o.unwrapParenthesizedExpression)(e.getRight());if(r.Node.isNullLiteral(t)||r.Node.isUndefinedKeyword(t))return e}const c=(0,o.unwrapParenthesizedExpression)(e.getLeft()),p=(0,o.unwrapParenthesizedExpression)(e.getRight()),u=this.transformNodeIfNeeded(c,t),g=this.transformNodeIfNeeded(p,t);let d=t.typeChecker.getTypeAtLocation(u),f=t.typeChecker.getTypeAtLocation(g);if(f.isLiteral()&&(f=t.typeChecker.getBaseTypeOfLiteralType(f)),d.isLiteral()&&(d=t.typeChecker.getBaseTypeOfLiteralType(d)),!(0,s.getIsUnityAPIType)(d)&&!(0,s.getIsUnityAPIType)(f))return e;const y=u.getText(),m=g.getText(),h=(0,o.getOperatorMethodReturnType)(t.typeChecker,d,l,f),T=(0,o.getOperatorMethodReturnType)(t.typeChecker,f,l,d);if(null==h&&null==T)return e;if((0,o.isCompoundAssignment)(a)){const t=c.getText(),r=(0,o.getEquivalentOperatorForCompound)(a),s=(0,o.getOperatorMethodName)(r),i=`${t} = ${null===(n=d.getSymbol())||void 0===n?void 0:n.getName()}.${s}(${t}, ${m})`;return e.replaceWithText(i)}const x=`${null===(i=(null!=h?d:f).getSymbol())||void 0===i?void 0:i.getName()}.${l}(${y}, ${m})`;if(r.Node.isBinaryExpression(u)||r.Node.isBinaryExpression(g)){const t=`(${x})`;return e.replaceWithText(t)}return e.replaceWithText(x)}return e}transformUnaryExpression(e,t){var n;const r=(0,o.unwrapParenthesizedExpression)(e.getOperand()),s=e.getOperatorToken(),i=(0,o.getOperatorMethodName)(s,!0);if(i){const s=t.typeChecker.getTypeAtLocation(r);if((0,o.getUnaryOperatorMethodReturnType)(s,i)){const t=r.getText(),o=`(${null===(n=s.getSymbol())||void 0===n?void 0:n.getName()}.${i}(${t}))`;return e.replaceWithText(o)}}return e}transformNodeIfNeeded(e,t){const n=(0,o.unwrapParenthesizedExpression)(e);return r.Node.isBinaryExpression(n)||r.Node.isPrefixUnaryExpression(n)||r.Node.isPostfixUnaryExpression(n)?this.transformNode(n,t):n}}},899:e=>{e.exports=require("typescript")},928:e=>{e.exports=require("path")},985:e=>{e.exports=require("typescript/lib/tsserverlibrary")}},t={};return function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(229)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQTJCLENBQUMsRSxPQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCOXNCLElBQWpCK3NCLEVBQ0gsT0FBT0EsRUFBYWo5QixRQUdyQixJQUFJQyxFQUFTNjhCLEVBQXlCRSxHQUFZLENBR2pEaDlCLFFBQVMsQ0FBQyxHQU9YLE9BSEFrOUIsRUFBb0JGLEdBQVVHLEtBQUtsOUIsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBUys4QixHQUdwRTk4QixFQUFPRCxPQUNmLENDbkIwQis4QixDQUFvQixJIiwic291cmNlcyI6WyJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy90cmFuc2Zvcm1lcnMvRXZlbnRDb250ZXh0VHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9UcmFuc2Zvcm1hdGlvbkNvbnRleHQudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL0NvbXBpbGVyVXRpbHMudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL01ldGhvZE92ZXJsb2FkVXRpbHMudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL0dlbmllc0RpYWdub3N0aWNzVXRpbHMudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9Qcm9taXNlV3JhcHBlclRyYW5zZm9ybWVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy9PcGVyYXRvck92ZXJsb2FkaW5nVXRpbHMudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL2NvbXBpbGVyL0NvbXBpbGVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy90cmFuc2Zvcm1lcnMvR2VuZXJpY01ldGhvZFRyYW5zZm9ybWVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy9pbmRleC50cyIsImZpbGU6Ly8vVXNlcnMvcmRhbGFxL0Rlc2t0b3AvUHJvamVjdHMvZ2VuaWVzLXVuaXR5LXBhY2thZ2VzL2ludGVybmFsL2NvbS5nZW5pZXMuc2NyaXB0aW5nLmludGVybmFsL0VkaXRvci9Db21waWxlci9Qcm9qZWN0fi9zcmMvdHJhbnNmb3JtZXJzL0NTaGFycEV2ZW50VHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vZXh0ZXJuYWwgY29tbW9uanMgXCJkaWZmLW1hdGNoLXBhdGNoXCIiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9EZWxlZ2F0ZVRvQXJyb3dGdW5jdGlvblRyYW5zZm9ybWVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy90cmFuc2Zvcm1lcnMvQnJhY2tldEFjY2Vzc1RyYW5zZm9ybWVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy90cmFuc2Zvcm1lcnMvUmVmVHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9FeHRlbnNpb25NZXRob2RUcmFuc2Zvcm1lci50cyIsImZpbGU6Ly8vVXNlcnMvcmRhbGFxL0Rlc2t0b3AvUHJvamVjdHMvZ2VuaWVzLXVuaXR5LXBhY2thZ2VzL2ludGVybmFsL2NvbS5nZW5pZXMuc2NyaXB0aW5nLmludGVybmFsL0VkaXRvci9Db21waWxlci9Qcm9qZWN0fi9zcmMvdHJhbnNmb3JtZXJzL1NjcmlwdGFibGVPYmplY3RDcmVhdGVJbnN0YW5jZVRyYW5zZm9ybWVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L2V4dGVybmFsIGNvbW1vbmpzIFwibWFnaWMtc3RyaW5nXCIiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9Db21wb25lbnRDYWxsVHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9HZW5pZXNJbnN0YW5jZVRyYW5zZm9ybWVyLnRzIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L2V4dGVybmFsIGNvbW1vbmpzIFwiQGFtcHByb2plY3QvcmVtYXBwaW5nXCIiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9OdW1lcmljT3ZlcmxvYWRSZXNvbHV0aW9uVHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vZXh0ZXJuYWwgY29tbW9uanMgXCJ0cy1tb3JwaFwiIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3NyYy90cmFuc2Zvcm1lcnMvT2JqZWN0SW5zdGFudGlhdGVUcmFuc2Zvcm1lci50cyIsImZpbGU6Ly8vVXNlcnMvcmRhbGFxL0Rlc2t0b3AvUHJvamVjdHMvZ2VuaWVzLXVuaXR5LXBhY2thZ2VzL2ludGVybmFsL2NvbS5nZW5pZXMuc2NyaXB0aW5nLmludGVybmFsL0VkaXRvci9Db21waWxlci9Qcm9qZWN0fi9zcmMvdHJhbnNmb3JtZXJzL0dlbmVyaWNUeXBlVHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vc3JjL3RyYW5zZm9ybWVycy9PcGVyYXRvck92ZXJsb2FkaW5nVHJhbnNmb3JtZXIudHMiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vZXh0ZXJuYWwgY29tbW9uanMgXCJ0eXBlc2NyaXB0XCIiLCJmaWxlOi8vL1VzZXJzL3JkYWxhcS9EZXNrdG9wL1Byb2plY3RzL2dlbmllcy11bml0eS1wYWNrYWdlcy9pbnRlcm5hbC9jb20uZ2VuaWVzLnNjcmlwdGluZy5pbnRlcm5hbC9FZGl0b3IvQ29tcGlsZXIvUHJvamVjdH4vZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcInBhdGhcIiIsImZpbGU6Ly8vVXNlcnMvcmRhbGFxL0Rlc2t0b3AvUHJvamVjdHMvZ2VuaWVzLXVuaXR5LXBhY2thZ2VzL2ludGVybmFsL2NvbS5nZW5pZXMuc2NyaXB0aW5nLmludGVybmFsL0VkaXRvci9Db21waWxlci9Qcm9qZWN0fi9leHRlcm5hbCBjb21tb25qcyBcInR5cGVzY3JpcHQvbGliL3Rzc2VydmVybGlicmFyeVwiIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3dlYnBhY2svYm9vdHN0cmFwIiwiZmlsZTovLy9Vc2Vycy9yZGFsYXEvRGVza3RvcC9Qcm9qZWN0cy9nZW5pZXMtdW5pdHktcGFja2FnZXMvaW50ZXJuYWwvY29tLmdlbmllcy5zY3JpcHRpbmcuaW50ZXJuYWwvRWRpdG9yL0NvbXBpbGVyL1Byb2plY3R+L3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJnZW5pZXMtdHlwZXNjcmlwdC1jb21waWxlclwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJnZW5pZXMtdHlwZXNjcmlwdC1jb21waWxlclwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAiLCJpbXBvcnQge05vZGUsIFN5bnRheEtpbmQsIFR5cGVDaGVja2VyLCB0cywgVHlwZX0gZnJvbSBcInRzLW1vcnBoXCI7XG5pbXBvcnQgeyBJVHJhbnNmb3JtZXIgfSBmcm9tIFwiLi9JVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7VHJhbnNmb3JtYXRpb25Db250ZXh0fSBmcm9tIFwiLi9UcmFuc2Zvcm1hdGlvbkNvbnRleHRcIjtcbmltcG9ydCB7aXNHZW5pZXNFdmVudFR5cGUsIGlzU2lnbmFsQnVzVHlwZX0gZnJvbSBcIi4uL0NvbXBpbGVyVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIEV2ZW50Q29udGV4dFRyYW5zZm9ybWVyIGltcGxlbWVudHMgSVRyYW5zZm9ybWVyIHtcbiAgICBub2RlVHlwZXMgPSBbU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbl07XG4gICAgdHJhbnNmb3JtZXJLZXkgPSBcIkV2ZW50Q29udGV4dFRyYW5zZm9ybWVyXCI7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGlmICghTm9kZS5pc0NhbGxFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZS5hc0tpbmRPclRocm93KFN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pO1xuICAgICAgICBjb25zdCB0eXBlQ2hlY2tlciA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlcjtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY2FsbCBpcyBhIHByb3BlcnR5IGFjY2VzcyAoZS5nLiwgU2lnbmFsQnVzLnN1YnNjcmliZSlcbiAgICAgICAgaWYgKE5vZGUuaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24oZXhwcmVzc2lvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBleHByZXNzaW9uLmdldE5hbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdEV4cHJlc3Npb24gPSBleHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdFR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihvYmplY3RFeHByZXNzaW9uKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgYSBTaWduYWxCdXMgb3IgR2VuaWVzRXZlbnQgbWV0aG9kIHdlIHdhbnQgdG8gdHJhbnNmb3JtXG4gICAgICAgICAgICBjb25zdCBpc1NpZ25hbEJ1c01ldGhvZCA9IGlzU2lnbmFsQnVzVHlwZShvYmplY3RUeXBlKSAmJiAobWV0aG9kTmFtZSA9PT0gXCJzdWJzY3JpYmVcIiB8fCBtZXRob2ROYW1lID09PSBcInVuc3Vic2NyaWJlXCIpO1xuICAgICAgICAgICAgY29uc3QgaXNHZW5pZXNFdmVudE1ldGhvZCA9IGlzR2VuaWVzRXZlbnRUeXBlKG9iamVjdFR5cGUpICYmIChtZXRob2ROYW1lID09PSBcImFkZExpc3RlbmVyXCIgfHwgbWV0aG9kTmFtZSA9PT0gXCJyZW1vdmVMaXN0ZW5lclwiKTtcblxuICAgICAgICAgICAgaWYgKGlzU2lnbmFsQnVzTWV0aG9kIHx8IGlzR2VuaWVzRXZlbnRNZXRob2QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gY2FsbEV4cHJlc3Npb24uZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kQXJnSW5kZXggPSBpc1NpZ25hbEJ1c01ldGhvZCA/IDEgOiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZEFyZ3NDb3VudCA9IGlzU2lnbmFsQnVzTWV0aG9kID8gMiA6IDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT0gbWV0aG9kQXJnc0NvdW50ICYmIGFyZ3MubGVuZ3RoID4gbWV0aG9kQXJnSW5kZXggJiYgTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihhcmdzW21ldGhvZEFyZ0luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kQXJnID0gYXJnc1ttZXRob2RBcmdJbmRleF0gYXMgTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dEV4cHJlc3Npb24gPSB0aGlzLmdldENvbnRleHRFeHByZXNzaW9uKG1ldGhvZEFyZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb250ZXh0IGFzIHRoZSBsYXN0IGFyZ3VtZW50IHdpdGggdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNhbGxFeHByZXNzaW9uLmFkZEFyZ3VtZW50KGAvL0B0cy1pZ25vcmVcXG4ke2NvbnRleHRFeHByZXNzaW9uLmdldFRleHQoKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb250ZXh0RXhwcmVzc2lvbihub2RlOiBOb2RlKTogTm9kZSB7XG4gICAgICAgIGlmIChOb2RlLmlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5nZXRFeHByZXNzaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn0iLCJpbXBvcnQge0NhbGxFeHByZXNzaW9uLCBNZXRob2REZWNsYXJhdGlvbiwgU291cmNlRmlsZSwgVHlwZUNoZWNrZXJ9IGZyb20gXCJ0cy1tb3JwaFwiO1xuXG5pbnRlcmZhY2UgU3dhcE92ZXJsb2FkSW5mbyB7XG4gICAgZGVjbGFyYXRpb246IE1ldGhvZERlY2xhcmF0aW9uO1xuICAgIG1ldGhvZFN3YXBWYWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtYXRpb25Db250ZXh0XG57XG4gICAgcHVibGljIHNvdXJjZUZpbGVHZW5lcmljVHlwZU1hcDogTWFwPFNvdXJjZUZpbGUsIE1hcDxzdHJpbmcsIHN0cmluZz4+ID0gbmV3IE1hcDxTb3VyY2VGaWxlLCBNYXA8c3RyaW5nLCBzdHJpbmc+PigpO1xuICAgIHB1YmxpYyBsYXN0R2VuZXJpY1R5cGVWYXJJbmRleDogTWFwPFNvdXJjZUZpbGUsIG51bWJlcj4gPSBuZXcgTWFwPFNvdXJjZUZpbGUsIG51bWJlcj4oKTtcbiAgICBwdWJsaWMgdHlwZUNoZWNrZXIgOiBUeXBlQ2hlY2tlcjtcbiAgICBwcml2YXRlIG92ZXJsb2FkTWFwOiBNYXA8Q2FsbEV4cHJlc3Npb24sIFN3YXBPdmVybG9hZEluZm8+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHR5cGVDaGVja2VyIDogVHlwZUNoZWNrZXIpIHtcbiAgICAgICAgdGhpcy50eXBlQ2hlY2tlciA9IHR5cGVDaGVja2VyO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0U3dhcE92ZXJsb2FkKGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbiwgb3ZlcmxvYWRJbmZvOiBTd2FwT3ZlcmxvYWRJbmZvKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3ZlcmxvYWRNYXAuc2V0KGNhbGxFeHByZXNzaW9uLCBvdmVybG9hZEluZm8pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTd2FwT3ZlcmxvYWQoY2FsbEV4cHJlc3Npb246IENhbGxFeHByZXNzaW9uKTogU3dhcE92ZXJsb2FkSW5mbyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLm92ZXJsb2FkTWFwLmdldChjYWxsRXhwcmVzc2lvbik7XG4gICAgfVxufSIsImltcG9ydCB7XG4gICAgQXJyYXlMaXRlcmFsRXhwcmVzc2lvbixcbiAgICBDbGFzc0RlY2xhcmF0aW9uLFxuICAgIERlY29yYXRvcixcbiAgICBFbnVtRGVjbGFyYXRpb24sXG4gICAgRXhwcmVzc2lvbiwgSW1wb3J0RGVjbGFyYXRpb25TdHJ1Y3R1cmUsXG4gICAgTmV3RXhwcmVzc2lvbixcbiAgICBOb2RlLCBPcHRpb25hbEtpbmQsIFByb2plY3QsIFByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbixcbiAgICBQcm9wZXJ0eURlY2xhcmF0aW9uLFxuICAgIFNvdXJjZUZpbGUsIFN0cmluZ0xpdGVyYWwsIFN0cnVjdHVyZUtpbmQsIFN5bWJvbCwgU3ltYm9sRmxhZ3MsXG4gICAgU3ludGF4S2luZCxcbiAgICBUeXBlLCBUeXBlQ2hlY2tlciwgVHlwZUZvcm1hdEZsYWdzLCBUeXBlUmVmZXJlbmNlTm9kZSwgVmFyaWFibGVEZWNsYXJhdGlvbktpbmQsIFZhcmlhYmxlU3RhdGVtZW50U3RydWN0dXJlXG59IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7VHJhbnNmb3JtYXRpb25Db250ZXh0fSBmcm9tIFwiLi90cmFuc2Zvcm1lcnMvVHJhbnNmb3JtYXRpb25Db250ZXh0XCI7XG5cbmNvbnN0IHByb3BlcnR5SW5mb0NhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFByb3BlcnR5SW5mb1tdPigpO1xuXG5leHBvcnQgbGV0IHByb2plY3RSb290OiBzdHJpbmcgPSBcIlwiO1xuZXhwb3J0IGNvbnN0IEdlbmllc0RlY2xhcmF0aW9uRmlsZUFubm90YXRpb24gPSBcIi8vQEdlbmllcy1Vbml0eUFwaUludGVyZmFjZVwiO1xuZXhwb3J0IGNvbnN0IEdlbmllc0luc3RhbmNlUHJvcE5hbWUgPSBcIl9fZ2VuaWVzSW5zdGFuY2VfX1wiO1xuZXhwb3J0IGNvbnN0IE1vbm9iZWhhdmlvdXJUeXBlTmFtZSA9IFwiTW9ub0JlaGF2aW91clwiO1xuZXhwb3J0IGNvbnN0IFNjcmlwdGFibGVPYmplY3RUeXBlTmFtZSA9IFwiU2NyaXB0YWJsZU9iamVjdFwiO1xuZXhwb3J0IGNvbnN0IE5vblNlcmlhbGl6ZWREZWNvcmF0b3IgPSBcIk5vblNlcmlhbGl6ZWRcIjtcbmV4cG9ydCBjb25zdCBTZXJpYWxpemVGaWVsZERlY29yYXRvciA9IFwiU2VyaWFsaXplRmllbGRcIjtcblxuZXhwb3J0IGNvbnN0IEdFVF9JVEVNX05BTUUgPSBcImdldF9JdGVtXCI7XG5leHBvcnQgY29uc3QgU0VUX0lURU1fTkFNRSA9IFwic2V0X0l0ZW1cIjtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudE1ldGhvZHMgPSBuZXcgU2V0KFtcbiAgICAnR2V0Q29tcG9uZW50JyxcbiAgICAnVHJ5R2V0Q29tcG9uZW50JyxcbiAgICAnR2V0Q29tcG9uZW50SW5DaGlsZHJlbicsXG4gICAgJ0dldENvbXBvbmVudHNJbkNoaWxkcmVuJyxcbiAgICAnR2V0Q29tcG9uZW50SW5QYXJlbnQnLFxuICAgICdHZXRDb21wb25lbnRzSW5QYXJlbnQnLFxuICAgICdHZXRDb21wb25lbnRzJyxcbiAgICAnQWRkQ29tcG9uZW50J1xuXSk7XG5cbmV4cG9ydCBlbnVtIEdlbmllc1NjcmlwdFVpRXZlbnRzIHtcbiAgICBOb25lID0gMCxcbiAgICBQb2ludGVyQ2xpY2sgPSAxIDw8IDAsIC8vIDFcbiAgICBQb2ludGVyRG93biA9IDEgPDwgMSwgLy8gMlxuICAgIFBvaW50ZXJFbnRlciA9IDEgPDwgMiwgLy8gNFxuICAgIFBvaW50ZXJFeGl0ID0gMSA8PCAzLCAvLyA4XG4gICAgUG9pbnRlclVwID0gMSA8PCA0LCAvLyAxNlxuICAgIEJlZ2luRHJhZyA9IDEgPDwgNSwgLy8gMzJcbiAgICBEZXNlbGVjdCA9IDEgPDwgNiwgLy8gNjRcbiAgICBEcmFnID0gMSA8PCA3LCAvLyAxMjhcbiAgICBEcm9wID0gMSA8PCA4LCAvLyAyNTZcbiAgICBFbmREcmFnID0gMSA8PCA5LCAvLyA1MTJcbiAgICBJbml0aWFsaXplUG90ZW50aWFsRHJhZyA9IDEgPDwgMTAsIC8vIDEwMjRcbiAgICBTY3JvbGwgPSAxIDw8IDExLCAvLyAyMDQ4XG4gICAgU2VsZWN0ID0gMSA8PCAxMiwgLy8gNDA5NlxuICAgIFN1Ym1pdCA9IDEgPDwgMTMsIC8vIDgxOTJcbiAgICBVcGRhdGVTZWxlY3RlZCA9IDEgPDwgMTQsIC8vIDE2Mzg0XG4gICAgTW92ZSA9IDEgPDwgMTUsIC8vIDMyNzY4XG4gICAgQ2FuY2VsID0gMSA8PCAxNiAvLyA2NTUzNlxufVxuXG5leHBvcnQgY29uc3QgQWxsb3dlZFVpSW50ZXJmYWNlcyA9IG5ldyBTZXQoW1xuICAgICdVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVBvaW50ZXJDbGlja0hhbmRsZXInLFxuICAgICdVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVBvaW50ZXJEb3duSGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JUG9pbnRlckVudGVySGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JUG9pbnRlckV4aXRIYW5kbGVyJyxcbiAgICAnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklQb2ludGVyVXBIYW5kbGVyJyxcbiAgICAnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklCZWdpbkRyYWdIYW5kbGVyJyxcbiAgICAnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklEZXNlbGVjdEhhbmRsZXInLFxuICAgICdVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSURyYWdIYW5kbGVyJyxcbiAgICAnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklEcm9wSGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JRW5kRHJhZ0hhbmRsZXInLFxuICAgICdVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSUluaXRpYWxpemVQb3RlbnRpYWxEcmFnSGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JU2Nyb2xsSGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JU2VsZWN0SGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JU3VibWl0SGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JVXBkYXRlU2VsZWN0ZWRIYW5kbGVyJyxcbiAgICAnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklNb3ZlSGFuZGxlcicsXG4gICAgJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JQ2FuY2VsSGFuZGxlcicsXG5dKTtcblxuZXhwb3J0IGNvbnN0IFVpSW50ZXJmYWNlVG9FbnVtTWFwID0gbmV3IE1hcChbXG4gICAgWydVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVBvaW50ZXJDbGlja0hhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Qb2ludGVyQ2xpY2tdLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklQb2ludGVyRG93bkhhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Qb2ludGVyRG93bl0sXG4gICAgWydVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVBvaW50ZXJFbnRlckhhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Qb2ludGVyRW50ZXJdLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklQb2ludGVyRXhpdEhhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Qb2ludGVyRXhpdF0sXG4gICAgWydVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVBvaW50ZXJVcEhhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Qb2ludGVyVXBdLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklCZWdpbkRyYWdIYW5kbGVyJywgR2VuaWVzU2NyaXB0VWlFdmVudHMuQmVnaW5EcmFnXSxcbiAgICBbJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JRGVzZWxlY3RIYW5kbGVyJywgR2VuaWVzU2NyaXB0VWlFdmVudHMuRGVzZWxlY3RdLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklEcmFnSGFuZGxlcicsIEdlbmllc1NjcmlwdFVpRXZlbnRzLkRyYWddLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklEcm9wSGFuZGxlcicsIEdlbmllc1NjcmlwdFVpRXZlbnRzLkRyb3BdLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklFbmREcmFnSGFuZGxlcicsIEdlbmllc1NjcmlwdFVpRXZlbnRzLkVuZERyYWddLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklJbml0aWFsaXplUG90ZW50aWFsRHJhZ0hhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Jbml0aWFsaXplUG90ZW50aWFsRHJhZ10sXG4gICAgWydVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVNjcm9sbEhhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5TY3JvbGxdLFxuICAgIFsnVW5pdHlFbmdpbmUuRXZlbnRTeXN0ZW1zLklTZWxlY3RIYW5kbGVyJywgR2VuaWVzU2NyaXB0VWlFdmVudHMuU2VsZWN0XSxcbiAgICBbJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JU3VibWl0SGFuZGxlcicsIEdlbmllc1NjcmlwdFVpRXZlbnRzLlN1Ym1pdF0sXG4gICAgWydVbml0eUVuZ2luZS5FdmVudFN5c3RlbXMuSVVwZGF0ZVNlbGVjdGVkSGFuZGxlcicsIEdlbmllc1NjcmlwdFVpRXZlbnRzLlVwZGF0ZVNlbGVjdGVkXSxcbiAgICBbJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JTW92ZUhhbmRsZXInLCBHZW5pZXNTY3JpcHRVaUV2ZW50cy5Nb3ZlXSxcbiAgICBbJ1VuaXR5RW5naW5lLkV2ZW50U3lzdGVtcy5JQ2FuY2VsSGFuZGxlcicsIEdlbmllc1NjcmlwdFVpRXZlbnRzLkNhbmNlbF0sXG5dKTtcblxuY29uc3QgQWxpYXNUb1R5cGVOYW1lOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcChbXG4gICAgICAgIFtcImZsb2F0XCIsIFwiU2luZ2xlXCJdLFxuICAgICAgICBbXCJpbnRcIiwgXCJJbnQzMlwiXSxcbiAgICAgICAgW1wiZG91YmxlXCIsIFwiRG91YmxlXCJdLFxuICAgICAgICBbXCJsb25nXCIsIFwiSW50NjRcIl0sXG4gICAgICAgIFtcInVsb25nXCIsIFwiVUludDY0XCJdLFxuICAgICAgICBbXCJib29sXCIsIFwiQm9vbGVhblwiXSxcbiAgICAgICAgW1wic3RyaW5nXCIsIFwiU3RyaW5nXCJdLFxuICAgICAgICBbXCJudW1iZXJcIiwgXCJEb3VibGVcIl0sXG4gICAgICAgIFtcInNob3J0XCIsIFwiSW50MTZcIl0sXG4gICAgICAgIFtcInVzaG9ydFwiLCBcIlVJbnQxNlwiXSxcbiAgICAgICAgW1wiYnl0ZVwiLCBcIkJ5dGVcIl0sXG4gICAgICAgIFtcInNieXRlXCIsIFwiU0J5dGVcIl0sXG4gICAgICAgIFtcInVpbnRcIiwgXCJVSW50MzJcIl0sXG4gICAgICAgIFtcImNoYXJcIiwgXCJDaGFyXCJdLFxuICAgICAgICBbXCJhbnlcIiwgXCJPYmplY3RcIl1cbiAgICBdXG4pXG5cbmNvbnN0IEFsaWFzVG9GdWxsVHlwZU5hbWU6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKFtcbiAgICAgICAgW1wiZmxvYXRcIiwgXCJTeXN0ZW0uU2luZ2xlXCJdLFxuICAgICAgICBbXCJpbnRcIiwgXCJTeXN0ZW0uSW50MzJcIl0sXG4gICAgICAgIFtcImRvdWJsZVwiLCBcIlN5c3RlbS5Eb3VibGVcIl0sXG4gICAgICAgIFtcImxvbmdcIiwgXCJTeXN0ZW0uSW50NjRcIl0sXG4gICAgICAgIFtcInVsb25nXCIsIFwiU3lzdGVtLlVJbnQ2NFwiXSxcbiAgICAgICAgW1wiYm9vbFwiLCBcIlN5c3RlbS5Cb29sZWFuXCJdLFxuICAgICAgICBbXCJzdHJpbmdcIiwgXCJTeXN0ZW0uU3RyaW5nXCJdLFxuICAgICAgICBbXCJudW1iZXJcIiwgXCJTeXN0ZW0uRG91YmxlXCJdLFxuICAgICAgICBbXCJzaG9ydFwiLCBcIlN5c3RlbS5JbnQxNlwiXSxcbiAgICAgICAgW1widXNob3J0XCIsIFwiU3lzdGVtLlVJbnQxNlwiXSxcbiAgICAgICAgW1wiYnl0ZVwiLCBcIlN5c3RlbS5CeXRlXCJdLFxuICAgICAgICBbXCJzYnl0ZVwiLCBcIlN5c3RlbS5TQnl0ZVwiXSxcbiAgICAgICAgW1widWludFwiLCBcIlN5c3RlbS5VSW50MzJcIl0sXG4gICAgICAgIFtcImNoYXJcIiwgXCJTeXN0ZW0uQ2hhclwiXSxcbiAgICAgICAgW1wiYW55XCIsIFwiU3lzdGVtLk9iamVjdFwiXVxuICAgIF1cbilcblxuZXhwb3J0IGNvbnN0IE51bWVyaWNhbEFsaWFzZXMgPSBuZXcgU2V0KFtcbiAgICBcImJ5dGVcIixcbiAgICBcInNieXRlXCIsXG4gICAgXCJzaG9ydFwiLFxuICAgIFwidXNob3J0XCIsXG4gICAgXCJpbnRcIixcbiAgICBcInVpbnRcIixcbiAgICBcImZsb2F0XCIsXG4gICAgXCJkb3VibGVcIixcbiAgICBcIm51bWJlclwiXG5dKVxuXG5leHBvcnQgZW51bSBHZW5pZXNTY3JpcHRUeXBlIHtcbiAgICBOb25lID0gMCxcbiAgICBNb25vYmVoYXZpb3VyID0gMSxcbiAgICBTY3JpcHRhYmxlT2JqZWN0ID0gMlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnR5SW5mbyB7XG4gICAgUGF0aDogc3RyaW5nO1xuICAgIE5hbWU6IHN0cmluZztcbiAgICBUeXBlTmFtZTogc3RyaW5nO1xuICAgIENoaWxkUHJvcGVydGllczogUHJvcGVydHlJbmZvW107XG4gICAgSXNBcnJheTogYm9vbGVhbjtcbiAgICBJc0VudW06IGJvb2xlYW47XG4gICAgRW51bUtleXM6IHN0cmluZ1tdO1xuICAgIEVudW1WYWx1ZXM6IHN0cmluZ1tdO1xuICAgIERlY29yYXRvcnM6IEdlbmllc0RlY29yYXRvckluZm9bXTtcbiAgICBJc0dlbmllc0JlaGF2aW91clJlZjogYm9vbGVhbjtcbiAgICBJc0dlbmllc1NjcmlwdGFibGVPYmplY3RSZWY6IGJvb2xlYW47XG4gICAgSW5pdGlhbGl6ZXJzOiBzdHJpbmdbXTtcbiAgICBBcnJheUVsZW1lbnRJbml0aWFsaXplcjogUHJvcGVydHlJbmZvIHwgdW5kZWZpbmVkO1xuICAgIEFycmF5RGltZW5zaW9uOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuaWVzRGVjb3JhdG9ySW5mbyB7XG4gICAgVHlwZTogc3RyaW5nO1xuICAgIEFyZ3M6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVDb21waWxlT3V0cHV0IHtcbiAgICBGaWxlUGF0aDogc3RyaW5nO1xuICAgIElzU3VjY2Vzc2Z1bDogYm9vbGVhbjtcbiAgICBFcnJvcnM/OiBzdHJpbmdbXTtcbiAgICBCYXNlVHlwZXM/OiBzdHJpbmdbXTtcbiAgICBKc1NvdXJjZTogc3RyaW5nO1xuICAgIElzU2NyaXB0YWJsZU9iajogYm9vbGVhbjtcbiAgICBJc01vbm9iZWhhdmlvdXI6IGJvb2xlYW47XG4gICAgUHJvcGVydGllczogUHJvcGVydHlJbmZvW107XG4gICAgSWQ6IHN0cmluZztcbiAgICBEZWZhdWx0VHlwZU5hbWU6IHN0cmluZztcbiAgICBJbmhlcml0YW5jZUNoYWluOiBzdHJpbmdbXTtcbiAgICBTdXBwb3J0ZWRVaUV2ZW50czogR2VuaWVzU2NyaXB0VWlFdmVudHM7XG4gICAgUmVmZXJlbmNlZFNwZWNpZmllcnM/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBwcm9qZWN0IHJvb3QgcGF0aCBmb3Igb3RoZXIgdXRpbGl0aWVzIHRvIGNvbnN1bWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9qZWN0Um9vdChyb290OiBzdHJpbmcpIHtcbiAgICBwcm9qZWN0Um9vdCA9IHJvb3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRzTW9ub0JlaGF2aW91cihjbGFzc0RlY2w6IENsYXNzRGVjbGFyYXRpb24pOiBib29sZWFuIHtcbiAgICBsZXQgYmFzZUNsYXNzID0gY2xhc3NEZWNsLmdldEJhc2VDbGFzcygpO1xuICAgIHdoaWxlIChiYXNlQ2xhc3MpIHtcbiAgICAgICAgaWYgKGJhc2VDbGFzcy5nZXROYW1lKCkgPT09IFwiTW9ub0JlaGF2aW91clwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBiYXNlQ2xhc3MgPSBiYXNlQ2xhc3MuZ2V0QmFzZUNsYXNzKCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZHNTY3JpcHRhYmxlT2JqZWN0KGNsYXNzRGVjbDogQ2xhc3NEZWNsYXJhdGlvbik6IGJvb2xlYW4ge1xuICAgIGxldCBiYXNlQ2xhc3MgPSBjbGFzc0RlY2wuZ2V0QmFzZUNsYXNzKCk7XG4gICAgd2hpbGUgKGJhc2VDbGFzcykge1xuICAgICAgICBpZiAoYmFzZUNsYXNzLmdldE5hbWUoKSA9PT0gXCJTY3JpcHRhYmxlT2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJhc2VDbGFzcyA9IGJhc2VDbGFzcy5nZXRCYXNlQ2xhc3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRGVjb3JhdG9ycyhzb3VyY2VGaWxlOiBTb3VyY2VGaWxlLCBkZWNvcmF0b3JzOiBEZWNvcmF0b3JbXSkge1xuXG4gICAgLy8gU3RhcnQgZnJvbSB0aGUgZW5kIHNvIHdlIGRvbid0IG1lc3MgdXAgcG9zaXRpb25zIGFzIHdlIHJlbW92ZSBjb250ZW50XG4gICAgY29uc3QgcG9zaXRpb25zID0gZGVjb3JhdG9yc1xuICAgICAgICAubWFwKGRlY29yYXRvciA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGRlY29yYXRvci5nZXRGdWxsU3RhcnQoKTtcbiAgICAgICAgICAgIGxldCBlbmQgPSBkZWNvcmF0b3IuZ2V0RW5kKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0LCBlbmQgfTtcbiAgICAgICAgfSlcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIuc3RhcnQgLSBhLnN0YXJ0KTsgLy8gU29ydCBpbiByZXZlcnNlIG9yZGVyXG5cbiAgICAvLyBSZW1vdmUgZWFjaCBkZWNvcmF0b3IgYW5kIGl0cyBhc3NvY2lhdGVkIGNvbW1lbnRzXG4gICAgZm9yIChjb25zdCB7IHN0YXJ0LCBlbmQgfSBvZiBwb3NpdGlvbnMpIHtcbiAgICAgICAgXG4gICAgICAgIHNvdXJjZUZpbGUucmVwbGFjZVRleHQoW3N0YXJ0LCBlbmRdLCAnJyk7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5vZGVXaXRoRGVwdGgge1xuICAgIG5vZGU6IE5vZGU7XG4gICAgZGVwdGg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3ROb2Rlcyhub2RlOiBOb2RlLCBkZXB0aCA9IDAsIG5vZGVzOiBOb2RlV2l0aERlcHRoW10gPSBbXSk6IE5vZGVXaXRoRGVwdGhbXSB7XG4gICAgY29uc29sZS5sb2cobm9kZSk7XG4gICAgbm9kZS5mb3JFYWNoQ2hpbGQoY2hpbGQgPT4gY29sbGVjdE5vZGVzKGNoaWxkLCBkZXB0aCArIDEsIG5vZGVzKSk7XG4gICAgbm9kZXMucHVzaCh7IG5vZGUsIGRlcHRoIH0pO1xuICAgIHJldHVybiBub2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlUG9zdE9yZGVyKG5vZGU6IE5vZGUsIGNhbGxiYWNrOiAobm9kZTogTm9kZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIG5vZGUuZm9yRWFjaENoaWxkKGNoaWxkID0+IHRyYXZlcnNlUG9zdE9yZGVyKGNoaWxkLCBjYWxsYmFjaykpO1xuICAgIGNhbGxiYWNrKG5vZGUpO1xufVxuXG4vKipcbiAqIFRyYXZlcnNlcyB0aGUgZnVsbCBwcm90b3R5cGUgY2hhaW4gb2YgYSBjbGFzcywgaW5jbHVkaW5nIGJhc2UgY2xhc3NlcyBhbmQgaW1wbGVtZW50ZWQgaW50ZXJmYWNlcy5cbiAqIEBwYXJhbSBjbGFzc0RlY2xhcmF0aW9uIFRoZSBDbGFzc0RlY2xhcmF0aW9uIHRvIHRyYXZlcnNlLlxuICogQHJldHVybnMgVGhlIFByb3RvdHlwZUNoYWluIGNvbnRhaW5pbmcgYWxsIGJhc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlUHJvdG90eXBlQ2hhaW4oY2xhc3NEZWNsYXJhdGlvbjogQ2xhc3NEZWNsYXJhdGlvbik6IHN0cmluZ1tdIHtcbiAgICBjb25zdCByZXN1bHRTZXQ6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpOyAvLyBUbyBzdG9yZSB1bmlxdWUgdHlwZSBuYW1lc1xuXG4gICAgbGV0IGN1cnJlbnRDbGFzczogQ2xhc3NEZWNsYXJhdGlvbiB8IHVuZGVmaW5lZCA9IGNsYXNzRGVjbGFyYXRpb247XG5cbiAgICB3aGlsZSAoY3VycmVudENsYXNzKSB7XG4gICAgICAgIC8vIEFkZCB0aGUgY3VycmVudCBjbGFzcydzIGZ1bGwgdHlwZSBuYW1lXG4gICAgICAgIGNvbnN0IGNsYXNzVHlwZU5hbWUgPSBnZXRGdWxsVHlwZU5hbWUoY3VycmVudENsYXNzLmdldFR5cGUoKSk7XG4gICAgICAgIGlmIChjbGFzc1R5cGVOYW1lKSB7XG4gICAgICAgICAgICByZXN1bHRTZXQuYWRkKGNsYXNzVHlwZU5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJvY2VzcyBhbGwgaW1wbGVtZW50ZWQgaW50ZXJmYWNlc1xuICAgICAgICBjb25zdCBpbXBsZW1lbnRlZEludGVyZmFjZXMgPSBjdXJyZW50Q2xhc3MuZ2V0SW1wbGVtZW50cygpO1xuXG4gICAgICAgIGltcGxlbWVudGVkSW50ZXJmYWNlcy5mb3JFYWNoKGltcGxlbWVudENsYXVzZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZmFjZVR5cGUgPSBpbXBsZW1lbnRDbGF1c2UuZ2V0VHlwZSgpO1xuXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHF1ZXVlIHdpdGggdGhlIGN1cnJlbnQgaW50ZXJmYWNlIHR5cGVcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlOiBUeXBlW10gPSBbaWZhY2VUeXBlXTtcblxuICAgICAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SWZhY2VUeXBlID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRJZmFjZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaWZhY2VOYW1lID0gZ2V0RnVsbFR5cGVOYW1lKGN1cnJlbnRJZmFjZVR5cGUpO1xuICAgICAgICAgICAgICAgIGlmICghaWZhY2VOYW1lIHx8IHJlc3VsdFNldC5oYXMoaWZhY2VOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gU2tpcCBpZiBhbHJlYWR5IHByb2Nlc3NlZCBvciBuYW1lIGlzIGludmFsaWRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHRTZXQuYWRkKGlmYWNlTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBFbnF1ZXVlIGV4dGVuZGVkIGludGVyZmFjZXNcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlVHlwZXMgPSBjdXJyZW50SWZhY2VUeXBlLmdldEJhc2VUeXBlcygpO1xuICAgICAgICAgICAgICAgIGJhc2VUeXBlcy5mb3JFYWNoKGJhc2VUeXBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChiYXNlVHlwZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1vdmUgdG8gdGhlIGJhc2UgY2xhc3MsIGlmIGFueVxuICAgICAgICBjdXJyZW50Q2xhc3MgPSBjdXJyZW50Q2xhc3MuZ2V0QmFzZUNsYXNzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEFycmF5LmZyb20ocmVzdWx0U2V0KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNTaWduYWxCdXNUeXBlKHR5cGU6IFR5cGUpOiBib29sZWFuIHtcbiAgICBjb25zdCBzeW1ib2wgPSB0eXBlLmdldFN5bWJvbCgpO1xuICAgIGlmICghc3ltYm9sKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgbmFtZSA9IHN5bWJvbC5nZXROYW1lKCk7XG4gICAgcmV0dXJuIG5hbWUgPT09IFwiU2lnbmFsQnVzXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0dlbmllc0V2ZW50VHlwZSh0eXBlOiBUeXBlKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICBpZiAoIXN5bWJvbCkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IG5hbWUgPSBzeW1ib2wuZ2V0TmFtZSgpO1xuXG4gICAgcmV0dXJuIG5hbWUgPT09IFwiR2VuaWVzRXZlbnRcIjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNPckluaGVyaXRzRnJvbU9iamVjdCh0eXBlOiBUeXBlLCB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXIpOiBib29sZWFuIHtcbiAgICBpZiAoIXR5cGUpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IHN5bWJvbCA9IHR5cGUuZ2V0U3ltYm9sKCk7XG4gICAgaWYgKCFzeW1ib2wpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChbJ09iamVjdCddLmluY2x1ZGVzKHN5bWJvbC5nZXROYW1lKCkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBpbmhlcml0c0Zyb20odHlwZSwgWydPYmplY3QnXSwgdHlwZUNoZWNrZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZXNBcmVFcXVhbCh0eXBlMTogVHlwZSwgdHlwZTI6IFR5cGUpOiBib29sZWFuIHtcblxuICAgIGlmICh0eXBlMSA9PT0gdHlwZTIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZTFUZXh0ID0gY2xlYW5UeXBlVGV4dCh0eXBlMS5nZXRUZXh0KCkpO1xuICAgIGNvbnN0IHR5cGUyVGV4dCA9IGNsZWFuVHlwZVRleHQodHlwZTIuZ2V0VGV4dCgpKTtcbiAgICByZXR1cm4gdHlwZTFUZXh0ID09PSB0eXBlMlRleHQ7XG59XG5cbi8qXG4gKiBEb2VzIG5vbWluYWwgY2hlY2sgaWYgYSB0eXBlIGlzIGFzc2lnbmFibGUgdG8gYW5vdGhlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZUFzc2lnbmFibGVUbyh0eXBlOiBUeXBlLCBpbmhlcml0ZWRUeXBlOiBUeXBlLCB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXIpIHtcblxuICAgIGlmICh0eXBlc0FyZUVxdWFsKHR5cGUsIGluaGVyaXRlZFR5cGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGJhc2VUeXBlcyA9IGdldEJhc2VUeXBlcyh0eXBlLCB0eXBlQ2hlY2tlcik7XG4gICAgY29uc3QgZm91bmRUeXBlID0gYmFzZVR5cGVzLmZpbmQoYiA9PiB0eXBlc0FyZUVxdWFsKGIsIGluaGVyaXRlZFR5cGUpKVxuXG4gICAgcmV0dXJuIGZvdW5kVHlwZSAhPT0gdW5kZWZpbmVkO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ySW5oZXJpdHNGcm9tR2FtZU9iamVjdE9yQ29tcG9uZW50KHR5cGU6IFR5cGUsIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlcik6IGJvb2xlYW4ge1xuICAgIGlmICghdHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICBpZiAoIXN5bWJvbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKFsnR2FtZU9iamVjdCcsICdDb21wb25lbnQnLCAnTW9ub0JlaGF2aW91ciddLmluY2x1ZGVzKHN5bWJvbC5nZXROYW1lKCkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBpbmhlcml0c0Zyb20odHlwZSwgWydHYW1lT2JqZWN0JywgJ0NvbXBvbmVudCcsICdNb25vQmVoYXZpb3VyJ10sIHR5cGVDaGVja2VyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaGVyaXRzRnJvbSh0eXBlOiBUeXBlLCBiYXNlTmFtZXM6IHN0cmluZ1tdLCB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBiYXNlVHlwZXMgPSBnZXRCYXNlVHlwZXModHlwZSwgdHlwZUNoZWNrZXIpO1xuICAgIGZvciAoY29uc3QgYmFzZVR5cGUgb2YgYmFzZVR5cGVzKSB7XG4gICAgICAgIGNvbnN0IGJhc2VUeXBlTmFtZSA9IGJhc2VUeXBlLmdldFN5bWJvbCgpPy5nZXROYW1lKCk7XG4gICAgICAgIGlmIChiYXNlVHlwZU5hbWUgJiYgYmFzZU5hbWVzLmluY2x1ZGVzKGJhc2VUeXBlTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmhlcml0c0Zyb20oYmFzZVR5cGUsIGJhc2VOYW1lcywgdHlwZUNoZWNrZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYXNlVHlwZXModHlwZTogVHlwZSwgdHlwZUNoZWNrZXI6IFR5cGVDaGVja2VyLCB2aXNpdGVkID0gbmV3IFNldDxUeXBlPigpKTogVHlwZVtdIHtcbiAgICBjb25zdCBiYXNlVHlwZXM6IFR5cGVbXSA9IFtdO1xuICAgIGNvbnN0IHN5bWJvbCA9IHR5cGUuZ2V0U3ltYm9sKCk7XG4gICAgaWYgKCFzeW1ib2wpIHJldHVybiBiYXNlVHlwZXM7XG5cbiAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgaWYgKCFkZWNsYXJhdGlvbnMpIHJldHVybiBiYXNlVHlwZXM7XG5cbiAgICBmb3IgKGNvbnN0IGRlY2xhcmF0aW9uIG9mIGRlY2xhcmF0aW9ucykge1xuICAgICAgICBpZiAoTm9kZS5pc0NsYXNzRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBoZXJpdGFnZUNsYXVzZXMgPSBkZWNsYXJhdGlvbi5nZXRIZXJpdGFnZUNsYXVzZXMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGVyaXRhZ2VDbGF1c2Ugb2YgaGVyaXRhZ2VDbGF1c2VzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZU5vZGVzID0gaGVyaXRhZ2VDbGF1c2UuZ2V0VHlwZU5vZGVzKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0eXBlTm9kZSBvZiB0eXBlTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZVR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0eXBlTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlVHlwZSAmJiAhdmlzaXRlZC5oYXMoYmFzZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpdGVkLmFkZChiYXNlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlVHlwZXMucHVzaChiYXNlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBhZGQgYmFzZSB0eXBlcyBmcm9tIHRoZSBjdXJyZW50IGJhc2UgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVR5cGVzLnB1c2goLi4uZ2V0QmFzZVR5cGVzKGJhc2VUeXBlLCB0eXBlQ2hlY2tlciwgdmlzaXRlZCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiYXNlVHlwZXM7XG59XG5cblxuZnVuY3Rpb24gZXh0cmFjdEVudW1EZXRhaWxzKHR5cGU6IFR5cGUpOiB7XG4gICAga2V5czogc3RyaW5nW107XG4gICAgdmFsdWVzOiAoc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkKVtdO1xufSB7XG4gICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICBjb25zdCBkZWNsYXJhdGlvbiA9IHN5bWJvbD8uZ2V0RGVjbGFyYXRpb25zKCkuZmluZChkZWMgPT4gZGVjLmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5FbnVtRGVjbGFyYXRpb24pIGFzIEVudW1EZWNsYXJhdGlvbjtcbiAgICBpZiAoZGVjbGFyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleXM6IGRlY2xhcmF0aW9uLmdldE1lbWJlcnMoKS5tYXAobWVtYmVyID0+IG1lbWJlci5nZXROYW1lKCkpLFxuICAgICAgICAgICAgdmFsdWVzOiBkZWNsYXJhdGlvbi5nZXRNZW1iZXJzKCkubWFwKG1lbWJlciA9PiBtZW1iZXIuZ2V0VmFsdWUoKSkgLy8gYXNzdW1pbmcgbnVtZXJpYyBvciBjb25zdCBlbnVtc1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge2tleXM6IFtdLCB2YWx1ZXM6IFtdfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRJbXBvcnRzQW5kVmFycyhzb3VyY2VGaWxlOiBTb3VyY2VGaWxlKSB7XG4gICAgLy8gR2V0IGFsbCB0b3AtbGV2ZWwgc3RhdGVtZW50c1xuICAgIGNvbnN0IGFsbFN0YXRlbWVudHMgPSBzb3VyY2VGaWxlLmdldFN0YXRlbWVudHMoKTtcblxuICAgIC8vIFNlcGFyYXRlIGltcG9ydCBkZWNsYXJhdGlvbnMsIHZhcmlhYmxlIHN0YXRlbWVudHMsIGFuZCBvdGhlcnMuXG4gICAgY29uc3QgaW1wb3J0RGVjbGFyYXRpb25zID0gYWxsU3RhdGVtZW50cy5maWx0ZXIoc3RtdCA9PlxuICAgICAgICBzdG10LmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5JbXBvcnREZWNsYXJhdGlvblxuICAgICk7XG4gICAgY29uc3QgdmFyaWFibGVTdGF0ZW1lbnRzID0gYWxsU3RhdGVtZW50cy5maWx0ZXIoc3RtdCA9PlxuICAgICAgICBzdG10LmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5WYXJpYWJsZVN0YXRlbWVudFxuICAgICk7XG4gICAgY29uc3Qgb3RoZXJTdGF0ZW1lbnRzID0gYWxsU3RhdGVtZW50cy5maWx0ZXIoc3RtdCA9PlxuICAgICAgICBzdG10LmdldEtpbmQoKSAhPT0gU3ludGF4S2luZC5JbXBvcnREZWNsYXJhdGlvbiAmJlxuICAgICAgICBzdG10LmdldEtpbmQoKSAhPT0gU3ludGF4S2luZC5WYXJpYWJsZVN0YXRlbWVudFxuICAgICk7XG5cbiAgICAvLyBSZWNvbnN0cnVjdCB0aGUgc291cmNlIGZpbGUgdGV4dDpcbiAgICAvLyAxLiBBbGwgc29ydGVkIGltcG9ydCBkZWNsYXJhdGlvbnMuXG4gICAgLy8gMi4gVGhlbiBhIGJsYW5rIGxpbmUuXG4gICAgLy8gMy4gVGhlbiBhbGwgc29ydGVkIHZhcmlhYmxlIHN0YXRlbWVudHMuXG4gICAgLy8gNC4gVGhlbiBhIGJsYW5rIGxpbmUuXG4gICAgLy8gNS4gRmluYWxseSwgdGhlIHJlc3Qgb2YgdGhlIHN0YXRlbWVudHMuXG4gICAgY29uc3QgbmV3VGV4dCA9IFtcbiAgICAgICAgLi4uaW1wb3J0RGVjbGFyYXRpb25zLm1hcChzdG10ID0+IHN0bXQuZ2V0VGV4dCgpKSxcbiAgICAgICAgXCJcIixcbiAgICAgICAgLi4udmFyaWFibGVTdGF0ZW1lbnRzLm1hcChzdG10ID0+IHN0bXQuZ2V0VGV4dCgpKSxcbiAgICAgICAgXCJcIixcbiAgICAgICAgLi4ub3RoZXJTdGF0ZW1lbnRzLm1hcChzdG10ID0+IHN0bXQuZ2V0VGV4dCgpKVxuICAgIF0uam9pbihcIlxcblxcblwiKTtcblxuICAgIC8vIFJlcGxhY2UgdGhlIHNvdXJjZSBmaWxlJ3MgdGV4dCB3aXRoIHRoZSBuZXcgdGV4dC5cbiAgICBzb3VyY2VGaWxlLnJlcGxhY2VXaXRoVGV4dChuZXdUZXh0KTtcbn1cblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gIEhFTFBFUjogQ3JlYXRlIGAkZ2VuZXJpYyguLi4pYCB2YXJpYWJsZSBpZiBub3QgZXhpc3Rcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR2VuZXJpY1R5cGVWYXJpYWJsZShcbiAgICB0eXBlOiBUeXBlLFxuICAgIHR5cGVBcmd1bWVudHM6IFR5cGVbXSxcbiAgICBzb3VyY2VGaWxlOiBTb3VyY2VGaWxlLFxuICAgIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0XG4pOiBzdHJpbmcge1xuICAgIGlmICghdHJhbnNmb3JtYXRpb25Db250ZXh0LnNvdXJjZUZpbGVHZW5lcmljVHlwZU1hcC5oYXMoc291cmNlRmlsZSkpIHtcbiAgICAgICAgdHJhbnNmb3JtYXRpb25Db250ZXh0LnNvdXJjZUZpbGVHZW5lcmljVHlwZU1hcC5zZXQoc291cmNlRmlsZSwgbmV3IE1hcCgpKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW5lcmljTWFwID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnNvdXJjZUZpbGVHZW5lcmljVHlwZU1hcC5nZXQoc291cmNlRmlsZSkhO1xuICAgIGNvbnN0IGdlbmVyaWNLZXkgPSBnZXRHZW5lcmljVHlwZUtleSh0eXBlLCB0eXBlQXJndW1lbnRzKTtcbiAgICBpZiAoIWdlbmVyaWNNYXAuaGFzKGdlbmVyaWNLZXkpKSB7XG5cbiAgICAgICAgY29uc3QgZ2VuZXJpY1R5cGVOYW1lID0gZ2V0VHlwZU5hbWUodHlwZSk7XG4gICAgICAgIGNvbnN0IGdlbmVyaWNBcmdzID0gdHlwZUFyZ3VtZW50cy5tYXAodCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VHlwZUFyZ05hbWVBbmRFbnN1cmVJbXBvcnRlZChcbiAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgIHNvdXJjZUZpbGUsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtYXRpb25Db250ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBnZW5lcmljRGVjbGFyYXRpb24gPSBgLy8gQHRzLWlnbm9yZSBcXG4gJGdlbmVyaWMoJHtnZW5lcmljVHlwZU5hbWV9LCAke2dlbmVyaWNBcmdzLmpvaW4oXCIsIFwiKX0pYDtcbiAgICAgICAgY29uc3QgZ2VuZXJpY1Zhck5hbWUgPSBgXyR7Z2VuZXJpY0tleS5yZXBsYWNlKC9cXCQvZywgXCJfXCIpfWA7XG5cbiAgICAgICAgZ2VuZXJpY01hcC5zZXQoZ2VuZXJpY0tleSwgZ2VuZXJpY1Zhck5hbWUpO1xuXG4gICAgICAgIC8vIEluc2VydCBuZXcgc3RhdGVtZW50c1xuICAgICAgICBzb3VyY2VGaWxlLmFkZFZhcmlhYmxlU3RhdGVtZW50KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uS2luZDogVmFyaWFibGVEZWNsYXJhdGlvbktpbmQuQ29uc3QsXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmljVmFyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZXI6IGdlbmVyaWNEZWNsYXJhdGlvblxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHJldHVybiBnZW5lcmljTWFwLmdldChnZW5lcmljS2V5KSE7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgSEVMUEVSOiBSZWN1cnNpdmVseSBnZXQgYSBzdGFibGUgXCJrZXlcIiBmb3IgdHlwZSthcmdzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIGdldEdlbmVyaWNUeXBlS2V5KHR5cGU6IFR5cGUsIHR5cGVBcmd1bWVudHM6IFR5cGVbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgYmFzZU5hbWUgPSBnZXRUeXBlTmFtZSh0eXBlKTtcbiAgICBjb25zdCBuZXN0ZWQgPSB0eXBlQXJndW1lbnRzLm1hcCh0ID0+IHtcbiAgICAgICAgY29uc3QgdEFyZ3MgPSB0LmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICAgICAgcmV0dXJuICh0QXJncy5sZW5ndGggPiAwKSA/IGdldEdlbmVyaWNUeXBlS2V5KHQsIHRBcmdzKSA6IGdldFR5cGVOYW1lKHQpO1xuICAgIH0pLmpvaW4oXCIkXCIpO1xuICAgIHJldHVybiBgJHtiYXNlTmFtZX0kJHtuZXN0ZWR9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVOYW1lKHR5cGU6IFR5cGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0eXBlLmdldFN5bWJvbCgpPy5nZXROYW1lKCkgPz8gdHlwZS5nZXRUZXh0KCk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgSEVMUEVSOiBJZiB0eXBlIGhhcyBuZXN0ZWQgZ2VuZXJpY3MsIGNyZWF0ZSB0aGVtIHRvb1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGdldFR5cGVBcmdOYW1lQW5kRW5zdXJlSW1wb3J0ZWQoXG4gICAgdHlwZTogVHlwZSxcbiAgICBzb3VyY2VGaWxlOiBTb3VyY2VGaWxlLFxuICAgIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0XG4pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlLmdldFR5cGVBcmd1bWVudHMoKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVHZW5lcmljVHlwZVZhcmlhYmxlKFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIHR5cGUuZ2V0VHlwZUFyZ3VtZW50cygpLFxuICAgICAgICAgICAgc291cmNlRmlsZSxcbiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uQ29udGV4dFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKHR5cGUsIHNvdXJjZUZpbGUpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKHR5cGU6IFR5cGUsIHNvdXJjZUZpbGU6IFNvdXJjZUZpbGUpOiBzdHJpbmcge1xuXG4gICAgbGV0IHR5cGVOYW1lID0gZ2V0VHlwZU5hbWUodHlwZSk7XG4gICAgbGV0IGNzVHlwZU5hbWUgPSBcIlwiO1xuICAgIGxldCB0eXBlTW9kdWxlID0gXCJcIjtcblxuICAgIGlmIChBbGlhc1RvVHlwZU5hbWUuaGFzKHR5cGVOYW1lKSkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHR5cGVOYW1lO1xuICAgICAgICB0eXBlTmFtZSA9IEFsaWFzVG9UeXBlTmFtZS5nZXQoY3VycmVudCkgYXMgc3RyaW5nO1xuICAgICAgICB0eXBlTW9kdWxlID0gXCJTeXN0ZW1cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY3JpcHRUeXBlID0gZ2V0R2VuaWVzU2NyaXB0VHlwZUZyb21UeXBlKHR5cGUpO1xuICAgICAgICBpZiAoc2NyaXB0VHlwZSAhPT0gR2VuaWVzU2NyaXB0VHlwZS5Ob25lKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHNjcmlwdFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEdlbmllc1NjcmlwdFR5cGUuTW9ub2JlaGF2aW91cjpcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWUgPSBcIk1vbm9CZWhhdmlvdXJcIjtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU1vZHVsZSA9IFwiVW5pdHlFbmdpbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBHZW5pZXNTY3JpcHRUeXBlLlNjcmlwdGFibGVPYmplY3Q6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lID0gXCJTY3JpcHRhYmxlT2JqZWN0XCI7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVNb2R1bGUgPSBcIlVuaXR5RW5naW5lXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFnZXRJc1VuaXR5QVBJVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgdXNlIG5vbiBDU2hhcnAgdHlwZXNcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc1R5cGVOYW1lID0gZ2V0RnVsbFR5cGVOYW1lKHR5cGUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3REb3RJbmRleCA9IGNzVHlwZU5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xuICAgICAgICAgICAgdHlwZU1vZHVsZSA9IGNzVHlwZU5hbWUuc3Vic3RyaW5nKDAsIGxhc3REb3RJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgdHlwZSdzIG1vZHVsZSBpcyBhbHJlYWR5IGltcG9ydGVkXG4gICAgY29uc3QgZXhpc3RpbmdJbXBvcnQgPSBzb3VyY2VGaWxlLmdldEltcG9ydERlY2xhcmF0aW9ucygpLmZpbmQoaW1wb3J0RGVjbCA9PiB7XG4gICAgICAgIHJldHVybiBpbXBvcnREZWNsLmdldE1vZHVsZVNwZWNpZmllclZhbHVlKCkgPT09IHR5cGVNb2R1bGU7XG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0aW5nSW1wb3J0KSB7XG4gICAgICAgIC8vIEFkZCB0aGUgaW1wb3J0IGlmIGl0J3Mgbm90IGFscmVhZHkgaW1wb3J0ZWRcbiAgICAgICAgY29uc3QgaW1wb3J0U3RydWN0dXJlOiBJbXBvcnREZWNsYXJhdGlvblN0cnVjdHVyZSA9IHtcbiAgICAgICAgICAgIGtpbmQ6IFN0cnVjdHVyZUtpbmQuSW1wb3J0RGVjbGFyYXRpb24sXG4gICAgICAgICAgICBtb2R1bGVTcGVjaWZpZXI6IHR5cGVNb2R1bGUsXG4gICAgICAgICAgICBuYW1lZEltcG9ydHM6IFt7bmFtZTogdHlwZU5hbWV9XSxcbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlRmlsZS5hZGRJbXBvcnREZWNsYXJhdGlvbihpbXBvcnRTdHJ1Y3R1cmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSBtb2R1bGUgaXMgaW1wb3J0ZWQgYnV0IHRoZSB0eXBlIGlzIG5vdCBpbmNsdWRlZCwgYWRkIHRoZSBuYW1lZCBpbXBvcnRcbiAgICAgICAgY29uc3QgbmFtZWRJbXBvcnRzID0gZXhpc3RpbmdJbXBvcnQuZ2V0TmFtZWRJbXBvcnRzKCk7XG4gICAgICAgIGlmICghbmFtZWRJbXBvcnRzLnNvbWUobmFtZWRJbXBvcnQgPT4gbmFtZWRJbXBvcnQuZ2V0TmFtZSgpID09PSB0eXBlTmFtZSkpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nSW1wb3J0LmFkZE5hbWVkSW1wb3J0KHR5cGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgJHR5cGVvZiBjb252ZXJzaW9uIHN0cmluZ1xuICAgIHJldHVybiB0eXBlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bGxUeXBlTmFtZSh0eXBlOiBUeXBlLCBmb3JDc2hhcnA6IGJvb2xlYW4gPSB0cnVlLCBpbmNsdWRlQXJndW1lbnRzOiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgbGV0IHRleHQgPSBcIlwiO1xuXG4gICAgY29uc3QgYWxpYXNTeW1ib2wgPSB0eXBlLmdldEFsaWFzU3ltYm9sKCk7XG4gICAgaWYgKGFsaWFzU3ltYm9sKSB7XG4gICAgICAgIHRleHQgPSBhbGlhc1N5bWJvbC5nZXROYW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IHR5cGUuZ2V0VGV4dCgpO1xuICAgIH1cblxuICAgIGlmIChBbGlhc1RvRnVsbFR5cGVOYW1lLmhhcyh0ZXh0KSkge1xuICAgICAgICByZXR1cm4gQWxpYXNUb0Z1bGxUeXBlTmFtZS5nZXQodGV4dCkgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIGNvbnN0IHN5bWJvbCA9IHR5cGUuZ2V0U3ltYm9sKCk7XG4gICAgaWYgKCFzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7IC8vIFJldHVybiB0aGUgc2ltcGxlIHR5cGUgdGV4dCBpZiBubyBzeW1ib2wgaXMgYXZhaWxhYmxlXG4gICAgfVxuXG4gICAgaWYgKCFnZXRJc1VuaXR5QVBJVHlwZSh0eXBlKSkge1xuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgICAgIGxldCBpc0V4cG9ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbCA9PiB7XG4gICAgICAgICAgICBpZiAoTm9kZS5pc0ludGVyZmFjZURlY2xhcmF0aW9uKGRlY2wpIHx8IE5vZGUuaXNDbGFzc0RlY2xhcmF0aW9uKGRlY2wpKSB7XG4gICAgICAgICAgICAgICAgaXNFeHBvcnRlZCA9IGRlY2wuaXNFeHBvcnRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWlzRXhwb3J0ZWQgJiYgZGVjbGFyYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBkZWNsYXJhdGlvbnNbMF0uZ2V0U291cmNlRmlsZSgpO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlRmlsZVBhdGggPSBzb3VyY2VGaWxlLmdldEZpbGVQYXRoKCk7XG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBjb252ZXJ0VG9BbGlhc1BhdGgocHJvamVjdFJvb3QsIHNvdXJjZUZpbGVQYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFBhdGggPSBwYXRoLnBhcnNlKHJlbGF0aXZlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aFdpdGhvdXRFeHQgPSBwYXRoLmpvaW4ocGFyc2VkUGF0aC5kaXIsIHBhcnNlZFBhdGgubmFtZSk7XG5cbiAgICAgICAgICAgIHRleHQgPSBgJHtmaWxlUGF0aFdpdGhvdXRFeHR9LiR7c3ltYm9sLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSgpLnJlcGxhY2UoL1snXCJdL2csIFwiXCIpfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0ID0gc3ltYm9sLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSgpLnJlcGxhY2UoL1snXCJdL2csIFwiXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyc2VkID0gcGF0aC5wYXJzZSh0ZXh0KTtcbiAgICAgICAgLy8gSWYgJ2RpcicgaXNu4oCZdCBlbXB0eSwgaXQgc3VnZ2VzdHMgdGhhdCB0ZXh0IGluY2x1ZGVzIHNvbWUgc2xhc2gtbGlrZSBzZXBhcmF0b3JcbiAgICAgICAgY29uc3QgaXNQYXRoID0gcGFyc2VkLmRpciAhPT0gXCJcIiB8fCBwYXJzZWQucm9vdCAhPT0gXCJcIjtcbiAgICAgICAgaWYgKGlzUGF0aCkge1xuICAgICAgICAgICAgbGV0IGFsaWFzUGF0aCA9IGNvbnZlcnRUb0dlbmllc0FsaWFzUGF0aCh0ZXh0KTtcblxuICAgICAgICAgICAgaWYgKGFsaWFzUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGFsaWFzUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IHN5bWJvbC5nZXRGdWxseVF1YWxpZmllZE5hbWUoKS5yZXBsYWNlKC9bJ1wiXS9nLCBcIlwiKTtcbiAgICB9XG5cbiAgICBjb25zdCByZWdleCA9IC9cXCQoXFxkKykkLztcbiAgICBpZiAoZm9yQ3NoYXJwICYmIHJlZ2V4LnRlc3QodGV4dCkpIHtcbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgbnVtYmVyIGFmdGVyICQgYW5kIGNvbnZlcnQgdG8gYmFja3RpY2sgbm90YXRpb25cbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgKG1hdGNoLCBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBcImBcIiArIG51bWJlcjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGluY2x1ZGVBcmd1bWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudHMgPSB0eXBlLmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICAgICAgICAgIGlmICh0eXBlQXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0ZXh0ICs9ICc8JztcbiAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRzLmZvckVhY2goKGFyZywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ1RleHQgPSBnZXRGdWxsVHlwZU5hbWUoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBhcmdUZXh0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCB0eXBlQXJndW1lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gJywgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRleHQgKz0gJz4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHQ7XG59XG5cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHVwZGF0ZSBwYXRocyBmb3IgY2hpbGQgcHJvcGVydGllc1xuZnVuY3Rpb24gdXBkYXRlQ2hpbGRQYXRocyhjaGlsZFByb3BlcnRpZXM6IFByb3BlcnR5SW5mb1tdLCBwYXJlbnRQYXRoOiBzdHJpbmcpOiBQcm9wZXJ0eUluZm9bXSB7XG4gICAgcmV0dXJuIGNoaWxkUHJvcGVydGllcy5tYXAoY2hpbGRQcm9wID0+IHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZGVlcCBjb3B5IHRvIGF2b2lkIG1vZGlmeWluZyBjYWNoZWQgb2JqZWN0c1xuICAgICAgICBjb25zdCB1cGRhdGVkQ2hpbGRQcm9wID0geyAuLi5jaGlsZFByb3AgfTtcblxuICAgICAgICAvLyBVc2UgdGhlIGV4aXN0aW5nIE5hbWUgcHJvcGVydHkgZGlyZWN0bHlcbiAgICAgICAgdXBkYXRlZENoaWxkUHJvcC5QYXRoID0gYCR7cGFyZW50UGF0aH0uJHtjaGlsZFByb3AuTmFtZX1gO1xuXG4gICAgICAgIC8vIFJlY3Vyc2l2ZSB1cGRhdGUgZm9yIG5lc3RlZCBjaGlsZHJlblxuICAgICAgICBpZiAodXBkYXRlZENoaWxkUHJvcC5DaGlsZFByb3BlcnRpZXMgJiYgdXBkYXRlZENoaWxkUHJvcC5DaGlsZFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdXBkYXRlZENoaWxkUHJvcC5DaGlsZFByb3BlcnRpZXMgPSB1cGRhdGVDaGlsZFBhdGhzKHVwZGF0ZWRDaGlsZFByb3AuQ2hpbGRQcm9wZXJ0aWVzLCB1cGRhdGVkQ2hpbGRQcm9wLlBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVwZGF0ZWRDaGlsZFByb3A7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UHJvcGVydGllcyhjbHM6IENsYXNzRGVjbGFyYXRpb24sIGJhc2VQYXRoOiBzdHJpbmcgPSAnJywgdHlwZUFyZ3VtZW50TWFwOiBNYXA8c3RyaW5nLCBUeXBlPiA9IG5ldyBNYXAoKSk6IFByb3BlcnR5SW5mb1tdIHtcblxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGNscy5nZXROYW1lKCkgfHwgJyc7XG4gICAgY29uc3Qgc291cmNlRmlsZVBhdGggPSBjbHMuZ2V0U291cmNlRmlsZSgpLmdldEZpbGVQYXRoKCk7XG4gICAgXG4gICAgY29uc3QgdHlwZVBhcmFtcyA9IGNscy5nZXRUeXBlUGFyYW1ldGVycygpLm1hcChwID0+IHAuZ2V0TmFtZSgpKS5qb2luKCcsJyk7XG4gICAgY29uc3QgdHlwZUFyZ3MgPSBBcnJheS5mcm9tKHR5cGVBcmd1bWVudE1hcC5lbnRyaWVzKCkpXG4gICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgdHlwZU5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgY29uc3QgZ2VuZXJpY0FyZ3MgPSB2YWx1ZS5nZXRUeXBlQXJndW1lbnRzKCk7XG4gICAgICAgICAgICBpZihnZW5lcmljQXJncz8ubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlTmFtZSA9IGdldEdlbmVyaWNUeXBlS2V5KHZhbHVlLCBnZW5lcmljQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZU5hbWUgPSBnZXRGdWxsVHlwZU5hbWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYCR7a2V5fToke3R5cGVOYW1lfWBcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJywnKTtcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke3NvdXJjZUZpbGVQYXRofXwke2NsYXNzTmFtZX18JHt0eXBlUGFyYW1zfXwke3R5cGVBcmdzfWA7XG5cbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIHRoaXMgY2xhc3MgaW4gb3VyIGNhY2hlXG4gICAgaWYgKHByb3BlcnR5SW5mb0NhY2hlLmhhcyhjYWNoZUtleSkpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBjYWNoZWQgcHJvcGVydGllcyBidXQgdXBkYXRlIHRoZWlyIHBhdGhzIHdpdGggdGhlIGN1cnJlbnQgYmFzZVBhdGhcbiAgICAgICAgY29uc3QgY2FjaGVkUHJvcGVydGllcyA9IHByb3BlcnR5SW5mb0NhY2hlLmdldChjYWNoZUtleSkhO1xuICAgICAgICBpZiAoYmFzZVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRQcm9wZXJ0aWVzLm1hcChwcm9wID0+IHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgdGhlIHByb3BlcnR5IHRvIGF2b2lkIG1vZGlmeWluZyB0aGUgY2FjaGVkIHZlcnNpb25cbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvcCA9IHsgLi4ucHJvcCB9O1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwYXRoIHdpdGggdGhlIGN1cnJlbnQgYmFzZVBhdGggdXNpbmcgdGhlIE5hbWUgcHJvcGVydHlcbiAgICAgICAgICAgICAgICB1cGRhdGVkUHJvcC5QYXRoID0gYmFzZVBhdGggPyBgJHtiYXNlUGF0aH0uJHtwcm9wLk5hbWV9YCA6IHByb3AuTmFtZTtcblxuICAgICAgICAgICAgICAgIC8vIEFsc28gdXBkYXRlIGNoaWxkIHByb3BlcnRpZXMgcmVjdXJzaXZlbHlcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlZFByb3AuQ2hpbGRQcm9wZXJ0aWVzICYmIHVwZGF0ZWRQcm9wLkNoaWxkUHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRQcm9wLkNoaWxkUHJvcGVydGllcyA9IHVwZGF0ZUNoaWxkUGF0aHModXBkYXRlZFByb3AuQ2hpbGRQcm9wZXJ0aWVzLCB1cGRhdGVkUHJvcC5QYXRoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZFByb3A7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkUHJvcGVydGllcztcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wZXJ0aWVzOiBQcm9wZXJ0eUluZm9bXSA9IFtdO1xuICAgIGNscy5nZXRQcm9wZXJ0aWVzKCkuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgY29uc3QgdmlzaWJpbGl0eSA9IHByb3AuZ2V0U2NvcGUoKTtcbiAgICAgICAgY29uc3QgZGVjb3JhdG9ycyA9IGV4dHJhY3REZWNvcmF0b3JzKHByb3ApO1xuXG4gICAgICAgIC8vIFNraXAgc3RhdGljIG9yIHJlYWRvbmx5IHByb3BlcnRpZXNcbiAgICAgICAgaWYgKHByb3AuaXNTdGF0aWMoKSB8fCBwcm9wLmlzUmVhZG9ubHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZpc2liaWxpdHkgPT09ICdwcml2YXRlJyAmJiAhZGVjb3JhdG9ycy5zb21lKGQgPT4gZC5UeXBlID09PSBTZXJpYWxpemVGaWVsZERlY29yYXRvcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aXNpYmlsaXR5ID09PSAncHVibGljJyAmJiBkZWNvcmF0b3JzLnNvbWUoZCA9PiBkLlR5cGUgPT09IE5vblNlcmlhbGl6ZWREZWNvcmF0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlID0gcmVzb2x2ZUdlbmVyaWNUeXBlKHByb3AuZ2V0VHlwZSgpLCB0eXBlQXJndW1lbnRNYXApO1xuICAgICAgICBjb25zdCBpc0FycmF5ID0gdHlwZS5pc0FycmF5KCk7XG5cbiAgICAgICAgY29uc3QgcmVzb2x2ZWRUeXBlID0gcmVzb2x2ZUFycmF5RWxlbWVudFR5cGUodHlwZSwgdHlwZUFyZ3VtZW50TWFwKTtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBnZXRGdWxsVHlwZU5hbWUocmVzb2x2ZWRUeXBlKTtcbiAgICAgICAgY29uc3QgcHJvcE5hbWUgPSBwcm9wLmdldE5hbWUoKTtcbiAgICAgICAgbGV0IGZ1bGxQYXRoID0gYmFzZVBhdGggPyBgJHtiYXNlUGF0aH0uJHtwcm9wTmFtZX1gIDogcHJvcE5hbWU7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5pdGlhbGl6ZXIoZXhwcmVzc2lvbjogRXhwcmVzc2lvbik6IHN0cmluZyB7XG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5nZXRLaW5kKCkgPT09IFN5bnRheEtpbmQuTmV3RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0V4cHJlc3Npb24gPSBleHByZXNzaW9uIGFzIE5ld0V4cHJlc3Npb247XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IG5ld0V4cHJlc3Npb24uZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxUeXBlTmFtZSA9IGdldEZ1bGxUeXBlTmFtZSh0eXBlKTtcblxuICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgdGhlIGFyZ3VtZW50cyBvZiB0aGUgbmV3IGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gbmV3RXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKS5tYXAoYXJnID0+IGFyZy5nZXRUZXh0KCkpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYG5ldyAke2Z1bGxUeXBlTmFtZX0oJHthcmdzfSk7YDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbi5nZXRLaW5kKCkgPT09IFN5bnRheEtpbmQuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHNvbWV0aGluZyBsaWtlIFwiVmVjdG9yMy5mb3J3YXJkXCJcbiAgICAgICAgICAgICAgICBjb25zdCBwYWUgPSBleHByZXNzaW9uIGFzIFByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbjtcblxuICAgICAgICAgICAgICAgIC8vIFRoZSBsZWZ0IHNpZGUgc2hvdWxkIGJlIHNvbWV0aGluZyBsaWtlIFwiVmVjdG9yM1wiXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdEV4cHIgPSBwYWUuZ2V0RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRUeXBlID0gbGVmdEV4cHIuZ2V0VHlwZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdEZ1bGxUeXBlTmFtZSA9IGdldEZ1bGxUeXBlTmFtZShsZWZ0VHlwZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgcmlnaHQgc2lkZSAodGhlIGFjdHVhbCBwcm9wZXJ0eSksIGUuZy4gXCJmb3J3YXJkXCJcbiAgICAgICAgICAgICAgICBjb25zdCBtZW1iZXJOYW1lID0gcGFlLmdldE5hbWUoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiBlLmcuIFwiVW5pdHlFbmdpbmUuVmVjdG9yMy5mb3J3YXJkXCJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7bGVmdEZ1bGxUeXBlTmFtZX0uJHttZW1iZXJOYW1lfWA7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24uZ2V0S2luZCgpID09PSBTeW50YXhLaW5kLlN0cmluZ0xpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nTGl0ZXJhbCA9IGV4cHJlc3Npb24gYXMgU3RyaW5nTGl0ZXJhbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0xpdGVyYWwuZ2V0TGl0ZXJhbFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIG90aGVyIHR5cGVzLCBqdXN0IHJldHVybiB0aGUgcmF3IHRleHRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cHJlc3Npb24uZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluaXRpYWxpemVyRXhwcmVzc2lvbnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChwcm9wLmhhc0luaXRpYWxpemVyKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxpemVyID0gcHJvcC5nZXRJbml0aWFsaXplcigpO1xuICAgICAgICAgICAgaWYgKGluaXRpYWxpemVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxpemVyLmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5BcnJheUxpdGVyYWxFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5TGl0ZXJhbCA9IGluaXRpYWxpemVyIGFzIEFycmF5TGl0ZXJhbEV4cHJlc3Npb247XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMaXRlcmFsLmdldEVsZW1lbnRzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheUxpdGVyYWwuZ2V0RWxlbWVudHMoKVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVyRXhwcmVzc2lvbnMucHVzaChnZXRJbml0aWFsaXplcihlbGVtZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplckV4cHJlc3Npb25zLnB1c2goZ2V0SW5pdGlhbGl6ZXIoaW5pdGlhbGl6ZXIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9wZXJ0eUluZm86IFByb3BlcnR5SW5mbyA9IHtcbiAgICAgICAgICAgIFBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgTmFtZTogcHJvcE5hbWUsXG4gICAgICAgICAgICBUeXBlTmFtZTogdHlwZU5hbWUsXG4gICAgICAgICAgICBDaGlsZFByb3BlcnRpZXM6IFtdLFxuICAgICAgICAgICAgSXNBcnJheTogaXNBcnJheSxcbiAgICAgICAgICAgIElzRW51bTogZmFsc2UsXG4gICAgICAgICAgICBFbnVtS2V5czogW10sXG4gICAgICAgICAgICBFbnVtVmFsdWVzOiBbXSxcbiAgICAgICAgICAgIERlY29yYXRvcnM6IGV4dHJhY3REZWNvcmF0b3JzKHByb3ApLFxuICAgICAgICAgICAgSXNHZW5pZXNCZWhhdmlvdXJSZWY6IGZhbHNlLFxuICAgICAgICAgICAgSXNHZW5pZXNTY3JpcHRhYmxlT2JqZWN0UmVmOiBmYWxzZSxcbiAgICAgICAgICAgIEluaXRpYWxpemVyczogaW5pdGlhbGl6ZXJFeHByZXNzaW9ucyxcbiAgICAgICAgICAgIEFycmF5RWxlbWVudEluaXRpYWxpemVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBBcnJheURpbWVuc2lvbjogLTEsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIGxldCBkaW1lbnNpb24gPSAxO1xuICAgICAgICAgICAgcHJvcGVydHlJbmZvLkFycmF5RWxlbWVudEluaXRpYWxpemVyID0gZ2V0QXJyYXlFbGVtZW50SW5pdGlhbGl6ZXIodHlwZSwgdHlwZU5hbWUsIHByb3BOYW1lLCBmdWxsUGF0aCwgZGltZW5zaW9uLCB0eXBlQXJndW1lbnRNYXApO1xuICAgICAgICAgICAgcHJvcGVydHlJbmZvLkFycmF5RGltZW5zaW9uID0gZGltZW5zaW9uO1xuICAgICAgICAgICAgcHJvcGVydGllcy5wdXNoKHByb3BlcnR5SW5mbyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmaWxsRXh0cmFQcm9wZXJ0eUluZm8ocmVzb2x2ZWRUeXBlLCBwcm9wZXJ0eUluZm8sIHR5cGVBcmd1bWVudE1hcCk7XG4gICAgICAgIHByb3BlcnRpZXMucHVzaChwcm9wZXJ0eUluZm8pO1xuICAgIH0pO1xuXG4gICAgcHJvcGVydHlJbmZvQ2FjaGUuc2V0KGNhY2hlS2V5LCBwcm9wZXJ0aWVzKTtcblxuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xufVxuXG5mdW5jdGlvbiBmaWxsRXh0cmFQcm9wZXJ0eUluZm8ocmVzb2x2ZWRUeXBlOiBUeXBlLCBwcm9wZXJ0eUluZm86IFByb3BlcnR5SW5mbywgdHlwZUFyZ3VtZW50TWFwOiBNYXA8c3RyaW5nLCBUeXBlPikge1xuICAgIGNvbnN0IGlzRW51bSA9IHJlc29sdmVkVHlwZS5pc0VudW0oKTtcbiAgICBjb25zdCBzeW1ib2wgPSByZXNvbHZlZFR5cGUuZ2V0U3ltYm9sKCkgfHwgcmVzb2x2ZWRUeXBlLmdldEFsaWFzU3ltYm9sKCk7XG5cbiAgICBpZiAoIXN5bWJvbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gc3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gZGVjbGFyYXRpb25zWzBdO1xuICAgIGNvbnN0IGlzVW5pdHlUeXBlID0gZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKTtcbiAgICBjb25zdCBnZW5pZXNTY3JpcHRUeXBlID0gZ2V0R2VuaWVzU2NyaXB0VHlwZUZyb21Ob2RlKGRlY2xhcmF0aW9uLCBpc1VuaXR5VHlwZSk7XG5cbiAgICBwcm9wZXJ0eUluZm8uSXNHZW5pZXNCZWhhdmlvdXJSZWYgPSBnZW5pZXNTY3JpcHRUeXBlID09IEdlbmllc1NjcmlwdFR5cGUuTW9ub2JlaGF2aW91cjtcbiAgICBwcm9wZXJ0eUluZm8uSXNHZW5pZXNTY3JpcHRhYmxlT2JqZWN0UmVmID0gZ2VuaWVzU2NyaXB0VHlwZSA9PSBHZW5pZXNTY3JpcHRUeXBlLlNjcmlwdGFibGVPYmplY3Q7XG5cbiAgICBpZiAoaXNVbml0eVR5cGUgfHwgZ2VuaWVzU2NyaXB0VHlwZSAhPT0gR2VuaWVzU2NyaXB0VHlwZS5Ob25lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNFbnVtKSB7XG4gICAgICAgIGZpbGxFbnVtSW5mbyhwcm9wZXJ0eUluZm8sIHJlc29sdmVkVHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKS5zb21lKGRlY2xhcmF0aW9uID0+IE5vZGUuaXNDbGFzc0RlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSkpIHtcbiAgICAgICAgY29uc3QgY2xhc3NEZWNsID0gc3ltYm9sLmdldERlY2xhcmF0aW9ucygpLmZpbmQoTm9kZS5pc0NsYXNzRGVjbGFyYXRpb24pIGFzIENsYXNzRGVjbGFyYXRpb247XG4gICAgICAgIGNvbnN0IHR5cGVQYXJhbXMgPSBjbGFzc0RlY2wuZ2V0VHlwZVBhcmFtZXRlcnMoKTtcbiAgICAgICAgY29uc3QgdHlwZUFyZ3MgPSByZXNvbHZlZFR5cGUuZ2V0VHlwZUFyZ3VtZW50cygpO1xuXG4gICAgICAgIHR5cGVQYXJhbXMuZm9yRWFjaCgocGFyYW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbU5hbWUgPSBwYXJhbS5nZXROYW1lKCk7XG4gICAgICAgICAgICBjb25zdCB1bmlxdWVQYXJhbU5hbWUgPSBgJHtwYXJhbU5hbWV9XyR7Y2xhc3NEZWNsLmdldE5hbWUoKX1gOyAvLyBFbnN1cmUgdW5pcXVlbmVzcyBieSBhcHBlbmRpbmcgdGhlIGNsYXNzIG5hbWVcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudE1hcC5zZXQodW5pcXVlUGFyYW1OYW1lLCB0eXBlQXJnc1tpbmRleF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL0dldCBiYXNlIHR5cGUgYXJnc1xuICAgICAgICB0eXBlQXJndW1lbnRNYXAgPSBnZXRDb21wbGV0ZVR5cGVBcmd1bWVudE1hcChjbGFzc0RlY2wsIHR5cGVBcmd1bWVudE1hcCk7XG5cbiAgICAgICAgLy9Db2xsZWN0IHByb3BlcnRpZXNcbiAgICAgICAgY29uc3QgY2hpbGRQcm9wZXJ0aWVzOiBQcm9wZXJ0eUluZm9bXSA9IFtdO1xuICAgICAgICBsZXQgYmFzZUNsYXNzID0gY2xhc3NEZWNsO1xuICAgICAgICB3aGlsZSAoYmFzZUNsYXNzKSB7XG4gICAgICAgICAgICBjaGlsZFByb3BlcnRpZXMudW5zaGlmdCguLi5leHRyYWN0UHJvcGVydGllcyhiYXNlQ2xhc3MsIHByb3BlcnR5SW5mby5QYXRoLCB0eXBlQXJndW1lbnRNYXApKTtcblxuICAgICAgICAgICAgbGV0IG5ld0Jhc2UgPSBiYXNlQ2xhc3MuZ2V0QmFzZUNsYXNzKCk7XG4gICAgICAgICAgICBpZiAobmV3QmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYmFzZUNsYXNzID0gbmV3QmFzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wZXJ0eUluZm8uQ2hpbGRQcm9wZXJ0aWVzID0gY2hpbGRQcm9wZXJ0aWVzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZmlsbEVudW1JbmZvKHByb3BlcnR5SW5mbzogUHJvcGVydHlJbmZvLCByZXNvbHZlZFR5cGU6IFR5cGUpIHtcbiAgICBjb25zdCB7a2V5cywgdmFsdWVzfSA9IGV4dHJhY3RFbnVtRGV0YWlscyhyZXNvbHZlZFR5cGUpO1xuICAgIHByb3BlcnR5SW5mby5FbnVtS2V5cyA9IGtleXM7XG4gICAgcHJvcGVydHlJbmZvLkVudW1WYWx1ZXMgPSB2YWx1ZXMubWFwKHZhbHVlID0+IHZhbHVlID09PSB1bmRlZmluZWQgPyBcIlwiIDogdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgcHJvcGVydHlJbmZvLklzRW51bSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEFycmF5RWxlbWVudEluaXRpYWxpemVyKHR5cGU6IFR5cGUsIHVuZGVybHlpbmdUeXBlTmFtZTogc3RyaW5nLCBwcm9wTmFtZTogc3RyaW5nLCBwcm9wUGF0aDogc3RyaW5nLCBkaW1lbnNpb246IG51bWJlciwgdHlwZUFyZ3VtZW50TWFwOiBNYXA8c3RyaW5nLCBUeXBlPik6IFByb3BlcnR5SW5mbyB7XG4gICAgbGV0IHJlc29sdmVkVHlwZSA9IHR5cGUuaXNBcnJheSgpID8gdHlwZS5nZXRBcnJheUVsZW1lbnRUeXBlKCkhIDogdHlwZTtcblxuICAgIC8vIEVuc3VyZSBwcm9wZXIgcmVzb2x1dGlvbiBvZiBnZW5lcmljIHR5cGUgYXJndW1lbnRzIGFuZCBhcnJheSBlbGVtZW50c1xuICAgIGlmICghcmVzb2x2ZWRUeXBlLmlzQXJyYXkoKSkge1xuICAgICAgICByZXNvbHZlZFR5cGUgPSByZXNvbHZlQXJyYXlFbGVtZW50VHlwZShyZXNvbHZlZFR5cGUsIHR5cGVBcmd1bWVudE1hcCk7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnREaW1lbnNpb24gPSBkaW1lbnNpb247XG5cbiAgICBjb25zdCBwcm9wZXJ0eUluZm86IFByb3BlcnR5SW5mbyA9IHtcbiAgICAgICAgUGF0aDogcHJvcFBhdGggKyBcIl9EXCIgKyBkaW1lbnNpb24sXG4gICAgICAgIE5hbWU6IHByb3BOYW1lLFxuICAgICAgICBUeXBlTmFtZTogdW5kZXJseWluZ1R5cGVOYW1lLFxuICAgICAgICBBcnJheURpbWVuc2lvbjogZGltZW5zaW9uLFxuICAgICAgICBDaGlsZFByb3BlcnRpZXM6IFtdLFxuICAgICAgICBJc0FycmF5OiByZXNvbHZlZFR5cGUuaXNBcnJheSgpLFxuICAgICAgICBJc0VudW06IHJlc29sdmVkVHlwZS5pc0VudW0oKSxcbiAgICAgICAgRW51bUtleXM6IFtdLFxuICAgICAgICBFbnVtVmFsdWVzOiBbXSxcbiAgICAgICAgRGVjb3JhdG9yczogW10sXG4gICAgICAgIElzR2VuaWVzQmVoYXZpb3VyUmVmOiBmYWxzZSxcbiAgICAgICAgSXNHZW5pZXNTY3JpcHRhYmxlT2JqZWN0UmVmOiBmYWxzZSxcbiAgICAgICAgSW5pdGlhbGl6ZXJzOiBbXSxcbiAgICAgICAgQXJyYXlFbGVtZW50SW5pdGlhbGl6ZXI6IHVuZGVmaW5lZFxuICAgIH07XG5cbiAgICBpZiAoIXJlc29sdmVkVHlwZS5pc0FycmF5KCkpIHtcbiAgICAgICAgZmlsbEV4dHJhUHJvcGVydHlJbmZvKHJlc29sdmVkVHlwZSwgcHJvcGVydHlJbmZvLCB0eXBlQXJndW1lbnRNYXApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5BcnJheUVsZW1lbnRJbml0aWFsaXplciA9IGdldEFycmF5RWxlbWVudEluaXRpYWxpemVyKHJlc29sdmVkVHlwZSwgdW5kZXJseWluZ1R5cGVOYW1lLCBwcm9wTmFtZSwgcHJvcFBhdGgsICsrY3VycmVudERpbWVuc2lvbiwgdHlwZUFyZ3VtZW50TWFwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcGVydHlJbmZvO1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGNvbXBsZXRlIHR5cGUgYXJndW1lbnQgbWFwIHRoYXQgaW5jbHVkZXMgaW5oZXJpdGVkIHR5cGUgcGFyYW1ldGVycyBmcm9tIGJhc2UgY2xhc3Nlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcGxldGVUeXBlQXJndW1lbnRNYXAoY2xzOiBDbGFzc0RlY2xhcmF0aW9uLCBleGlzdGluZ1R5cGVBcmd1bWVudE1hcDogTWFwPHN0cmluZywgVHlwZT4pOiBNYXA8c3RyaW5nLCBUeXBlPiB7XG4gICAgLy8gUHJvY2VzcyB0aGUgaW5oZXJpdGFuY2UgY2hhaW4gZnJvbSB0aGUgY3VycmVudCBjbGFzcyB1cFxuICAgIHByb2Nlc3NJbmhlcml0YW5jZUNoYWluKGNscywgZXhpc3RpbmdUeXBlQXJndW1lbnRNYXApO1xuXG4gICAgcmV0dXJuIGV4aXN0aW5nVHlwZUFyZ3VtZW50TWFwO1xufVxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIGluaGVyaXRhbmNlIGNoYWluIHRvIGJ1aWxkIGEgY29tcGxldGUgdHlwZSBhcmd1bWVudCBtYXBcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc0luaGVyaXRhbmNlQ2hhaW4oY2xzOiBDbGFzc0RlY2xhcmF0aW9uLCB0eXBlQXJndW1lbnRNYXA6IE1hcDxzdHJpbmcsIFR5cGU+KTogdm9pZCB7XG4gICAgY29uc3QgYmFzZUNsYXNzID0gY2xzLmdldEJhc2VDbGFzcygpO1xuICAgIGlmICghYmFzZUNsYXNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIGhlcml0YWdlIGNsYXVzZSB0aGF0IGV4dGVuZHMgdGhlIGJhc2UgY2xhc3NcbiAgICBjb25zdCBoZXJpdGFnZUNsYXVzZSA9IGNscy5nZXRIZXJpdGFnZUNsYXVzZUJ5S2luZChTeW50YXhLaW5kLkV4dGVuZHNLZXl3b3JkKTtcbiAgICBpZiAoIWhlcml0YWdlQ2xhdXNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0eXBlTm9kZXMgPSBoZXJpdGFnZUNsYXVzZS5nZXRUeXBlTm9kZXMoKTtcbiAgICBpZiAodHlwZU5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXh0ZW5kc1R5cGVOb2RlID0gdHlwZU5vZGVzWzBdO1xuICAgIGNvbnN0IGJhc2VUeXBlQXJncyA9IGV4dGVuZHNUeXBlTm9kZS5nZXRUeXBlQXJndW1lbnRzKCk7XG4gICAgY29uc3QgYmFzZVR5cGVQYXJhbXMgPSBiYXNlQ2xhc3MuZ2V0VHlwZVBhcmFtZXRlcnMoKTtcblxuICAgIC8vIEdldCB0aGUgYWN0dWFsIFR5cGUgdGhhdCByZXByZXNlbnRzIHRoZSBiYXNlIGNsYXNzIHdpdGggYXBwbGllZCB0eXBlIGFyZ3VtZW50c1xuICAgIGNvbnN0IGJhc2VUeXBlID0gY2xzLmdldEJhc2VUeXBlcygpWzBdO1xuICAgIGlmIChiYXNlVHlwZSkge1xuICAgICAgICAvLyBHZXQgcmVzb2x2ZWQgdHlwZSBhcmd1bWVudHMgZnJvbSB0aGUgVHlwZSBvYmplY3QgZGlyZWN0bHlcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRUeXBlQXJncyA9IGJhc2VUeXBlLmdldFR5cGVBcmd1bWVudHMoKTtcblxuICAgICAgICAvLyBGb3IgZWFjaCB0eXBlIHBhcmFtZXRlciBpbiB0aGUgYmFzZSBjbGFzc1xuICAgICAgICBiYXNlVHlwZVBhcmFtcy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IHJlc29sdmVkVHlwZUFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZVBhcmFtTmFtZSA9IHBhcmFtLmdldE5hbWUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlQ2xhc3NOYW1lID0gYmFzZUNsYXNzLmdldE5hbWUoKSB8fCAnJztcbiAgICAgICAgICAgICAgICBjb25zdCB1bmlxdWVCYXNlUGFyYW1OYW1lID0gYCR7YmFzZVBhcmFtTmFtZX1fJHtiYXNlQ2xhc3NOYW1lfWA7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHJlc29sdmVkIHR5cGUgYXJndW1lbnQgdG8gb3VyIG1hcFxuICAgICAgICAgICAgICAgIHR5cGVBcmd1bWVudE1hcC5zZXQodW5pcXVlQmFzZVBhcmFtTmFtZSwgcmVzb2x2ZWRUeXBlQXJnc1tpbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyB0eXBlIGlzIGl0c2VsZiBhIHJlZmVyZW5jZSB0byBhbm90aGVyIGdlbmVyaWMgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZUFyZyA9IHJlc29sdmVkVHlwZUFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlQXJnLmlzVHlwZVBhcmFtZXRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSB0eXBlIHBhcmFtZXRlciBiZWluZyBwYXNzZWQgdGhyb3VnaCwgc28gd2UgbmVlZCB0byBjaGVja1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgY29uY3JldGUgdHlwZSBmb3IgaXQgaW4gb3VyIG1hcFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzeW1ib2wgPSB0eXBlQXJnLmdldFN5bWJvbCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25zICYmIGRlY2xhcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGRlY2xhcmF0aW9uLmdldFBhcmVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTm9kZS5pc0NsYXNzRGVjbGFyYXRpb24ocGFyZW50KSB8fCBOb2RlLmlzSW50ZXJmYWNlRGVjbGFyYXRpb24ocGFyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50TmFtZSA9IHBhcmVudC5nZXROYW1lKCkgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbU5hbWUgPSBzeW1ib2wuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlUGFyYW1OYW1lID0gYCR7cGFyYW1OYW1lfV8ke3BhcmVudE5hbWV9YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVBcmd1bWVudE1hcC5oYXModW5pcXVlUGFyYW1OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0aGUgYmFzZSBjbGFzcyBwYXJhbWV0ZXIgdG8gdGhlIGNvbmNyZXRlIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRNYXAuc2V0KHVuaXF1ZUJhc2VQYXJhbU5hbWUsIHR5cGVBcmd1bWVudE1hcC5nZXQodW5pcXVlUGFyYW1OYW1lKSEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgYXBwcm9hY2ggcmVtYWlucyBhcyBhIHNhZmV0eSBtZWFzdXJlXG4gICAgZWxzZSBpZiAoYmFzZVR5cGVBcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gRm9yIGVhY2ggdHlwZSBwYXJhbWV0ZXIgaW4gdGhlIGJhc2UgY2xhc3NcbiAgICAgICAgYmFzZVR5cGVQYXJhbXMuZm9yRWFjaCgocGFyYW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gYmFzZVR5cGVBcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYmFzZVBhcmFtTmFtZSA9IHBhcmFtLmdldE5hbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VDbGFzc05hbWUgPSBiYXNlQ2xhc3MuZ2V0TmFtZSgpIHx8ICcnO1xuICAgICAgICAgICAgY29uc3QgdW5pcXVlQmFzZVBhcmFtTmFtZSA9IGAke2Jhc2VQYXJhbU5hbWV9XyR7YmFzZUNsYXNzTmFtZX1gO1xuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlIGJhc2UgY2xhc3NcbiAgICAgICAgICAgIGNvbnN0IHR5cGVBcmdOb2RlID0gYmFzZVR5cGVBcmdzW2luZGV4XTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIHR5cGUgYXJndW1lbnQgaXMgYSB0eXBlIHJlZmVyZW5jZSAoY291bGQgYmUgYSB0eXBlIHBhcmFtZXRlciBmcm9tIHRoZSBkZXJpdmVkIGNsYXNzKVxuICAgICAgICAgICAgaWYgKHR5cGVBcmdOb2RlLmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5UeXBlUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZVJlZiA9IHR5cGVBcmdOb2RlIGFzIFR5cGVSZWZlcmVuY2VOb2RlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gdHlwZVJlZi5nZXRUeXBlTmFtZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNJZGVudGlmaWVyKHR5cGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXJpdmVkVHlwZVBhcmFtTmFtZSA9IHR5cGVOYW1lLmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gY2xzLmdldE5hbWUoKSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlRGVyaXZlZFBhcmFtTmFtZSA9IGAke2Rlcml2ZWRUeXBlUGFyYW1OYW1lfV8ke2NsYXNzTmFtZX1gO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSByZWZlcmVuY2UgdG8gYSB0eXBlIHBhcmFtZXRlciBmcm9tIHRoZSBkZXJpdmVkIGNsYXNzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB3ZSBoYXZlIGEgY29uY3JldGUgdHlwZSBmb3IgaXQgaW4gb3VyIG1hcFxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZUFyZ3VtZW50TWFwLmhhcyh1bmlxdWVEZXJpdmVkUGFyYW1OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFwIHRoZSBiYXNlIGNsYXNzIHBhcmFtZXRlciB0byB0aGUgc2FtZSBjb25jcmV0ZSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRNYXAuc2V0KHVuaXF1ZUJhc2VQYXJhbU5hbWUsIHR5cGVBcmd1bWVudE1hcC5nZXQodW5pcXVlRGVyaXZlZFBhcmFtTmFtZSkhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZvciBhbnkgb3RoZXIgdHlwZSBhcmd1bWVudCAoY29uY3JldGUgdHlwZSlcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdHlwZSBvZiB0aGUgbm9kZSBhbmQgYWRkIGl0IHRvIG91ciBtYXBcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlQXJnID0gdHlwZUFyZ05vZGUuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgIHR5cGVBcmd1bWVudE1hcC5zZXQodW5pcXVlQmFzZVBhcmFtTmFtZSwgdHlwZUFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENvbnRpbnVlIHByb2Nlc3NpbmcgdGhlIGluaGVyaXRhbmNlIGNoYWluIHJlY3Vyc2l2ZWx5XG4gICAgcHJvY2Vzc0luaGVyaXRhbmNlQ2hhaW4oYmFzZUNsYXNzLCB0eXBlQXJndW1lbnRNYXApO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlR2VuZXJpY1R5cGUodHlwZTogVHlwZSwgdHlwZUFyZ3VtZW50TWFwOiBNYXA8c3RyaW5nLCBUeXBlPik6IFR5cGUge1xuICAgIGxldCByZXNvbHZlZFR5cGUgPSB0eXBlO1xuXG4gICAgaWYgKHJlc29sdmVkVHlwZS5pc1R5cGVQYXJhbWV0ZXIoKSkge1xuICAgICAgICBjb25zdCB0eXBlTmFtZSA9IHJlc29sdmVkVHlwZS5nZXRTeW1ib2woKT8uZ2V0TmFtZSgpO1xuICAgICAgICBjb25zdCBwYXJlbnREZWNsID0gcmVzb2x2ZWRUeXBlLmdldFN5bWJvbCgpPy5nZXREZWNsYXJhdGlvbnMoKVswXS5nZXRQYXJlbnQoKTtcbiAgICAgICAgY29uc3QgZGVjbGFyaW5nQ2xhc3NOYW1lID0gcGFyZW50RGVjbCAmJiBOb2RlLmlzQ2xhc3NEZWNsYXJhdGlvbihwYXJlbnREZWNsKSA/IHBhcmVudERlY2wuZ2V0TmFtZSgpIDogJyc7XG4gICAgICAgIGNvbnN0IHVuaXF1ZVR5cGVOYW1lID0gYCR7dHlwZU5hbWV9XyR7ZGVjbGFyaW5nQ2xhc3NOYW1lfWA7IC8vIEVuc3VyZSB1bmlxdWVuZXNzIGJ5IGFwcGVuZGluZyB0aGUgY2xhc3MgbmFtZVxuICAgICAgICBpZiAodW5pcXVlVHlwZU5hbWUgJiYgdHlwZUFyZ3VtZW50TWFwLmhhcyh1bmlxdWVUeXBlTmFtZSkpIHtcbiAgICAgICAgICAgIHJlc29sdmVkVHlwZSA9IHR5cGVBcmd1bWVudE1hcC5nZXQodW5pcXVlVHlwZU5hbWUpITtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNvbHZlZFR5cGU7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBcnJheUVsZW1lbnRUeXBlKHR5cGU6IFR5cGUsIHR5cGVBcmd1bWVudE1hcDogTWFwPHN0cmluZywgVHlwZT4pOiBUeXBlIHtcbiAgICBsZXQgcmVzb2x2ZWRUeXBlID0gdHlwZTtcblxuICAgIHdoaWxlIChyZXNvbHZlZFR5cGU/LmlzQXJyYXkoKSkge1xuICAgICAgICByZXNvbHZlZFR5cGUgPSByZXNvbHZlZFR5cGUuZ2V0QXJyYXlFbGVtZW50VHlwZSgpITtcbiAgICB9XG5cbiAgICByZXNvbHZlZFR5cGUgPSByZXNvbHZlR2VuZXJpY1R5cGUocmVzb2x2ZWRUeXBlLCB0eXBlQXJndW1lbnRNYXApO1xuXG4gICAgcmV0dXJuIHJlc29sdmVkVHlwZTtcbn1cblxuZnVuY3Rpb24gZ2V0SXNVbml0eUFQSVNvdXJjZUZpbGUoc291cmNlRmlsZTogU291cmNlRmlsZSkge1xuICAgIGlmICghc291cmNlRmlsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3ROb2RlID0gc291cmNlRmlsZS5nZXRGaXJzdENoaWxkKCk7XG5cbiAgICBpZiAoIWZpcnN0Tm9kZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vIG5vZGVzIGZvdW5kIGluIHRoZSBmaWxlLlwiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGxlYWRpbmdDb21tZW50cyA9IGZpcnN0Tm9kZS5nZXRMZWFkaW5nQ29tbWVudFJhbmdlcygpO1xuICAgIHJldHVybiBsZWFkaW5nQ29tbWVudHMubGVuZ3RoID4gMCAmJiBsZWFkaW5nQ29tbWVudHNbMF0uZ2V0VGV4dCgpID09PSBHZW5pZXNEZWNsYXJhdGlvbkZpbGVBbm5vdGF0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNWYWxpZFVuaXR5R2VuZXJpY1R5cGVBcmcoYXJnVHlwZTogVHlwZSk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgIC8vIENoZWNrIGlmIGl0J3MgYSB0eXBlIHBhcmFtZXRlciAobGlrZSBUIGluIHlvdXIgZXhhbXBsZSlcbiAgICBpZiAoYXJnVHlwZS5pc1R5cGVQYXJhbWV0ZXIoKSkge1xuICAgICAgICAvLyBHZXQgdGhlIGNvbnN0cmFpbnQgZGlyZWN0bHkgZnJvbSB0aGUgdHlwZVxuICAgICAgICBjb25zdCBjb25zdHJhaW50ID0gYXJnVHlwZS5nZXRDb25zdHJhaW50KCk7XG5cbiAgICAgICAgLy8gSWYgaXQgaGFzIGEgY29uc3RyYWludCwgY2hlY2sgaWYgdGhlIGNvbnN0cmFpbnQgaXMgYSB2YWxpZCBVbml0eSB0eXBlXG4gICAgICAgIGlmIChjb25zdHJhaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0SXNWYWxpZFVuaXR5R2VuZXJpY1R5cGVBcmcoY29uc3RyYWludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFR5cGUgcGFyYW1ldGVyIHdpdGggbm8gY29uc3RyYWludFxuICAgIH1cblxuICAgIC8vIE9yaWdpbmFsIGNoZWNrcyBmb3Igbm9uLXR5cGUgcGFyYW1ldGVyIHR5cGVzXG4gICAgbGV0IHRleHQgPSBcIlwiO1xuICAgIGNvbnN0IGFsaWFzU3ltYm9sID0gYXJnVHlwZS5nZXRBbGlhc1N5bWJvbCgpO1xuICAgIGlmIChhbGlhc1N5bWJvbCkge1xuICAgICAgICB0ZXh0ID0gYWxpYXNTeW1ib2wuZ2V0TmFtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBhcmdUeXBlLmdldFRleHQoKTtcbiAgICB9XG5cbiAgICBpZiAoQWxpYXNUb1R5cGVOYW1lLmhhcyh0ZXh0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBzY3JpcHRUeXBlID0gZ2V0R2VuaWVzU2NyaXB0VHlwZUZyb21UeXBlKGFyZ1R5cGUpO1xuICAgIGlmIChzY3JpcHRUeXBlICE9PSBHZW5pZXNTY3JpcHRUeXBlLk5vbmUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldElzVW5pdHlBUElUeXBlKGFyZ1R5cGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyRGVmaW5lZFR5cGUodHlwZTogVHlwZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHN5bWJvbCA9IHR5cGUuZ2V0U3ltYm9sKCk7XG4gICAgaWYgKCFzeW1ib2wpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIEdldCBhbGwgZGVjbGFyYXRpb25zIGZvciB0aGUgdHlwZSdzIHN5bWJvbC5cbiAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG5cbiAgICAvLyBJZiBhbnkgZGVjbGFyYXRpb24gY29tZXMgZnJvbSBhIG5vbi1leHRlcm5hbCBzb3VyY2UgZmlsZSwgdHJlYXQgaXQgYXMgdXNlciBkZWZpbmVkLlxuICAgIHJldHVybiBkZWNsYXJhdGlvbnMuc29tZShkZWNsYXJhdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBkZWNsYXJhdGlvbi5nZXRTb3VyY2VGaWxlKCk7XG4gICAgICAgIGNvbnN0IGlzQ2xhc3NPckludGVyZmFjZSA9IE5vZGUuaXNDbGFzc0xpa2VEZWNsYXJhdGlvbkJhc2UoZGVjbGFyYXRpb24pIHx8IE5vZGUuaXNJbnRlcmZhY2VEZWNsYXJhdGlvbihkZWNsYXJhdGlvbik7XG4gICAgICAgIHJldHVybiBpc0NsYXNzT3JJbnRlcmZhY2UgJiYgIXNvdXJjZUZpbGUuaXNGcm9tRXh0ZXJuYWxMaWJyYXJ5KCkgJiYgIXNvdXJjZUZpbGUuaXNEZWNsYXJhdGlvbkZpbGUoKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldElzVW5pdHlBUElUeXBlKHR5cGU6IFR5cGUpIHtcbiAgICAvLyBUcnkgdG8gZ2V0IHRoZSBwcmltYXJ5IHN5bWJvbFxuICAgIGxldCBzeW1ib2wgPSB0eXBlLmdldFN5bWJvbCgpO1xuICAgIFxuICAgIC8vIElmIGl0J3MgbWlzc2luZywgdHJ5IHRoZSBhbGlhcyBzeW1ib2wgKGZvciB0eXBlcyBsaWtlIGFsaWFzZXMsIGV0Yy4pXG4gICAgaWYgKCFzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IHN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKTtcbiAgICBpZiAoIWRlY2xhcmF0aW9ucyB8fCBkZWNsYXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBzb3VyY2VGaWxlID0gZGVjbGFyYXRpb25zWzBdLmdldFNvdXJjZUZpbGUoKTtcbiAgICByZXR1cm4gZ2V0SXNVbml0eUFQSVNvdXJjZUZpbGUoc291cmNlRmlsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlQnlOYW1lKHR5cGVOYW1lOiBzdHJpbmcsIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlcik6IFR5cGUgfCB1bmRlZmluZWQge1xuICAgIC8vIFJlc29sdmUgdGhlIHN5bWJvbCBmb3IgdGhlIHR5cGUgbmFtZSBpbiB0aGUgZ2xvYmFsIHNjb3BlXG4gICAgY29uc3Qgc3ltYm9sID0gdHlwZUNoZWNrZXIucmVzb2x2ZU5hbWUodHlwZU5hbWUsIHVuZGVmaW5lZCwgU3ltYm9sRmxhZ3MuQWxsLCBmYWxzZSk7XG5cbiAgICBpZiAoIXN5bWJvbCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgR2xvYmFsIHR5cGUgJyR7dHlwZU5hbWV9JyBub3QgZm91bmQuYCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSB0eXBlIGZyb20gdGhlIHN5bWJvbFxuICAgIGNvbnN0IHR5cGUgPSB0eXBlQ2hlY2tlci5nZXREZWNsYXJlZFR5cGVPZlN5bWJvbChzeW1ib2wpO1xuXG4gICAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhblR5cGVUZXh0KHR5cGVUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIFJlbW92ZSBicmFuZGluZyBhbmQgZXh0cmEgc3BhY2VzXG4gICAgcmV0dXJuIHR5cGVUZXh0LnJlcGxhY2UoLyZcXHMqXFx7W159XSpcXH0vLCAnJykudHJpbSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBc3NpZ25tZW50VG9TeW1ib2wobm9kZTogTm9kZSwgc3ltYm9sOiBTeW1ib2wpOiBib29sZWFuIHtcbiAgICBpZiAoTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihub2RlKSkge1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gbm9kZS5nZXRFeHByZXNzaW9uKCk7XG4gICAgICAgIGlmIChOb2RlLmlzVGhpc0V4cHJlc3Npb24oZXhwcmVzc2lvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZnRTeW1ib2wgPSBub2RlLmdldE5hbWVOb2RlKCkuZ2V0U3ltYm9sKCk7XG4gICAgICAgICAgICByZXR1cm4gbGVmdFN5bWJvbCA9PT0gc3ltYm9sO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChOb2RlLmlzSWRlbnRpZmllcihub2RlKSkge1xuICAgICAgICBjb25zdCBsZWZ0U3ltYm9sID0gbm9kZS5nZXRTeW1ib2woKTtcbiAgICAgICAgcmV0dXJuIGxlZnRTeW1ib2wgPT09IHN5bWJvbDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc291cmNlRmlsZSA9IGRlY2xhcmF0aW9uLmdldFNvdXJjZUZpbGUoKTtcbiAgICByZXR1cm4gZ2V0SXNVbml0eUFQSVNvdXJjZUZpbGUoc291cmNlRmlsZSk7XG59XG5cbmZ1bmN0aW9uIGdldEdlbmllc1NjcmlwdFR5cGVGcm9tTm9kZShkZWNsYXJhdGlvbjogTm9kZSwgaXNVbml0eVR5cGU6IGJvb2xlYW4pOiBHZW5pZXNTY3JpcHRUeXBlIHtcbiAgICBpZiAoZGVjbGFyYXRpb24uZ2V0S2luZCgpICE9PSBTeW50YXhLaW5kLkNsYXNzRGVjbGFyYXRpb24gfHwgaXNVbml0eVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIEdlbmllc1NjcmlwdFR5cGUuTm9uZTtcbiAgICB9XG5cbiAgICBjb25zdCBjbHMgPSBkZWNsYXJhdGlvbiBhcyBDbGFzc0RlY2xhcmF0aW9uO1xuICAgIGNvbnN0IGlzTW9ub2JlaGF2aW91ciA9IGV4dGVuZHNNb25vQmVoYXZpb3VyKGNscyk7XG4gICAgY29uc3QgaXNTY3JpcHRhYmxlT2JqZWN0ID0gZXh0ZW5kc1NjcmlwdGFibGVPYmplY3QoY2xzKTtcblxuICAgIGlmIChpc01vbm9iZWhhdmlvdXIpIHtcbiAgICAgICAgcmV0dXJuIEdlbmllc1NjcmlwdFR5cGUuTW9ub2JlaGF2aW91cjtcbiAgICB9XG5cbiAgICBpZiAoaXNTY3JpcHRhYmxlT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBHZW5pZXNTY3JpcHRUeXBlLlNjcmlwdGFibGVPYmplY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIEdlbmllc1NjcmlwdFR5cGUuTm9uZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEdlbmllc1NjcmlwdFR5cGVGcm9tVHlwZSh0eXBlOiBUeXBlKTogR2VuaWVzU2NyaXB0VHlwZSB7XG4gICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcblxuICAgIGlmICghc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBHZW5pZXNTY3JpcHRUeXBlLk5vbmU7XG4gICAgfVxuXG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gc3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuICAgIGlmIChkZWNsYXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBHZW5pZXNTY3JpcHRUeXBlLk5vbmU7XG4gICAgfVxuXG4gICAgY29uc3QgZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbnNbMF07XG4gICAgY29uc3QgaXNVbml0eVR5cGUgPSBnZXRJc1VuaXR5QVBJRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pXG4gICAgcmV0dXJuIGdldEdlbmllc1NjcmlwdFR5cGVGcm9tTm9kZShkZWNsYXJhdGlvbiwgaXNVbml0eVR5cGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNHZW5pZXNTY3JpcHRUeXBlKHR5cGU6IFR5cGUpOiBib29sZWFuIHtcbiAgICBsZXQgZ1R5cGUgPSBnZXRHZW5pZXNTY3JpcHRUeXBlRnJvbVR5cGUodHlwZSk7XG4gICAgcmV0dXJuIGdUeXBlID09PSBHZW5pZXNTY3JpcHRUeXBlLk1vbm9iZWhhdmlvdXIgfHwgZ1R5cGUgPT09IEdlbmllc1NjcmlwdFR5cGUuU2NyaXB0YWJsZU9iamVjdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhYnNvbHV0ZSBwYXRoIHRvIGFuIGFsaWFzIHBhdGggYmFzZWQgb24gcHJlZGVmaW5lZCBydWxlcy5cbiAqXG4gKiBAcGFyYW0gYWJzb2x1dGVQYXRoIC0gVGhlIGFic29sdXRlIHBhdGggdG8gY29udmVydC5cbiAqIEByZXR1cm5zIFRoZSBhbGlhc2VkIHBhdGggb3IgbnVsbCBpZiBpdCBkb2Vzbid0IG1hdGNoIGFueSBhbGlhcyBydWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0dlbmllc0FsaWFzUGF0aChhYnNvbHV0ZVBhdGg6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aCB0byB1c2UgZm9yd2FyZCBzbGFzaGVzXG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKGFic29sdXRlUGF0aCk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcGF0aCBpbmNsdWRlcyAnL0Fzc2V0cy8nXG4gICAgY29uc3QgYXNzZXRzUHJlZml4ID0gJy9Bc3NldHMvJztcbiAgICBjb25zdCBhc3NldHNJbmRleCA9IG5vcm1hbGl6ZWRQYXRoLmluZGV4T2YoYXNzZXRzUHJlZml4KTtcbiAgICBpZiAoYXNzZXRzSW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IG5vcm1hbGl6ZWRQYXRoLnN1YnN0cmluZyhhc3NldHNJbmRleCArIGFzc2V0c1ByZWZpeC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gYEBhc3NldHMvJHtyZWxhdGl2ZVBhdGh9YDtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcGF0aCBpbmNsdWRlcyAnL2NvbS5nZW5pZXMuPHBhY2thZ2U+LydcbiAgICBjb25zdCBjb21HZW5pZXNSZWdleCA9IC9cXC8oY29tXFwuZ2VuaWVzXFwuW15cXC9dKylcXC8vO1xuICAgIGNvbnN0IGNvbUdlbmllc01hdGNoID0gbm9ybWFsaXplZFBhdGgubWF0Y2goY29tR2VuaWVzUmVnZXgpO1xuICAgIGlmIChjb21HZW5pZXNNYXRjaCkge1xuICAgICAgICBjb25zdCBwYWNrYWdlTmFtZSA9IGNvbUdlbmllc01hdGNoWzFdOyAvLyBlLmcuLCBjb20uZ2VuaWVzLmV4cGVyaWVuY2Uuc2RrXG4gICAgICAgIGNvbnN0IHBhdGhBZnRlclBhY2thZ2UgPSBub3JtYWxpemVkUGF0aC5zdWJzdHJpbmcoY29tR2VuaWVzTWF0Y2guaW5kZXghICsgY29tR2VuaWVzTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGBAJHtwYWNrYWdlTmFtZX0vJHtwYXRoQWZ0ZXJQYWNrYWdlfWA7XG4gICAgfVxuXG4gICAgLy8gSWYgbm8gYWxpYXMgcnVsZSBtYXRjaGVzLCByZXR1cm4gbnVsbFxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSBmaWxlIHBhdGggdG8gdXNlIGZvcndhcmQgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gcCAtIFRoZSBwYXRoIHRvIG5vcm1hbGl6ZS5cbiAqIEByZXR1cm5zIFRoZSBub3JtYWxpemVkIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcC5zcGxpdChwYXRoLnNlcCkuam9pbignLycpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgcmVsYXRpdmUgaW1wb3J0IHBhdGggdG8gYW4gYWxpYXMgcGF0aCBpZiBhcHBsaWNhYmxlLlxuICpcbiAqIEBwYXJhbSByb290XG4gKiBAcGFyYW0gcmVsYXRpdmVQYXRoIC0gVGhlIHJlbGF0aXZlIGltcG9ydCBwYXRoLlxuICogQHJldHVybnMgVGhlIGFsaWFzZWQgcGF0aCBvciB0aGUgb3JpZ2luYWwgcmVsYXRpdmUgcGF0aCBpZiBubyBhbGlhcyBhcHBsaWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvQWxpYXNQYXRoKHJvb3Q6IHN0cmluZywgcmVsYXRpdmVQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gICAgY29uc3QgYWJzb2x1dGVQYXRoID0gcGF0aC5yZXNvbHZlKHJvb3QsIHJlbGF0aXZlUGF0aCk7XG4gICAgY29uc3QgYWxpYXNQYXRoID0gY29udmVydFRvR2VuaWVzQWxpYXNQYXRoKGFic29sdXRlUGF0aCk7XG5cbiAgICBpZiAoYWxpYXNQYXRoKSB7XG4gICAgICAgIHJldHVybiBhbGlhc1BhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgbm8gYWxpYXMgYXBwbGllcywgcmV0dXJuIHRoZSBub3JtYWxpemVkIHJlbGF0aXZlIHBhdGhcbiAgICByZXR1cm4gcmVsYXRpdmVQYXRoO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgaW1wb3J0IGRlY2xhcmF0aW9ucyBpbiBhIHNvdXJjZSBmaWxlIHRvIHVzZSBhbGlhcyBwYXRocyBmb3IgQXNzZXRzLyBhbmQgY29tLmdlbmllcy4qIHBhY2thZ2VzLlxuICpcbiAqIEBwYXJhbSBzb3VyY2VGaWxlIC0gVGhlIFR5cGVTY3JpcHQgc291cmNlIGZpbGUgdG8gcHJvY2Vzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUltcG9ydHNUb0FsaWFzUGF0aHMoc291cmNlRmlsZTogU291cmNlRmlsZSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gc291cmNlRmlsZS5nZXREaXJlY3RvcnlQYXRoKCkgYXMgc3RyaW5nO1xuXG4gICAgc291cmNlRmlsZS5nZXRJbXBvcnREZWNsYXJhdGlvbnMoKS5mb3JFYWNoKGltcG9ydERlY2xhcmF0aW9uID0+IHtcbiAgICAgICAgY29uc3QgbW9kdWxlU3BlY2lmaWVyID0gaW1wb3J0RGVjbGFyYXRpb24uZ2V0TW9kdWxlU3BlY2lmaWVyVmFsdWUoKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgaW1wb3J0IHBhdGggaXMgcmVsYXRpdmVcbiAgICAgICAgaWYgKG1vZHVsZVNwZWNpZmllci5zdGFydHNXaXRoKCcuLycpIHx8IG1vZHVsZVNwZWNpZmllci5zdGFydHNXaXRoKCcuLi8nKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcmVsYXRpdmUgcGF0aCB0byBhbiBhbGlhcyBwYXRoXG4gICAgICAgICAgICBjb25zdCBhbGlhc1BhdGggPSBjb252ZXJ0VG9BbGlhc1BhdGgoZmlsZVBhdGgsIG1vZHVsZVNwZWNpZmllcik7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbW9kdWxlIHNwZWNpZmllciBpZiBpdCdzIGJlZW4gY29udmVydGVkIHRvIGFuIGFsaWFzXG4gICAgICAgICAgICBpZiAoYWxpYXNQYXRoLnN0YXJ0c1dpdGgoJ0Bhc3NldHMvJykgfHwgYWxpYXNQYXRoLnN0YXJ0c1dpdGgoJ0Bjb20uZ2VuaWVzJykpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnREZWNsYXJhdGlvbi5zZXRNb2R1bGVTcGVjaWZpZXIoYWxpYXNQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RGVjb3JhdG9ycyhwcm9wOiBQcm9wZXJ0eURlY2xhcmF0aW9uKTogR2VuaWVzRGVjb3JhdG9ySW5mb1tdIHtcbiAgICByZXR1cm4gcHJvcC5nZXREZWNvcmF0b3JzKCkubWFwKGQgPT4ge1xuICAgICAgICBjb25zdCBkZWNvcmF0b3JJbmZvOiBHZW5pZXNEZWNvcmF0b3JJbmZvID0ge1xuICAgICAgICAgICAgVHlwZTogZC5nZXROYW1lKCksXG4gICAgICAgICAgICBBcmdzOiBkLmdldEFyZ3VtZW50cygpLm1hcChhID0+IGEuZ2V0VGV4dCgpKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZGVjb3JhdG9ySW5mbztcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7XG4gICAgQ2FsbEV4cHJlc3Npb24sIE1ldGhvZERlY2xhcmF0aW9uLFxuICAgIE5vZGUsXG4gICAgUHJvcGVydHlEZWNsYXJhdGlvbixcbiAgICBTeW1ib2wsXG4gICAgU3ludGF4S2luZCwgdHMsXG4gICAgVHlwZSxcbiAgICBUeXBlQ2hlY2tlciwgVHlwZU5vZGUsIFR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbixcbiAgICBWYXJpYWJsZURlY2xhcmF0aW9uXG59IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHtjbGVhblR5cGVUZXh0LCBnZXRUeXBlQnlOYW1lLCBpc0Fzc2lnbm1lbnRUb1N5bWJvbCwgTnVtZXJpY2FsQWxpYXNlcywgdHlwZXNBcmVFcXVhbH0gZnJvbSBcIi4vQ29tcGlsZXJVdGlsc1wiO1xuaW1wb3J0IENhbGxMaWtlRXhwcmVzc2lvbiA9IHRzLkNhbGxMaWtlRXhwcmVzc2lvbjtcblxuaW50ZXJmYWNlIE51bWVyaWNMaXRlcmFsSW5mbyB7XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBoYXNEZWNpbWFsOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mZXJQb3NzaWJsZVR5cGVzKGFyZzogTm9kZSwgdHlwZUNoZWNrZXI6IFR5cGVDaGVja2VyKTogVHlwZVtdIHtcbiAgICBjb25zdCB0eXBlczogVHlwZVtdID0gW107XG4gICAgY29uc3QgYXJnVHlwZSA9IHR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGFyZyk7XG5cbiAgICBsZXQgaW5mZXJyZWRUeXBlTmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdCBicmFuZGVkVHlwZSA9IGdldEJyYW5kZWRUeXBlcyhhcmdUeXBlLCB0eXBlQ2hlY2tlcik7XG4gICAgaWYgKGJyYW5kZWRUeXBlICE9IG51bGwpIHtcbiAgICAgICAgdHlwZXMucHVzaChicmFuZGVkVHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBnZXQgdGhlIG51bWVyaWMgbGl0ZXJhbCBpbmZvXG4gICAgICAgIGNvbnN0IG51bWVyaWNJbmZvID0gZ2V0TnVtZXJpY1ZhbHVlKGFyZyk7XG4gICAgICAgIGlmIChudW1lcmljSW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmZlcnJlZFR5cGVOYW1lcyA9IGluZmVyVHlwZXNGcm9tTnVtZXJpY0luZm8obnVtZXJpY0luZm8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBhcmd1bWVudCdzIHR5cGVcbiAgICAgICAgICAgIGlmIChpc051bWJlclR5cGUoYXJnVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJbmNsdWRlIGFsbCBudW1iZXIgdHlwZXNcbiAgICAgICAgICAgICAgICBpbmZlcnJlZFR5cGVOYW1lcyA9IFsnYnl0ZScsICdzYnl0ZScsICdzaG9ydCcsICd1c2hvcnQnLCAnaW50JywgJ3VpbnQnLCAnZmxvYXQnLCAnZG91YmxlJ107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goYXJnVHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBDb252ZXJ0IHR5cGUgbmFtZXMgdG8gVHlwZSBvYmplY3RzXG4gICAgZm9yIChjb25zdCB0eXBlTmFtZSBvZiBpbmZlcnJlZFR5cGVOYW1lcykge1xuICAgICAgICBjb25zdCB0eXBlID0gZ2V0VHlwZUJ5TmFtZSh0eXBlTmFtZSwgdHlwZUNoZWNrZXIpO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgdHlwZXMucHVzaCh0eXBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0eXBlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RCZXN0T3ZlcmxvYWQoXG4gICAgb3ZlcmxvYWRzOiBNZXRob2REZWNsYXJhdGlvbltdLFxuICAgIGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbixcbiAgICB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXJcbik6IE1ldGhvZERlY2xhcmF0aW9uIHwgdW5kZWZpbmVkIHtcblxuICAgIGlmKCFvdmVybG9hZHMgfHwgb3ZlcmxvYWRzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gSWYgb25seSAxIG92ZXJsb2FkLCByZXR1cm4gaXQuXG4gICAgaWYob3ZlcmxvYWRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJldHVybiBvdmVybG9hZHNbMF07XG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCB0eXBlIGFyZ3VtZW50cyBpZiBwcmVzZW50XG4gICAgY29uc3QgdHlwZUFyZ3VtZW50cyA9IGNhbGxFeHByZXNzaW9uLmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICBjb25zdCBoYXNFeHBsaWNpdFR5cGVBcmdzID0gdHlwZUFyZ3VtZW50cyAmJiB0eXBlQXJndW1lbnRzLmxlbmd0aCA+IDA7XG5cbiAgICAvLyBGaXJzdCwgZmlsdGVyIG92ZXJsb2FkcyBiYXNlZCBvbiB0eXBlIGFyZ3VtZW50cyBjb21wYXRpYmlsaXR5IGlmIGV4cGxpY2l0IHR5cGUgYXJncyBwcm92aWRlZFxuICAgIGNvbnN0IGNvbXBhdGlibGVPdmVybG9hZHMgPSBoYXNFeHBsaWNpdFR5cGVBcmdzXG4gICAgICAgID8gZmlsdGVyT3ZlcmxvYWRzQnlUeXBlQXJndW1lbnRzKG92ZXJsb2FkcywgdHlwZUFyZ3VtZW50cywgdHlwZUNoZWNrZXIpXG4gICAgICAgIDogb3ZlcmxvYWRzO1xuXG4gICAgaWYgKGNvbXBhdGlibGVPdmVybG9hZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBhdGlibGVPdmVybG9hZHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjb21wYXRpYmxlT3ZlcmxvYWRzWzBdO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbGxBcmdzID0gY2FsbEV4cHJlc3Npb24uZ2V0QXJndW1lbnRzKCk7XG5cbiAgICBpZighY2FsbEFyZ3MgfHwgY2FsbEFyZ3MubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgY29uc3Qgbm9BcmdPdmVybG9hZCA9IGNvbXBhdGlibGVPdmVybG9hZHMuZmluZChvdmVybG9hZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBvdmVybG9hZC5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA9PT0gMCB8fCBwYXJhbXMuZXZlcnkocCA9PiBwLmlzT3B0aW9uYWwoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9BcmdPdmVybG9hZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vQXJnT3ZlcmxvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIEluZmVyIHBvc3NpYmxlIHR5cGVzIGZvciBlYWNoIGFyZ3VtZW50XG4gICAgY29uc3QgYXJndW1lbnRUeXBlc0xpc3QgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKS5tYXAoYXJnID0+XG4gICAgICAgIGluZmVyUG9zc2libGVUeXBlcyhhcmcsIHR5cGVDaGVja2VyKVxuICAgICk7XG5cbiAgICBsZXQgYmVzdE92ZXJsb2FkOiBNZXRob2REZWNsYXJhdGlvbiB8IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlnaGVzdFNjb3JlID0gLTE7XG5cbiAgICBmb3IgKGNvbnN0IG92ZXJsb2FkIG9mIGNvbXBhdGlibGVPdmVybG9hZHMpIHtcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBzY29yZU92ZXJsb2FkKG92ZXJsb2FkLCBhcmd1bWVudFR5cGVzTGlzdCwgdHlwZUNoZWNrZXIpO1xuICAgICAgICBpZiAoc2NvcmUgPiBoaWdoZXN0U2NvcmUpIHtcbiAgICAgICAgICAgIGhpZ2hlc3RTY29yZSA9IHNjb3JlO1xuICAgICAgICAgICAgYmVzdE92ZXJsb2FkID0gb3ZlcmxvYWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdE92ZXJsb2FkO1xufVxuXG4vLyBGdW5jdGlvbiB0byBmaWx0ZXIgb3ZlcmxvYWRzIGJhc2VkIG9uIHR5cGUgYXJndW1lbnRzXG5mdW5jdGlvbiBmaWx0ZXJPdmVybG9hZHNCeVR5cGVBcmd1bWVudHMoXG4gICAgb3ZlcmxvYWRzOiBNZXRob2REZWNsYXJhdGlvbltdLFxuICAgIHR5cGVBcmdzOiBUeXBlTm9kZVtdLFxuICAgIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlclxuKTogTWV0aG9kRGVjbGFyYXRpb25bXSB7XG4gICAgcmV0dXJuIG92ZXJsb2Fkcy5maWx0ZXIob3ZlcmxvYWQgPT4ge1xuICAgICAgICBjb25zdCB0eXBlUGFyYW1zID0gb3ZlcmxvYWQuZ2V0VHlwZVBhcmFtZXRlcnMoKTtcblxuICAgICAgICAvLyBJZiBtZXRob2QgaGFzIG5vIHR5cGUgcGFyYW1ldGVycyBidXQgdHlwZSBhcmdzIHdlcmUgcHJvdmlkZWQsIGl0J3Mgbm90IGNvbXBhdGlibGVcbiAgICAgICAgaWYgKCF0eXBlUGFyYW1zIHx8IHR5cGVQYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBudW1iZXIgb2YgdHlwZSBhcmdzIGRvZXNuJ3QgbWF0Y2ggdHlwZSBwYXJhbWV0ZXJzLCBpdCdzIG5vdCBjb21wYXRpYmxlXG4gICAgICAgIGlmICh0eXBlQXJncy5sZW5ndGggIT09IHR5cGVQYXJhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBlYWNoIHR5cGUgYXJndW1lbnQgYWdhaW5zdCB0eXBlIHBhcmFtZXRlciBjb25zdHJhaW50c1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVBcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlQXJnID0gdHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24odHlwZUFyZ3NbaV0pO1xuICAgICAgICAgICAgY29uc3QgY29uc3RyYWludCA9IHR5cGVQYXJhbXNbaV0uZ2V0Q29uc3RyYWludCgpO1xuXG4gICAgICAgICAgICBpZiAoY29uc3RyYWludCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnN0cmFpbnRUeXBlID0gdHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24oY29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8odHlwZUFyZywgY29uc3RyYWludFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cblxuLy8gS2VlcCB0aGUgb3JpZ2luYWwgc2NvcmluZyBmdW5jdGlvbnMgdW5jaGFuZ2VkXG5mdW5jdGlvbiBzY29yZU92ZXJsb2FkKFxuICAgIG92ZXJsb2FkOiBNZXRob2REZWNsYXJhdGlvbixcbiAgICBhcmd1bWVudFR5cGVzTGlzdDogVHlwZVtdW10sXG4gICAgdHlwZUNoZWNrZXI6IFR5cGVDaGVja2VyKTogbnVtYmVyIHtcbiAgICBjb25zdCBwYXJhbWV0ZXJzID0gb3ZlcmxvYWQuZ2V0UGFyYW1ldGVycygpO1xuXG4gICAgLy9Bc3N1bWUgdGhhdCBpdHMgbm90IHRoZSBjb3JyZWN0IG92ZXJsb2FkLCB0aGlzIGFsc28gYWNjb3VudHMgZm9yIHRoZSBjaGFuY2UgdGhhdCBwYXJhbXMgYXJlIG9wdGlvbmFsLlxuICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA8IGFyZ3VtZW50VHlwZXNMaXN0Lmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgLy9JZiBleGFjdCBtYXRjaCBvZiBwYXJhbXMgdG8gYXJncyB3ZSBzdGFydCB0aGUgc2NvcmUgYXQgMVxuICAgIGxldCBzY29yZSA9IHBhcmFtZXRlcnMubGVuZ3RoID09IGFyZ3VtZW50VHlwZXNMaXN0Lmxlbmd0aCA/IDEgOiAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJhbVR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihwYXJhbWV0ZXJzW2ldKTtcbiAgICAgICAgY29uc3QgYXJnVHlwZXMgPSBhcmd1bWVudFR5cGVzTGlzdFtpXTtcblxuICAgICAgICBpZighYXJnVHlwZXMgfHwgYXJnVHlwZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFyZ1Njb3JlID0gc2NvcmVQYXJhbWV0ZXIocGFyYW1UeXBlLCBhcmdUeXBlcywgdHlwZUNoZWNrZXIpO1xuICAgICAgICBpZiAoYXJnU2NvcmUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgc2NvcmUgKz0gYXJnU2NvcmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3JlO1xufVxuXG5mdW5jdGlvbiBzY29yZVBhcmFtZXRlcihcbiAgICBwYXJhbVR5cGU6IFR5cGUsXG4gICAgcG9zc2libGVBcmdUeXBlczogVHlwZVtdLFxuICAgIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlclxuKTogbnVtYmVyIHtcbiAgICBsZXQgYmVzdFNjb3JlID0gLTE7XG5cbiAgICAvLyAxKSBJZiBpdCdzIGEgdHlwZSBwYXJhbWV0ZXIsIHNlZSBpZiB3ZSBjYW4gdW5pZnkgd2l0aCB0aGUgY29uc3RyYWludFxuICAgIGlmIChwYXJhbVR5cGUuaXNUeXBlUGFyYW1ldGVyKCkpIHtcbiAgICAgICAgY29uc3QgY29uc3RyYWludCA9IHBhcmFtVHlwZS5nZXRDb25zdHJhaW50KCk7XG4gICAgICAgIGlmICghY29uc3RyYWludCkge1xuICAgICAgICAgICAgaWYgKHBvc3NpYmxlQXJnVHlwZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGFyZ1R5cGUgb2YgcG9zc2libGVBcmdUeXBlcykge1xuICAgICAgICAgICAgaWYgKHR5cGVzQXJlRXF1YWwoYXJnVHlwZSwgY29uc3RyYWludCkpIHtcbiAgICAgICAgICAgICAgICBiZXN0U2NvcmUgPSBNYXRoLm1heChiZXN0U2NvcmUsIDIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8oYXJnVHlwZSwgY29uc3RyYWludCkpIHtcbiAgICAgICAgICAgICAgICBiZXN0U2NvcmUgPSBNYXRoLm1heChiZXN0U2NvcmUsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiZXN0U2NvcmU7XG4gICAgfVxuXG4gICAgLy8gMikgSWYgcGFyYW1UeXBlIGlzIGEgcmVjb2duaXplZCBudW1lcmljIHR5cGVcbiAgICBpZiAoaXNWYWxpZE51bWVyaWNhbFR5cGUocGFyYW1UeXBlKSkge1xuICAgICAgICAvLyBudW1lcmljIHBhcmFtID0+IGV4YWN0IG1hdGNoID0+IHNjb3JlIDIsIG90aGVyd2lzZSBjYXN0YWJsZSA9PiAxXG4gICAgICAgIGZvciAoY29uc3QgYXJnVHlwZSBvZiBwb3NzaWJsZUFyZ1R5cGVzKSB7XG4gICAgICAgICAgICBpZiAodHlwZXNBcmVFcXVhbChhcmdUeXBlLCBwYXJhbVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgYmVzdFNjb3JlID0gTWF0aC5tYXgoYmVzdFNjb3JlLCAyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljQ2FzdGFibGUoYXJnVHlwZSwgcGFyYW1UeXBlKSkge1xuICAgICAgICAgICAgICAgIGJlc3RTY29yZSA9IE1hdGgubWF4KGJlc3RTY29yZSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJlc3RTY29yZTtcbiAgICB9XG5cbiAgICAvLyAzKSBOb24tbnVtZXJpYywgbm9uLXR5cGUtcGFyYW1ldGVyIGV4YWN0IG1hdGNoIG9yIGlzVHlwZUFzc2lnbmFibGVUby5cbiAgICBmb3IgKGNvbnN0IGFyZ1R5cGUgb2YgcG9zc2libGVBcmdUeXBlcykge1xuICAgICAgICBpZiAodHlwZXNBcmVFcXVhbChhcmdUeXBlLCBwYXJhbVR5cGUpKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSBNYXRoLm1heChiZXN0U2NvcmUsIDIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVDaGVja2VyLmlzVHlwZUFzc2lnbmFibGVUbyhhcmdUeXBlLCBwYXJhbVR5cGUpKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSBNYXRoLm1heChiZXN0U2NvcmUsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlc3RTY29yZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE51bWVyaWNhbFR5cGUodHlwZTogVHlwZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHR5cGVUZXh0ID0gY2xlYW5UeXBlVGV4dCh0eXBlLmdldFRleHQoKSk7XG5cbiAgICByZXR1cm4gTnVtZXJpY2FsQWxpYXNlcy5oYXModHlwZVRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1lcmljQ2FzdGFibGUoZnJvbVR5cGU6IFR5cGUsIHRvVHlwZTogVHlwZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNhc3RhYmlsaXR5TWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH0gPSB7XG4gICAgICAgIGJ5dGU6IFsnc2hvcnQnLCAndXNob3J0JywgJ2ludCcsICd1aW50JywgJ2Zsb2F0JywgJ2RvdWJsZScsICdudW1iZXInXSxcbiAgICAgICAgc2J5dGU6IFsnc2hvcnQnLCAnaW50JywgJ2Zsb2F0JywgJ2RvdWJsZScsICdudW1iZXInXSxcbiAgICAgICAgc2hvcnQ6IFsnaW50JywgJ2Zsb2F0JywgJ2RvdWJsZScsICdudW1iZXInXSxcbiAgICAgICAgdXNob3J0OiBbJ2ludCcsICd1aW50JywgJ2Zsb2F0JywgJ2RvdWJsZScsICdudW1iZXInXSxcbiAgICAgICAgaW50OiBbJ2Zsb2F0JywgJ2RvdWJsZScsICdudW1iZXInXSxcbiAgICAgICAgdWludDogWydmbG9hdCcsICdkb3VibGUnLCAnbnVtYmVyJ10sXG4gICAgICAgIGZsb2F0OiBbJ2RvdWJsZScsICdudW1iZXInXSxcbiAgICAgICAgZG91YmxlOiBbJ251bWJlciddLFxuICAgICAgICBudW1iZXI6IFsnYnl0ZScsICdzYnl0ZScsICdzaG9ydCcsICd1c2hvcnQnLCAnaW50JywgJ3VpbnQnLCAnZmxvYXQnLCAnZG91YmxlJ10sXG4gICAgfTtcblxuICAgIGNvbnN0IGZyb21UeXBlTmFtZSA9IGNsZWFuVHlwZVRleHQoZnJvbVR5cGUuZ2V0VGV4dCgpKTtcbiAgICBjb25zdCB0b1R5cGVOYW1lID0gY2xlYW5UeXBlVGV4dCh0b1R5cGUuZ2V0VGV4dCgpKTtcblxuICAgIHJldHVybiBjYXN0YWJpbGl0eU1hcFtmcm9tVHlwZU5hbWVdPy5pbmNsdWRlcyh0b1R5cGVOYW1lKSA/PyBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE51bWVyaWNWYWx1ZShhcmc6IE5vZGUpOiBOdW1lcmljTGl0ZXJhbEluZm8gfCB1bmRlZmluZWQge1xuICAgIC8vIEhhbmRsZSBudW1lcmljIGxpdGVyYWxzIGFuZCBuZWdhdGl2ZSBudW1iZXJzXG4gICAgY29uc3QgbnVtZXJpY0xpdGVyYWxJbmZvID0gZ2V0TnVtZXJpY0xpdGVyYWxJbmZvKGFyZyk7XG4gICAgaWYgKG51bWVyaWNMaXRlcmFsSW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudW1lcmljTGl0ZXJhbEluZm87XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHZhcmlhYmxlcyBhbmQgcHJvcGVydGllcyBieSBwZXJmb3JtaW5nIGZsb3cgYW5hbHlzaXNcbiAgICBpZiAoTm9kZS5pc0lkZW50aWZpZXIoYXJnKSB8fCBOb2RlLmlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKGFyZykpIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sID0gYXJnLmdldFN5bWJvbCgpO1xuICAgICAgICBpZiAoc3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25zICYmIGRlY2xhcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjbCA9IGRlY2xhcmF0aW9uc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoTm9kZS5pc1ZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbCkgfHwgTm9kZS5pc1Byb3BlcnR5RGVjbGFyYXRpb24oZGVjbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBmbG93IGFuYWx5c2lzIHRvIGdldCB0aGUgdmFyaWFibGUncyB2YWx1ZSBhdCB0aGUgcG9pbnQgb2YgdXNhZ2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVJbmZvID0gcGVyZm9ybUZsb3dBbmFseXNpcyhzeW1ib2wsIGRlY2wsIGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUluZm87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc051bWJlclR5cGUodHlwZTogVHlwZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHR5cGVUZXh0ID0gY2xlYW5UeXBlVGV4dCh0eXBlLmdldFRleHQoKSk7XG4gICAgcmV0dXJuIHR5cGVUZXh0ID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gZ2V0TnVtZXJpY0xpdGVyYWxJbmZvKGFyZzogTm9kZSk6IE51bWVyaWNMaXRlcmFsSW5mbyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKE5vZGUuaXNOdW1lcmljTGl0ZXJhbChhcmcpKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBhcmcuZ2V0VGV4dCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IE51bWJlcih0ZXh0KTtcbiAgICAgICAgY29uc3QgaGFzRGVjaW1hbCA9IHRleHQuaW5jbHVkZXMoJy4nKTtcbiAgICAgICAgcmV0dXJuIHt2YWx1ZSwgaGFzRGVjaW1hbH07XG4gICAgfSBlbHNlIGlmIChOb2RlLmlzUHJlZml4VW5hcnlFeHByZXNzaW9uKGFyZykgJiYgYXJnLmdldE9wZXJhdG9yVG9rZW4oKSA9PT0gU3ludGF4S2luZC5NaW51c1Rva2VuKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhbmQgPSBhcmcuZ2V0T3BlcmFuZCgpO1xuICAgICAgICBpZiAoTm9kZS5pc051bWVyaWNMaXRlcmFsKG9wZXJhbmQpKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gb3BlcmFuZC5nZXRUZXh0KCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC1OdW1iZXIodGV4dCk7XG4gICAgICAgICAgICBjb25zdCBoYXNEZWNpbWFsID0gdGV4dC5pbmNsdWRlcygnLicpO1xuICAgICAgICAgICAgcmV0dXJuIHt2YWx1ZSwgaGFzRGVjaW1hbH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaW5mZXJUeXBlc0Zyb21OdW1lcmljSW5mbyhpbmZvOiBOdW1lcmljTGl0ZXJhbEluZm8pOiBzdHJpbmdbXSB7XG4gICAgY29uc3Qge3ZhbHVlLCBoYXNEZWNpbWFsfSA9IGluZm87XG4gICAgY29uc3QgdHlwZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAgIGlmICghaGFzRGVjaW1hbCkge1xuICAgICAgICAvLyBPcmlnaW5hbCBsaXRlcmFsIGRpZCBub3QgaGF2ZSBhIGRlY2ltYWwgcG9pbnQ7IHRyZWF0IGFzIGludGVnZXJcbiAgICAgICAgaWYgKHZhbHVlID49IC0yMTQ3NDgzNjQ4ICYmIHZhbHVlIDw9IDIxNDc0ODM2NDcpIHtcbiAgICAgICAgICAgIHR5cGVzLmFkZCgnaW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID49IC0zMjc2OCAmJiB2YWx1ZSA8PSAzMjc2Nykge1xuICAgICAgICAgICAgdHlwZXMuYWRkKCdzaG9ydCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMTI4ICYmIHZhbHVlIDw9IDEyNykge1xuICAgICAgICAgICAgdHlwZXMuYWRkKCdzYnl0ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDI1NSkge1xuICAgICAgICAgICAgdHlwZXMuYWRkKCdieXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNjU1MzUpIHtcbiAgICAgICAgICAgIHR5cGVzLmFkZCgndXNob3J0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNDI5NDk2NzI5NSkge1xuICAgICAgICAgICAgdHlwZXMuYWRkKCd1aW50Jyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPcmlnaW5hbCBsaXRlcmFsIGhhZCBhIGRlY2ltYWwgcG9pbnQ7IHRyZWF0IGFzIGZsb2F0XG4gICAgICAgIHR5cGVzLmFkZCgnZmxvYXQnKTtcbiAgICAgICAgdHlwZXMuYWRkKCdkb3VibGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0eXBlcyk7XG59XG5cbmZ1bmN0aW9uIGdldEJyYW5kZWRUeXBlcyh0eXBlOiBUeXBlLCB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXIpOiBUeXBlIHwgbnVsbCB7XG5cbiAgICBjb25zdCB0eXBlVGV4dCA9IHR5cGUuZ2V0VGV4dCgpO1xuXG4gICAgaWYgKE51bWVyaWNhbEFsaWFzZXMuaGFzKHR5cGVUZXh0KSkge1xuICAgICAgICBjb25zdCBicmFuZGVkVHlwZSA9IGdldFR5cGVCeU5hbWUodHlwZVRleHQsIHR5cGVDaGVja2VyKTtcbiAgICAgICAgaWYgKGJyYW5kZWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJhbmRlZFR5cGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgYnJhbmRlZCB0eXBlcyBieSBsb29raW5nIGZvciAnJiB7IF9fYnJhbmQ/OiB1bmRlZmluZWQgfSdcbiAgICBjb25zdCBtYXRjaCA9IHR5cGVUZXh0Lm1hdGNoKC9udW1iZXJcXHMqJlxccypcXHtcXHMqX18oW2EtekEtWl0rKUJyYW5kXFw/Olxccyp1bmRlZmluZWRcXHMqXFx9Lyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IGJyYW5kID0gbWF0Y2hbMV07XG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gYnJhbmQ7XG5cbiAgICAgICAgY29uc3QgYnJhbmRlZFR5cGUgPSBnZXRUeXBlQnlOYW1lKHR5cGVOYW1lLCB0eXBlQ2hlY2tlcik7XG4gICAgICAgIGlmIChicmFuZGVkVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJyYW5kZWRUeXBlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cblxuZnVuY3Rpb24gcGVyZm9ybUZsb3dBbmFseXNpcyhcbiAgICBzeW1ib2w6IFN5bWJvbCxcbiAgICBkZWNsYXJhdGlvbjogVmFyaWFibGVEZWNsYXJhdGlvbiB8IFByb3BlcnR5RGVjbGFyYXRpb24sXG4gICAgdXNhZ2VOb2RlOiBOb2RlXG4pOiBOdW1lcmljTGl0ZXJhbEluZm8gfCB1bmRlZmluZWQge1xuICAgIGxldCBjdXJyZW50VmFsdWVJbmZvOiBOdW1lcmljTGl0ZXJhbEluZm8gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBGaXJzdCwgY2hlY2sgaWYgdGhlIHZhcmlhYmxlL3Byb3BlcnR5IGhhcyBhbiBpbml0aWFsaXplclxuICAgIGNvbnN0IGluaXRpYWxpemVyID0gZGVjbGFyYXRpb24uZ2V0SW5pdGlhbGl6ZXIoKTtcbiAgICBpZiAoaW5pdGlhbGl6ZXIpIHtcbiAgICAgICAgY29uc3QgaW5pdFZhbHVlSW5mbyA9IGdldE51bWVyaWNWYWx1ZUZyb21FeHByZXNzaW9uKGluaXRpYWxpemVyLCBzeW1ib2wsIGRlY2xhcmF0aW9uLCB1c2FnZU5vZGUpO1xuICAgICAgICBpZiAoaW5pdFZhbHVlSW5mbykge1xuICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mbyA9IGluaXRWYWx1ZUluZm87XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBtZXRob2Qgd2hlcmUgdGhlIHVzYWdlIG9jY3Vyc1xuICAgIGNvbnN0IG1ldGhvZERlY2xhcmF0aW9uID0gdXNhZ2VOb2RlLmdldEZpcnN0QW5jZXN0b3JCeUtpbmQoU3ludGF4S2luZC5NZXRob2REZWNsYXJhdGlvbik7XG4gICAgaWYgKCFtZXRob2REZWNsYXJhdGlvbikge1xuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlSW5mbzsgLy8gQ2Fubm90IHByb2NlZWQgd2l0aG91dCBtZXRob2QgY29udGV4dFxuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBtZXRob2REZWNsYXJhdGlvbi5nZXRTdGF0ZW1lbnRzKCkgfHwgW107XG5cbiAgICBsZXQgdHJhY2tpbmcgPSB0cnVlOyAvLyBTaW5jZSB3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIG1ldGhvZCBzY29wZSwgd2UgY2FuIHN0YXJ0IHRyYWNraW5nIGltbWVkaWF0ZWx5XG5cbiAgICBjb25zdCB1c2FnZVN0YXJ0ID0gdXNhZ2VOb2RlLmdldFN0YXJ0KCk7XG5cbiAgICBmb3IgKGNvbnN0IHN0bXQgb2Ygc3RhdGVtZW50cykge1xuICAgICAgICBpZiAoc3RtdC5nZXRTdGFydCgpID4gdXNhZ2VTdGFydCkge1xuICAgICAgICAgICAgLy8gUmVhY2hlZCB0aGUgdXNhZ2UgcG9pbnRcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYWNraW5nKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgYXNzaWdubWVudHMgdG8gdGhlIHZhcmlhYmxlL3Byb3BlcnR5XG4gICAgICAgICAgICBjb25zdCBhc3NpZ25tZW50cyA9IHN0bXQuZ2V0RGVzY2VuZGFudHMoKS5maWx0ZXIobm9kZSA9PlxuICAgICAgICAgICAgICAgIE5vZGUuaXNCaW5hcnlFeHByZXNzaW9uKG5vZGUpIHx8XG4gICAgICAgICAgICAgICAgTm9kZS5pc1ByZWZpeFVuYXJ5RXhwcmVzc2lvbihub2RlKSB8fFxuICAgICAgICAgICAgICAgIE5vZGUuaXNQb3N0Zml4VW5hcnlFeHByZXNzaW9uKG5vZGUpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFzc2lnbm1lbnQgb2YgYXNzaWdubWVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoTm9kZS5pc0JpbmFyeUV4cHJlc3Npb24oYXNzaWdubWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3BlcmF0b3JLaW5kID0gYXNzaWdubWVudC5nZXRPcGVyYXRvclRva2VuKCkuZ2V0S2luZCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gYXNzaWdubWVudC5nZXRMZWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gYXNzaWdubWVudC5nZXRSaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Fzc2lnbm1lbnRUb1N5bWJvbChsZWZ0LCBzeW1ib2wpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0b3JLaW5kID09PSBTeW50YXhLaW5kLkVxdWFsc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltcGxlIGFzc2lnbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUluZm8gPSBnZXROdW1lcmljVmFsdWVGcm9tRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzYWdlTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWVJbmZvID0gdmFsdWVJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZUluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN5bnRheEtpbmQuUGx1c0VxdWFsc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeW50YXhLaW5kLk1pbnVzRXF1YWxzVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN5bnRheEtpbmQuQXN0ZXJpc2tFcXVhbHNUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3ludGF4S2luZC5TbGFzaEVxdWFsc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeW50YXhLaW5kLlBlcmNlbnRFcXVhbHNUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmluY2x1ZGVzKG9wZXJhdG9yS2luZClcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXBvdW5kIGFzc2lnbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUluZm8gPSBnZXROdW1lcmljVmFsdWVGcm9tRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzYWdlTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlSW5mbyAmJiBjdXJyZW50VmFsdWVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFZhbHVlSW5mbyA9IGV2YWx1YXRlQ29tcG91bmRBc3NpZ25tZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3JLaW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0VmFsdWVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWVJbmZvID0gcmVzdWx0VmFsdWVJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZUluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChOb2RlLmlzUHJlZml4VW5hcnlFeHByZXNzaW9uKGFzc2lnbm1lbnQpIHx8IE5vZGUuaXNQb3N0Zml4VW5hcnlFeHByZXNzaW9uKGFzc2lnbm1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdG9yS2luZCA9IGFzc2lnbm1lbnQuZ2V0T3BlcmF0b3JUb2tlbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVyYW5kID0gYXNzaWdubWVudC5nZXRPcGVyYW5kKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXNzaWdubWVudFRvU3ltYm9sKG9wZXJhbmQsIHN5bWJvbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluY3JlbWVudCBvciBkZWNyZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhID0gb3BlcmF0b3JLaW5kID09PSBTeW50YXhLaW5kLlBsdXNQbHVzVG9rZW4gPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnRWYWx1ZUluZm8udmFsdWUgKyBkZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRGVjaW1hbDogY3VycmVudFZhbHVlSW5mby5oYXNEZWNpbWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZUluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFZhbHVlSW5mbztcbn1cblxuXG5mdW5jdGlvbiBnZXROdW1lcmljVmFsdWVGcm9tRXhwcmVzc2lvbihcbiAgICBleHByOiBOb2RlLFxuICAgIHN5bWJvbDogU3ltYm9sLFxuICAgIGRlY2xhcmF0aW9uOiBWYXJpYWJsZURlY2xhcmF0aW9uIHwgUHJvcGVydHlEZWNsYXJhdGlvbixcbiAgICB1c2FnZU5vZGU6IE5vZGUsXG4gICAgY3VycmVudFZhbHVlSW5mbz86IE51bWVyaWNMaXRlcmFsSW5mb1xuKTogTnVtZXJpY0xpdGVyYWxJbmZvIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoTm9kZS5pc051bWVyaWNMaXRlcmFsKGV4cHIpKSB7XG4gICAgICAgIHJldHVybiBnZXROdW1lcmljTGl0ZXJhbEluZm8oZXhwcik7XG4gICAgfSBlbHNlIGlmIChOb2RlLmlzSWRlbnRpZmllcihleHByKSB8fCBOb2RlLmlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKGV4cHIpKSB7XG4gICAgICAgIGlmIChpc0Fzc2lnbm1lbnRUb1N5bWJvbChleHByLCBzeW1ib2wpKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHZhcmlhYmxlL3Byb3BlcnR5XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlSW5mbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSB2YWx1ZSBvZiBhbm90aGVyIHZhcmlhYmxlIG9yIHByb3BlcnR5XG4gICAgICAgICAgICBjb25zdCBleHByU3ltYm9sID0gZXhwci5nZXRTeW1ib2woKTtcbiAgICAgICAgICAgIGlmIChleHByU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25zID0gZXhwclN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25zICYmIGRlY2xhcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlY2wgPSBkZWNsYXJhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChOb2RlLmlzVmFyaWFibGVEZWNsYXJhdGlvbihkZWNsKSB8fCBOb2RlLmlzUHJvcGVydHlEZWNsYXJhdGlvbihkZWNsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1GbG93QW5hbHlzaXMoZXhwclN5bWJvbCwgZGVjbCwgZXhwcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKE5vZGUuaXNCaW5hcnlFeHByZXNzaW9uKGV4cHIpKSB7XG4gICAgICAgIGNvbnN0IGxlZnRJbmZvID0gZ2V0TnVtZXJpY1ZhbHVlRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgICBleHByLmdldExlZnQoKSxcbiAgICAgICAgICAgIHN5bWJvbCxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLFxuICAgICAgICAgICAgdXNhZ2VOb2RlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mb1xuICAgICAgICApO1xuICAgICAgICBjb25zdCByaWdodEluZm8gPSBnZXROdW1lcmljVmFsdWVGcm9tRXhwcmVzc2lvbihcbiAgICAgICAgICAgIGV4cHIuZ2V0UmlnaHQoKSxcbiAgICAgICAgICAgIHN5bWJvbCxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLFxuICAgICAgICAgICAgdXNhZ2VOb2RlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlSW5mb1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChsZWZ0SW5mbyAmJiByaWdodEluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IG9wZXJhdG9yS2luZCA9IGV4cHIuZ2V0T3BlcmF0b3JUb2tlbigpLmdldEtpbmQoKTtcbiAgICAgICAgICAgIHJldHVybiBldmFsdWF0ZUJpbmFyeU9wZXJhdGlvbihvcGVyYXRvcktpbmQsIGxlZnRJbmZvLCByaWdodEluZm8pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGVDb21wb3VuZEFzc2lnbm1lbnQoXG4gICAgb3BlcmF0b3JLaW5kOiBTeW50YXhLaW5kLFxuICAgIGxlZnRJbmZvOiBOdW1lcmljTGl0ZXJhbEluZm8sXG4gICAgcmlnaHRJbmZvOiBOdW1lcmljTGl0ZXJhbEluZm9cbik6IE51bWVyaWNMaXRlcmFsSW5mbyB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3Qgb3BlcmF0b3JNYXA6IHsgW2tleTogbnVtYmVyXTogU3ludGF4S2luZCB9ID0ge1xuICAgICAgICBbU3ludGF4S2luZC5QbHVzRXF1YWxzVG9rZW5dOiBTeW50YXhLaW5kLlBsdXNUb2tlbixcbiAgICAgICAgW1N5bnRheEtpbmQuTWludXNFcXVhbHNUb2tlbl06IFN5bnRheEtpbmQuTWludXNUb2tlbixcbiAgICAgICAgW1N5bnRheEtpbmQuQXN0ZXJpc2tFcXVhbHNUb2tlbl06IFN5bnRheEtpbmQuQXN0ZXJpc2tUb2tlbixcbiAgICAgICAgW1N5bnRheEtpbmQuU2xhc2hFcXVhbHNUb2tlbl06IFN5bnRheEtpbmQuU2xhc2hUb2tlbixcbiAgICAgICAgW1N5bnRheEtpbmQuUGVyY2VudEVxdWFsc1Rva2VuXTogU3ludGF4S2luZC5QZXJjZW50VG9rZW4sXG4gICAgfTtcbiAgICBjb25zdCBiaW5hcnlPcGVyYXRvcktpbmQgPSBvcGVyYXRvck1hcFtvcGVyYXRvcktpbmRdO1xuICAgIGlmIChiaW5hcnlPcGVyYXRvcktpbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZXZhbHVhdGVCaW5hcnlPcGVyYXRpb24oYmluYXJ5T3BlcmF0b3JLaW5kLCBsZWZ0SW5mbywgcmlnaHRJbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGVCaW5hcnlPcGVyYXRpb24oXG4gICAgb3BlcmF0b3JLaW5kOiBTeW50YXhLaW5kLFxuICAgIGxlZnRJbmZvOiBOdW1lcmljTGl0ZXJhbEluZm8sXG4gICAgcmlnaHRJbmZvOiBOdW1lcmljTGl0ZXJhbEluZm9cbik6IE51bWVyaWNMaXRlcmFsSW5mbyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IHJlc3VsdFZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgbGV0IGhhc0RlY2ltYWwgPSBsZWZ0SW5mby5oYXNEZWNpbWFsIHx8IHJpZ2h0SW5mby5oYXNEZWNpbWFsO1xuXG4gICAgc3dpdGNoIChvcGVyYXRvcktpbmQpIHtcbiAgICAgICAgY2FzZSBTeW50YXhLaW5kLlBsdXNUb2tlbjpcbiAgICAgICAgICAgIHJlc3VsdFZhbHVlID0gbGVmdEluZm8udmFsdWUgKyByaWdodEluZm8udmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTeW50YXhLaW5kLk1pbnVzVG9rZW46XG4gICAgICAgICAgICByZXN1bHRWYWx1ZSA9IGxlZnRJbmZvLnZhbHVlIC0gcmlnaHRJbmZvLnZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU3ludGF4S2luZC5Bc3Rlcmlza1Rva2VuOlxuICAgICAgICAgICAgcmVzdWx0VmFsdWUgPSBsZWZ0SW5mby52YWx1ZSAqIHJpZ2h0SW5mby52YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuU2xhc2hUb2tlbjpcbiAgICAgICAgICAgIHJlc3VsdFZhbHVlID0gbGVmdEluZm8udmFsdWUgLyByaWdodEluZm8udmFsdWU7XG4gICAgICAgICAgICBoYXNEZWNpbWFsID0gdHJ1ZTsgLy8gRGl2aXNpb24gY2FuIHJlc3VsdCBpbiBhIGRlY2ltYWxcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuUGVyY2VudFRva2VuOlxuICAgICAgICAgICAgcmVzdWx0VmFsdWUgPSBsZWZ0SW5mby52YWx1ZSAlIHJpZ2h0SW5mby52YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge3ZhbHVlOiByZXN1bHRWYWx1ZSwgaGFzRGVjaW1hbH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuIiwiaW1wb3J0IHtcbiAgICBTb3VyY2VGaWxlLFxuICAgIE5vZGUsXG4gICAgU3ludGF4S2luZCxcbiAgICBDYWxsRXhwcmVzc2lvbixcbiAgICBNZXRob2REZWNsYXJhdGlvbixcbiAgICBUeXBlLFxuICAgIENsYXNzRGVjbGFyYXRpb24sXG4gICAgVHlwZUNoZWNrZXJcbn0gZnJvbSBcInRzLW1vcnBoXCI7XG5pbXBvcnQgdHMgZnJvbSBcInR5cGVzY3JpcHQvbGliL3Rzc2VydmVybGlicmFyeVwiO1xuaW1wb3J0IHtcbiAgICBnZXRJc1VuaXR5QVBJVHlwZSxcbiAgICBnZXRJc1VuaXR5QVBJRGVjbGFyYXRpb24sXG4gICAgZ2V0R2VuaWVzU2NyaXB0VHlwZUZyb21UeXBlLFxuICAgIEdlbmllc1NjcmlwdFR5cGUsXG4gICAgZ2V0RnVsbFR5cGVOYW1lLFxuICAgIEFsbG93ZWRVaUludGVyZmFjZXMsXG4gICAgZ2V0SXNWYWxpZFVuaXR5R2VuZXJpY1R5cGVBcmcsXG4gICAgR0VUX0lURU1fTkFNRSxcbiAgICBTRVRfSVRFTV9OQU1FLFxuICAgIGluaGVyaXRzRnJvbSwgZ2V0QmFzZVR5cGVzLCBpc1R5cGVBc3NpZ25hYmxlVG8sIGlzVXNlckRlZmluZWRUeXBlXG59IGZyb20gXCIuL0NvbXBpbGVyVXRpbHNcIjtcbmltcG9ydCB7c2VsZWN0QmVzdE92ZXJsb2FkfSBmcm9tIFwiLi9NZXRob2RPdmVybG9hZFV0aWxzXCI7XG5cbmNvbnN0IENVU1RPTV9ESUFHTk9TVElDX0NPREVTID0ge1xuICAgIElOVkFMSURfSU5IRVJJVEFOQ0U6IDEwMDAxLFxuICAgIEZPUkJJRERFTl9JTlRFUkZBQ0U6IDEwMDAyLFxuICAgIEdFTkVSSUNfTUVUSE9EX01JU1NJTkdfVFlQRV9BUkdVTUVOVFM6IDEwMDAzLFxuICAgIEdFTkVSSUNfTUVUSE9EX0lOVkFMSURfVFlQRV9BUkdVTUVOVFM6IDEwMDA0LFxuICAgIEdFTkVSSUNfQ0xBU1NfTUlTU0lOR19UWVBFX0FSR1VNRU5UUzogMTAwMDUsXG4gICAgR0VORVJJQ19DTEFTU19JTlZBTElEX1RZUEVfQVJHVU1FTlRTOiAxMDAwNixcbiAgICBJTlZBTElEX0dFVF9JVEVNX0FSR1VNRU5UUzogMTAwMDcsXG4gICAgSU5DT01QQVRJQkxFX1BBUkFNRVRFUl9UWVBFOiAxMDAwOFxufTtcblxuY29uc3QgQUxMT1dFRF9JTkhFUklUQU5DRV9UWVBFUyA9IG5ldyBTZXQoWydNb25vQmVoYXZpb3VyJywgJ1NjcmlwdGFibGVPYmplY3QnXSk7XG5cbmNvbnN0IENPTVBPTkVOVF9NRVRIT0RTID0gbmV3IFNldChbXG4gICAgJ0dldENvbXBvbmVudCcsXG4gICAgJ1RyeUdldENvbXBvbmVudCcsXG4gICAgJ0dldENvbXBvbmVudEluQ2hpbGRyZW4nLFxuICAgICdHZXRDb21wb25lbnRzSW5DaGlsZHJlbicsXG4gICAgJ0dldENvbXBvbmVudEluUGFyZW50JyxcbiAgICAnR2V0Q29tcG9uZW50c0luUGFyZW50JyxcbiAgICAnR2V0Q29tcG9uZW50cycsXG4gICAgJ0FkZENvbXBvbmVudCcsXG5dKTtcblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2VuaWVzU2VtYW50aWNEaWFnbm9zdGljcyhmaWxlOiBTb3VyY2VGaWxlLCB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXIpOiB0cy5EaWFnbm9zdGljW10ge1xuICAgIGlmICghZmlsZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgZGlhZ25vc3RpY3M6IHRzLkRpYWdub3N0aWNbXSA9IFtdO1xuXG4gICAgcHJvY2Vzc0NsYXNzRGlhZ25vc3RpY3MoZmlsZSwgZGlhZ25vc3RpY3MpO1xuICAgIHByb2Nlc3NDYWxsRXhwcmVzc2lvbkRpYWdub3N0aWNzKGZpbGUsIGRpYWdub3N0aWNzLCB0eXBlQ2hlY2tlcik7XG4gICAgcHJvY2Vzc1R5cGVVc2FnZURpYWdub3N0aWNzKGZpbGUsIGRpYWdub3N0aWNzKTtcbiAgICBcbiAgICAvL1RPRE8gaW1wcm92ZSBkaWFnbm9zdGljcyBmb3IgYnJhY2tldCBhY2Nlc3NcbiAgICAvL3Byb2Nlc3NCcmFja2V0QWNjZXNzRGlhZ25vc3RpY3MoZmlsZSwgdHlwZUNoZWNrZXIsIGRpYWdub3N0aWNzKTtcblxuICAgIHJldHVybiBkaWFnbm9zdGljcztcbn1cblxuLy9UT0RPIGltcHJvdmUgZGlhZ25vc3RpY3MgZm9yIGJyYWNrZXQgYWNjZXNzXG4vLyBmdW5jdGlvbiBwcm9jZXNzQnJhY2tldEFjY2Vzc0RpYWdub3N0aWNzKGZpbGU6IFNvdXJjZUZpbGUsIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlciwgZGlhZ25vc3RpY3M6IHRzLkRpYWdub3N0aWNbXSkge1xuLy9cbi8vICAgICBsZXQgZXhwcmVzc2lvbnMgPSBmaWxlLmdldERlc2NlbmRhbnRzT2ZLaW5kKFN5bnRheEtpbmQuRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24pO1xuLy9cbi8vICAgICBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoID09PSAwKSB7XG4vLyAgICAgICAgIHJldHVybjtcbi8vICAgICB9XG4vL1xuLy8gICAgIGV4cHJlc3Npb25zLmZvckVhY2gobm9kZSA9PiB7XG4vLyAgICAgICAgIGNvbnN0IGVsZW1lbnRBY2Nlc3MgPSBub2RlIGFzIEVsZW1lbnRBY2Nlc3NFeHByZXNzaW9uO1xuLy8gICAgICAgICBjb25zdCBleHByZXNzaW9uID0gZWxlbWVudEFjY2Vzcy5nZXRFeHByZXNzaW9uKCk7XG4vLyAgICAgICAgIGNvbnN0IGFyZ3VtZW50RXhwcmVzc2lvbiA9IGVsZW1lbnRBY2Nlc3MuZ2V0QXJndW1lbnRFeHByZXNzaW9uKCk7XG4vL1xuLy8gICAgICAgICBpZiAoIWFyZ3VtZW50RXhwcmVzc2lvbikge1xuLy8gICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBhcmd1bWVudCAoZS5nLiwgb2JqW10pLCBza2lwIHRyYW5zZm9ybWF0aW9uXG4vLyAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbi8vICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgY29uc3QgdHlwZSA9IGV4cHJlc3Npb24uZ2V0VHlwZSgpO1xuLy9cbi8vICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHR5cGUgaXMgYSBVbml0eSBBUEkgdHlwZVxuLy8gICAgICAgICBpZiAoIWdldElzVW5pdHlBUElUeXBlKHR5cGUpKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbi8vICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgLy8gUmV0cmlldmUgdGhlIHN5bWJvbCBvZiB0aGUgdHlwZVxuLy8gICAgICAgICBjb25zdCB0eXBlU3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbi8vICAgICAgICAgaWYgKCF0eXBlU3ltYm9sKSB7XG4vLyAgICAgICAgICAgICByZXR1cm47XG4vLyAgICAgICAgIH1cbi8vXG4vLyAgICAgICAgIC8vIEdldCBhbGwgZGVjbGFyYXRpb25zIChjbGFzc2VzIGFuZCBpbnRlcmZhY2VzKSBhc3NvY2lhdGVkIHdpdGggdGhlIHR5cGVcbi8vICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25zID0gdHlwZVN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKS5maWx0ZXIoXG4vLyAgICAgICAgICAgICBkZWNsID0+IE5vZGUuaXNDbGFzc0RlY2xhcmF0aW9uKGRlY2wpIHx8IE5vZGUuaXNJbnRlcmZhY2VEZWNsYXJhdGlvbihkZWNsKVxuLy8gICAgICAgICApIGFzIChDbGFzc0RlY2xhcmF0aW9uIHwgSW50ZXJmYWNlRGVjbGFyYXRpb24pW107XG4vL1xuLy8gICAgICAgICBpZiAoZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICB9XG4vL1xuLy8gICAgICAgICAvLyBDb2xsZWN0IGFsbCB1bmlxdWUgZ2V0X2l0ZW0gYW5kIHNldF9pdGVtIG1ldGhvZHMgYWNyb3NzIGFsbCBkZWNsYXJhdGlvbnNcbi8vICAgICAgICAgY29uc3QgZ2V0SXRlbU1ldGhvZHM6IChNZXRob2REZWNsYXJhdGlvbiB8IE1ldGhvZFNpZ25hdHVyZSlbXSA9IFtdO1xuLy8gICAgICAgICBjb25zdCBzZXRJdGVtTWV0aG9kczogKE1ldGhvZERlY2xhcmF0aW9uIHwgTWV0aG9kU2lnbmF0dXJlKVtdID0gW107XG4vL1xuLy8gICAgICAgICBjb25zdCBtZXRob2RTaWduYXR1cmVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4vL1xuLy8gICAgICAgICBkZWNsYXJhdGlvbnMuZm9yRWFjaChkZWNsID0+IHtcbi8vICAgICAgICAgICAgIGNvbnN0IGNsYXNzT3JJbnRlcmZhY2UgPSBkZWNsIGFzIENsYXNzRGVjbGFyYXRpb24gfCBJbnRlcmZhY2VEZWNsYXJhdGlvbjtcbi8vXG4vLyAgICAgICAgICAgICAvLyBnZXRNZXRob2RzIHJldHVybnMgYW4gYXJyYXkgb2YgTWV0aG9kRGVjbGFyYXRpb24gb3IgTWV0aG9kU2lnbmF0dXJlXG4vLyAgICAgICAgICAgICBjb25zdCBtZXRob2RzID0gY2xhc3NPckludGVyZmFjZS5nZXRNZXRob2RzKCk7XG4vL1xuLy8gICAgICAgICAgICAgbWV0aG9kcy5mb3JFYWNoKG1ldGhvZCA9PiB7XG4vLyAgICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZC5nZXROYW1lKCk7XG4vLyAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09IEdFVF9JVEVNX05BTUUgfHwgbWV0aG9kTmFtZSA9PT0gU0VUX0lURU1fTkFNRSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBzaWduYXR1cmUgc3RyaW5nIGZvciB0aGUgbWV0aG9kXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IG1ldGhvZC5nZXRTaWduYXR1cmUoKS5nZXREZWNsYXJhdGlvbigpPy5nZXRUZXh0KCk7XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmIChzaWduYXR1cmUgJiYgIW1ldGhvZFNpZ25hdHVyZXMuaGFzKHNpZ25hdHVyZSkpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXRob2ROYW1lID09PSBHRVRfSVRFTV9OQU1FKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0SXRlbU1ldGhvZHMucHVzaChtZXRob2QpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtTWV0aG9kcy5wdXNoKG1ldGhvZCk7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RTaWduYXR1cmVzLmFkZChzaWduYXR1cmUpO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgIH0pO1xuLy9cbi8vICAgICAgICAgaWYgKGdldEl0ZW1NZXRob2RzLmxlbmd0aCA9PT0gMCAmJiBzZXRJdGVtTWV0aG9kcy5sZW5ndGggPT09IDApIHtcbi8vICAgICAgICAgICAgIHJldHVybjtcbi8vICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgY29uc3QgcGFyZW50ID0gZWxlbWVudEFjY2Vzcy5nZXRQYXJlbnQoKTtcbi8vXG4vLyAgICAgICAgIC8vIERldGVybWluZSBpZiB0aGlzIGlzIGEgZ2V0dGVyIG9yIHNldHRlclxuLy8gICAgICAgICBpZiAoXG4vLyAgICAgICAgICAgICBOb2RlLmlzQmluYXJ5RXhwcmVzc2lvbihwYXJlbnQpICYmXG4vLyAgICAgICAgICAgICBwYXJlbnQuZ2V0T3BlcmF0b3JUb2tlbigpLmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5FcXVhbHNUb2tlbiAmJlxuLy8gICAgICAgICAgICAgcGFyZW50LmdldExlZnQoKSA9PT0gZWxlbWVudEFjY2Vzc1xuLy8gICAgICAgICApIHtcbi8vICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBzZXR0ZXI6IG9ialtpbmRleF0gPSB2YWx1ZVxuLy8gICAgICAgICAgICAgaWYgKHNldEl0ZW1NZXRob2RzLmxlbmd0aCA9PT0gMCkge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybjtcbi8vICAgICAgICAgICAgIH1cbi8vXG4vLyAgICAgICAgICAgICBjb25zdCB2YWx1ZUV4cHJlc3Npb24gPSBwYXJlbnQuZ2V0UmlnaHQoKTtcbi8vXG4vLyAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGZpbmQgYSBtYXRjaGluZyBzZXRfaXRlbSBtZXRob2Rcbi8vICAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nU2V0SXRlbSA9IHNldEl0ZW1NZXRob2RzLmZpbmQobWV0aG9kID0+IHtcbi8vICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBtZXRob2QuZ2V0UGFyYW1ldGVycygpO1xuLy8gICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSAyKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbi8vICAgICAgICAgICAgICAgICB9XG4vL1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4UGFyYW1UeXBlID0gcGFyYW1zWzBdLmdldFR5cGUoKTtcbi8vICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZVBhcmFtVHlwZSA9IHBhcmFtc1sxXS5nZXRUeXBlKCk7XG4vL1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4QXJnVHlwZSA9IGFyZ3VtZW50RXhwcmVzc2lvbi5nZXRUeXBlKCk7XG4vLyAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVBcmdUeXBlID0gdmFsdWVFeHByZXNzaW9uLmdldFR5cGUoKTtcbi8vXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIChcbi8vICAgICAgICAgICAgICAgICAgICAgdHlwZUNoZWNrZXIuaXNUeXBlQXNzaWduYWJsZVRvKGluZGV4QXJnVHlwZSwgaW5kZXhQYXJhbVR5cGUpICYmXG4vLyAgICAgICAgICAgICAgICAgICAgIHR5cGVDaGVja2VyLmlzVHlwZUFzc2lnbmFibGVUbyh2YWx1ZUFyZ1R5cGUsIHZhbHVlUGFyYW1UeXBlKVxuLy8gICAgICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vXG4vLyAgICAgICAgICAgICBpZiAoIW1hdGNoaW5nU2V0SXRlbSkge1xuLy8gICAgICAgICAgICAgICAgIGFkZERpYWdub3N0aWMoXG4vLyAgICAgICAgICAgICAgICAgICAgIGRpYWdub3N0aWNzLFxuLy8gICAgICAgICAgICAgICAgICAgICBub2RlLFxuLy8gICAgICAgICAgICAgICAgICAgICBgSW52YWxpZCBBc3NpZ25tZW50YCxcbi8vICAgICAgICAgICAgICAgICAgICAgQ1VTVE9NX0RJQUdOT1NUSUNfQ09ERVMuSU5WQUxJRF9HRVRfSVRFTV9BUkdVTUVOVFMpO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGdldHRlcjogb2JqW2luZGV4XVxuLy8gICAgICAgICAgICAgaWYgKGdldEl0ZW1NZXRob2RzLmxlbmd0aCA9PT0gMCkge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuLy8gICAgICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZmluZCBhIG1hdGNoaW5nIGdldF9pdGVtIG1ldGhvZFxuLy8gICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdHZXRJdGVtID0gZ2V0SXRlbU1ldGhvZHMuZmluZChtZXRob2QgPT4ge1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IG1ldGhvZC5nZXRQYXJhbWV0ZXJzKCk7XG4vLyAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggIT09IDEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vXG4vLyAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXhQYXJhbVR5cGUgPSBwYXJhbXNbMF0uZ2V0VHlwZSgpO1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4QXJnVHlwZSA9IGFyZ3VtZW50RXhwcmVzc2lvbi5nZXRUeXBlKCk7XG4vL1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiB0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8oaW5kZXhBcmdUeXBlLCBpbmRleFBhcmFtVHlwZSk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vXG4vLyAgICAgICAgICAgICBsZXQgdmFsaWRQYXJhbXMgPSBnZXRJdGVtTWV0aG9kcy5mbGF0TWFwKGcgPT4gZy5nZXRQYXJhbWV0ZXJzKCkubWFwKHAgPT4gZ2V0RnVsbFR5cGVOYW1lKHAuZ2V0VHlwZSgpKSkpO1xuLy9cbi8vICAgICAgICAgICAgIGlmICghbWF0Y2hpbmdHZXRJdGVtKSB7XG4vLyAgICAgICAgICAgICAgICAgYWRkRGlhZ25vc3RpYyhcbi8vICAgICAgICAgICAgICAgICAgICAgZGlhZ25vc3RpY3MsXG4vLyAgICAgICAgICAgICAgICAgICAgIG5vZGUsXG4vLyAgICAgICAgICAgICAgICAgICAgIGBJbnZhbGlkIGFjY2VzcywgYWNjZXB0ZWQgdHlwZXMgYXJlICcke3ZhbGlkUGFyYW1zLmpvaW4oXCIsXCIpfSdgLFxuLy8gICAgICAgICAgICAgICAgICAgICBDVVNUT01fRElBR05PU1RJQ19DT0RFUy5JTlZBTElEX0dFVF9JVEVNX0FSR1VNRU5UUyk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICB9KTtcbi8vIH1cblxuZnVuY3Rpb24gcHJvY2Vzc0NsYXNzRGlhZ25vc3RpY3MoZmlsZTogU291cmNlRmlsZSwgZGlhZ25vc3RpY3M6IHRzLkRpYWdub3N0aWNbXSkge1xuICAgIGNvbnN0IGdlbmllc0NsYXNzZXMgPSBmaWxlLmdldENsYXNzZXMoKTtcblxuICAgIGdlbmllc0NsYXNzZXMuZm9yRWFjaChjbHMgPT4ge1xuICAgICAgICBjb25zdCBiYXNlQ2xhc3MgPSBjbHMuZ2V0QmFzZUNsYXNzKCk7XG4gICAgICAgIGNvbnN0IGltcGxlbWVudGVkSW50ZXJmYWNlcyA9IGNscy5nZXRJbXBsZW1lbnRzKCk7XG4gICAgICAgIGNvbnN0IGJhc2VDbGFzc05hbWUgPSBiYXNlQ2xhc3M/LmdldE5hbWUoKTtcblxuICAgICAgICBpZiAoYmFzZUNsYXNzICYmIGdldElzVW5pdHlBUElUeXBlKGJhc2VDbGFzcy5nZXRUeXBlKCkpICYmIGJhc2VDbGFzc05hbWUgJiYgIUFMTE9XRURfSU5IRVJJVEFOQ0VfVFlQRVMuaGFzKGJhc2VDbGFzc05hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGJhc2VDbGFzcy5nZXRTdGFydCgpO1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYmFzZUNsYXNzLmdldE5hbWUoKT8ubGVuZ3RoO1xuXG4gICAgICAgICAgICBjb25zdCBkaWFnbm9zdGljTWVzc2FnZSA9IGBDbGFzcyAnJHtjbHMuZ2V0TmFtZSgpfScgaW5oZXJpdHMgZnJvbSBhIFVuaXR5IHR5cGUgJyR7YmFzZUNsYXNzLmdldE5hbWUoKX0nIHRoYXQgaXMgbm90ICdNb25vQmVoYXZpb3VyJyBvciAnU2NyaXB0YWJsZU9iamVjdCcuYDtcbiAgICAgICAgICAgIGNvbnN0IGRpYWdub3N0aWM6IHRzLkRpYWdub3N0aWMgPSB7XG4gICAgICAgICAgICAgICAgZmlsZTogZmlsZS5jb21waWxlck5vZGUsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICAgIGxlbmd0aDogbGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0OiBkaWFnbm9zdGljTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogdHMuRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yLFxuICAgICAgICAgICAgICAgIGNvZGU6IENVU1RPTV9ESUFHTk9TVElDX0NPREVTLklOVkFMSURfSU5IRVJJVEFOQ0UsXG4gICAgICAgICAgICAgICAgc291cmNlOiAnR2VuaWVzJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkaWFnbm9zdGljcy5wdXNoKGRpYWdub3N0aWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW1wbGVtZW50ZWRJbnRlcmZhY2VzLmZvckVhY2goaW50ZiA9PiB7XG4gICAgICAgICAgICBpZiAoZ2V0SXNVbml0eUFQSVR5cGUoaW50Zi5nZXRUeXBlKCkpKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGdldEZ1bGxUeXBlTmFtZShpbnRmLmdldFR5cGUoKSk7XG4gICAgICAgICAgICAgICAgaWYgKEFsbG93ZWRVaUludGVyZmFjZXMuaGFzKHR5cGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpbnRmLmdldFN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gaW50Zi5nZXRXaWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGlhZ25vc3RpY01lc3NhZ2UgPSBgQ2xhc3MgJyR7Y2xzLmdldE5hbWUoKX0nIGltcGxlbWVudHMgYSBmb3JiaWRkZW4gVW5pdHkgaW50ZXJmYWNlICcke2ludGYuZ2V0VGV4dCgpfScuYDtcbiAgICAgICAgICAgICAgICBjb25zdCBkaWFnbm9zdGljOiB0cy5EaWFnbm9zdGljID0ge1xuICAgICAgICAgICAgICAgICAgICBmaWxlOiBmaWxlLmNvbXBpbGVyTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRleHQ6IGRpYWdub3N0aWNNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogdHMuRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBDVVNUT01fRElBR05PU1RJQ19DT0RFUy5GT1JCSURERU5fSU5URVJGQUNFLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdHZW5pZXMnLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZGlhZ25vc3RpY3MucHVzaChkaWFnbm9zdGljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NUeXBlVXNhZ2VEaWFnbm9zdGljcyhmaWxlOiBTb3VyY2VGaWxlLCBkaWFnbm9zdGljczogdHMuRGlhZ25vc3RpY1tdKSB7XG4gICAgLy8gR2F0aGVyIGFsbCBOZXdFeHByZXNzaW9uIGFuZCBUeXBlUmVmZXJlbmNlTm9kZSBpbnN0YW5jZXNcbiAgICBjb25zdCBuZXdFeHByZXNzaW9ucyA9IGZpbGUuZ2V0RGVzY2VuZGFudHNPZktpbmQoU3ludGF4S2luZC5OZXdFeHByZXNzaW9uKTtcblxuICAgIC8vIFByb2Nlc3MgTmV3RXhwcmVzc2lvbiBub2Rlc1xuICAgIG5ld0V4cHJlc3Npb25zLmZvckVhY2gobmV3RXhwciA9PiB7XG4gICAgICAgIC8vIFJlc29sdmUgdGhlIHN5bWJvbCBvZiB0aGUgY2xhc3MgYmVpbmcgaW5zdGFudGlhdGVkXG4gICAgICAgIGNvbnN0IHR5cGVTeW1ib2wgPSBuZXdFeHByLmdldFR5cGUoKS5nZXRTeW1ib2woKTtcblxuICAgICAgICBpZiAoIXR5cGVTeW1ib2wpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHJpZXZlIGFsbCBkZWNsYXJhdGlvbnMgb2YgdGhlIHN5bWJvbFxuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSB0eXBlU3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuXG4gICAgICAgIGlmICghZGVjbGFyYXRpb25zIHx8IGRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbHRlciBmb3IgY2xhc3MgZGVjbGFyYXRpb25zIHdpdGggdHlwZSBwYXJhbWV0ZXJzIChpLmUuLCBnZW5lcmljIGNsYXNzZXMpXG4gICAgICAgIGNvbnN0IGNsYXNzRGVjbGFyYXRpb25zID0gZGVjbGFyYXRpb25zLmZpbHRlcihkZWNsID0+XG4gICAgICAgICAgICBOb2RlLmlzQ2xhc3NEZWNsYXJhdGlvbihkZWNsKSAmJiBnZXRJc1VuaXR5QVBJRGVjbGFyYXRpb24oZGVjbCkgJiYgZGVjbC5nZXRUeXBlUGFyYW1ldGVycygpLmxlbmd0aCA+IDBcbiAgICAgICAgKSBhcyBDbGFzc0RlY2xhcmF0aW9uW107XG5cbiAgICAgICAgaWYgKGNsYXNzRGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBOb3QgYSBnZW5lcmljIGNsYXNzXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjbGFzc0RlY2xhcmF0aW9uID0gY2xhc3NEZWNsYXJhdGlvbnNbMF07XG4gICAgICAgIGNvbnN0IHR5cGVQYXJhbXMgPSBjbGFzc0RlY2xhcmF0aW9uLmdldFR5cGVQYXJhbWV0ZXJzKCk7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZUFyZ3NDb3VudCA9IHR5cGVQYXJhbXMubGVuZ3RoO1xuXG4gICAgICAgIC8vIFJldHJpZXZlIHByb3ZpZGVkIHR5cGUgYXJndW1lbnRzIGZyb20gdGhlIE5ld0V4cHJlc3Npb25cbiAgICAgICAgY29uc3QgdHlwZUFyZ3MgPSBuZXdFeHByLmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZWRUeXBlQXJnc0NvdW50ID0gdHlwZUFyZ3MubGVuZ3RoO1xuXG4gICAgICAgIGlmIChwcm92aWRlZFR5cGVBcmdzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIC8vIEdlbmVyaWMgY2xhc3MgdXNlZCB3aXRob3V0IHR5cGUgYXJndW1lbnRzXG4gICAgICAgICAgICBhZGREaWFnbm9zdGljKFxuICAgICAgICAgICAgICAgIGRpYWdub3N0aWNzLFxuICAgICAgICAgICAgICAgIG5ld0V4cHIsXG4gICAgICAgICAgICAgICAgYEdlbmVyaWMgY2xhc3MgJyR7Z2V0RnVsbFR5cGVOYW1lKG5ld0V4cHIuZ2V0VHlwZSgpKX0nIG11c3QgYmUgaW5zdGFudGlhdGVkIHdpdGggJHtleHBlY3RlZFR5cGVBcmdzQ291bnR9IHR5cGUgYXJndW1lbnQocykuYCxcbiAgICAgICAgICAgICAgICBDVVNUT01fRElBR05PU1RJQ19DT0RFUy5HRU5FUklDX0NMQVNTX01JU1NJTkdfVFlQRV9BUkdVTUVOVFNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvdmlkZWRUeXBlQXJnc0NvdW50ICE9PSBleHBlY3RlZFR5cGVBcmdzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJbmNvcnJlY3QgbnVtYmVyIG9mIHR5cGUgYXJndW1lbnRzIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgYWRkRGlhZ25vc3RpYyhcbiAgICAgICAgICAgICAgICAgICAgZGlhZ25vc3RpY3MsXG4gICAgICAgICAgICAgICAgICAgIG5ld0V4cHIsXG4gICAgICAgICAgICAgICAgICAgIGBHZW5lcmljIGNsYXNzICcke2dldEZ1bGxUeXBlTmFtZShuZXdFeHByLmdldFR5cGUoKSl9JyBleHBlY3RzICR7ZXhwZWN0ZWRUeXBlQXJnc0NvdW50fSB0eXBlIGFyZ3VtZW50KHMpLCBidXQgZ290ICR7cHJvdmlkZWRUeXBlQXJnc0NvdW50fS5gLFxuICAgICAgICAgICAgICAgICAgICBDVVNUT01fRElBR05PU1RJQ19DT0RFUy5HRU5FUklDX0NMQVNTX0lOVkFMSURfVFlQRV9BUkdVTUVOVFNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0ludmFsaWQgYXJnc1xuICAgICAgICAgICAgdHlwZUFyZ3MuZm9yRWFjaCh0eXBlQXJnTm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZUFyZ1R5cGUgPSB0eXBlQXJnTm9kZS5nZXRUeXBlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFnZXRJc1ZhbGlkVW5pdHlHZW5lcmljVHlwZUFyZyh0eXBlQXJnVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGFkZERpYWdub3N0aWMoXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWFnbm9zdGljcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVBcmdOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYFR5cGUgYXJndW1lbnRzIGZvciB0eXBlICcke2dldEZ1bGxUeXBlTmFtZShuZXdFeHByLmdldFR5cGUoKSl9JyBtdXN0IGJlIFVuaXR5IEFQSSB0eXBlcy5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ1VTVE9NX0RJQUdOT1NUSUNfQ09ERVMuR0VORVJJQ19DTEFTU19JTlZBTElEX1RZUEVfQVJHVU1FTlRTXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIHByb2Nlc3NDYWxsRXhwcmVzc2lvbkRpYWdub3N0aWNzKGZpbGU6IFNvdXJjZUZpbGUsIGRpYWdub3N0aWNzOiB0cy5EaWFnbm9zdGljW10sIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlcikge1xuICAgIGNvbnN0IGNhbGxFeHByZXNzaW9ucyA9IGZpbGUuZ2V0RGVzY2VuZGFudHNPZktpbmQoU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbik7XG5cbiAgICBjYWxsRXhwcmVzc2lvbnMuZm9yRWFjaChjYWxsRXhwciA9PiB7XG4gICAgICAgIHByb2Nlc3NHZW5lcmljTWV0aG9kQ2FsbChjYWxsRXhwciwgZGlhZ25vc3RpY3MpO1xuICAgICAgICBjaGVja1BhcmFtZXRlclR5cGVzRm9yVW5pdHlBcGlDYWxscyhjYWxsRXhwciwgZGlhZ25vc3RpY3MsIHR5cGVDaGVja2VyKVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY2hlY2tQYXJhbWV0ZXJUeXBlc0ZvclVuaXR5QXBpQ2FsbHMoY2FsbEV4cHI6IENhbGxFeHByZXNzaW9uLCBkaWFnbm9zdGljczogdHMuRGlhZ25vc3RpY1tdLCB0eXBlQ2hlY2tlcjogVHlwZUNoZWNrZXIpIHtcbiAgICBjb25zdCBleHByZXNzaW9uID0gY2FsbEV4cHIuZ2V0RXhwcmVzc2lvbigpO1xuXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBVbml0eSBBUEkgbWV0aG9kIGNhbGxcbiAgICBpZiAoIU5vZGUuaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24oZXhwcmVzc2lvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BlcnR5QWNjZXNzID0gZXhwcmVzc2lvbi5hc0tpbmQoU3ludGF4S2luZC5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24pO1xuICAgIGNvbnN0IHN5bWJvbCA9IHByb3BlcnR5QWNjZXNzPy5nZXRTeW1ib2woKTtcbiAgICBpZiAoIXN5bWJvbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gc3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuXG4gICAgaWYoIWRlY2xhcmF0aW9ucyB8fCBkZWNsYXJhdGlvbnMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG92ZXJsb2FkRGVjbGFyYXRpb25zID0gZGVjbGFyYXRpb25zLmZpbHRlcihkZWNsID0+XG4gICAgICAgIE5vZGUuaXNNZXRob2REZWNsYXJhdGlvbihkZWNsKSB8fCBOb2RlLmlzTWV0aG9kU2lnbmF0dXJlKGRlY2wpXG4gICAgKSBhcyBNZXRob2REZWNsYXJhdGlvbltdO1xuXG4gICAgaWYgKG92ZXJsb2FkRGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWV0aG9kRGVjbGFyYXRpb24gPSBvdmVybG9hZERlY2xhcmF0aW9uc1swXSBhcyBNZXRob2REZWNsYXJhdGlvbjtcblxuICAgIGlmICghZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKG1ldGhvZERlY2xhcmF0aW9uKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBvdmVybG9hZCByZXNvbHV0aW9uXG4gICAgY29uc3QgYmVzdE92ZXJsb2FkID0gc2VsZWN0QmVzdE92ZXJsb2FkKG92ZXJsb2FkRGVjbGFyYXRpb25zLCBjYWxsRXhwciwgdHlwZUNoZWNrZXIpO1xuXG4gICAgaWYgKCFiZXN0T3ZlcmxvYWQpIHtcbiAgICAgICAgLy8gTm8gc3VpdGFibGUgb3ZlcmxvYWQgZm91bmQ7IGZhbGxiYWNrIHRvIHRoZSBmaXJzdCBvdmVybG9hZFxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBwYXJhbWV0ZXJzIGZyb20gdGhlIG1ldGhvZCBzaWduYXR1cmVcbiAgICBjb25zdCBwYXJhbWV0ZXJzID0gYmVzdE92ZXJsb2FkLmdldFBhcmFtZXRlcnMoKTtcbiAgICBjb25zdCBhcmdzID0gY2FsbEV4cHIuZ2V0QXJndW1lbnRzKCk7XG5cbiAgICAvLyBHZXQgdGhlIHR5cGUgYXJndW1lbnRzIGlmIHByb3ZpZGVkXG4gICAgY29uc3QgdHlwZUFyZ3VtZW50cyA9IGNhbGxFeHByLmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICBjb25zdCBtZXRob2RUeXBlUGFyYW1zID0gYmVzdE92ZXJsb2FkLmdldFR5cGVQYXJhbWV0ZXJzKCk7XG4gICAgY29uc3QgaGFzVHlwZUFyZ3MgPSB0eXBlQXJndW1lbnRzICYmIHR5cGVBcmd1bWVudHMubGVuZ3RoID4gMCAmJiBtZXRob2RUeXBlUGFyYW1zICYmIG1ldGhvZFR5cGVQYXJhbXMubGVuZ3RoID4gMDtcblxuICAgIC8vIENyZWF0ZSBhIG1hcCBvZiB0eXBlIHBhcmFtZXRlciBuYW1lcyB0byB0aGVpciByZXNvbHZlZCB0eXBlc1xuICAgIGNvbnN0IHR5cGVQYXJhbU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBUeXBlPigpO1xuXG4gICAgaWYgKGhhc1R5cGVBcmdzKSB7XG4gICAgICAgIC8vIElmIGV4cGxpY2l0IHR5cGUgYXJndW1lbnRzIHdlcmUgcHJvdmlkZWQsIHVzZSB0aGVtXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4odHlwZUFyZ3VtZW50cy5sZW5ndGgsIG1ldGhvZFR5cGVQYXJhbXMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICB0eXBlUGFyYW1NYXAuc2V0KG1ldGhvZFR5cGVQYXJhbXNbaV0uZ2V0TmFtZSgpLCB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0eXBlQXJndW1lbnRzW2ldKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBlYWNoIGFyZ3VtZW50IGFnYWluc3QgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHR5cGVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKHBhcmFtZXRlcnMubGVuZ3RoLCBhcmdzLmxlbmd0aCk7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSBwYXJhbWV0ZXJzW2ldO1xuICAgICAgICBjb25zdCBhcmd1bWVudCA9IGFyZ3NbaV07XG5cbiAgICAgICAgbGV0IHBhcmFtZXRlclR5cGUgPSBwYXJhbWV0ZXIuZ2V0VHlwZSgpO1xuICAgICAgICBjb25zdCBhcmd1bWVudFR5cGUgPSBhcmd1bWVudC5nZXRUeXBlKCk7XG4gICAgICAgIFxuICAgICAgICBpZighaXNVc2VyRGVmaW5lZFR5cGUoYXJndW1lbnRUeXBlKSlcbiAgICAgICAge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgcGFyYW1ldGVyIHR5cGUgaXMgYSB0eXBlIHBhcmFtZXRlciwgcmVzb2x2ZSBpdFxuICAgICAgICBpZiAocGFyYW1ldGVyVHlwZS5pc1R5cGVQYXJhbWV0ZXIoKSkge1xuICAgICAgICAgICAgY29uc3QgdHlwZVBhcmFtTmFtZSA9IHBhcmFtZXRlclR5cGUuZ2V0U3ltYm9sKCk/LmdldE5hbWUoKTtcbiAgICAgICAgICAgIGlmICh0eXBlUGFyYW1OYW1lICYmIHR5cGVQYXJhbU1hcC5oYXModHlwZVBhcmFtTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHJlc29sdmVkIHR5cGUgZnJvbSB0aGUgbWFwXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyVHlwZSA9IHR5cGVQYXJhbU1hcC5nZXQodHlwZVBhcmFtTmFtZSkhO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbWV0ZXJUeXBlLmdldENvbnN0cmFpbnQoKSkge1xuICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBjb25zdHJhaW50IGlmIHdlIGNvdWxkbid0IHJlc29sdmUgdGhlIHR5cGUgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyVHlwZSA9IHBhcmFtZXRlclR5cGUuZ2V0Q29uc3RyYWludCgpITtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZSB0aGUgaW5oZXJpdGFuY2UgY2hlY2tpbmcgdXRpbGl0aWVzIHdpdGggdGhlIHJlc29sdmVkIHBhcmFtZXRlciB0eXBlXG4gICAgICAgIGlmICghaXNUeXBlQ29tcGF0aWJsZVdpdGhQYXJhbWV0ZXIoYXJndW1lbnRUeXBlLCBwYXJhbWV0ZXJUeXBlLCB0eXBlQ2hlY2tlcikpIHtcbiAgICAgICAgICAgIGFkZERpYWdub3N0aWMoXG4gICAgICAgICAgICAgICAgZGlhZ25vc3RpY3MsXG4gICAgICAgICAgICAgICAgYXJndW1lbnQsXG4gICAgICAgICAgICAgICAgYEFyZ3VtZW50IG9mIHR5cGUgJyR7Z2V0RnVsbFR5cGVOYW1lKGFyZ3VtZW50VHlwZSl9JyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnJHtnZXRGdWxsVHlwZU5hbWUocGFyYW1ldGVyVHlwZSl9Jy5gLFxuICAgICAgICAgICAgICAgIENVU1RPTV9ESUFHTk9TVElDX0NPREVTLklOQ09NUEFUSUJMRV9QQVJBTUVURVJfVFlQRVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdHlwZSBpcyBjb21wYXRpYmxlIHdpdGggYSBwYXJhbWV0ZXIgdHlwZVxuZnVuY3Rpb24gaXNUeXBlQ29tcGF0aWJsZVdpdGhQYXJhbWV0ZXIoXG4gICAgYXJndW1lbnRUeXBlOiBUeXBlLFxuICAgIHBhcmFtZXRlclR5cGU6IFR5cGUsXG4gICAgdHlwZUNoZWNrZXI6IFR5cGVDaGVja2VyXG4pOiBib29sZWFuIHtcbiAgICBcbiAgICByZXR1cm4gaXNUeXBlQXNzaWduYWJsZVRvKGFyZ3VtZW50VHlwZSwgcGFyYW1ldGVyVHlwZSwgdHlwZUNoZWNrZXIpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzR2VuZXJpY01ldGhvZENhbGwoY2FsbEV4cHI6IENhbGxFeHByZXNzaW9uLCBkaWFnbm9zdGljczogdHMuRGlhZ25vc3RpY1tdKSB7XG4gICAgY29uc3QgZXhwcmVzc2lvbiA9IGNhbGxFeHByLmdldEV4cHJlc3Npb24oKTtcblxuICAgIC8vIEdldCB0aGUgbWV0aG9kIHN5bWJvbCBhbmQgYWxsIGRlY2xhcmF0aW9uc1xuICAgIGxldCBtZXRob2REZWNsYXJhdGlvbnM6IE1ldGhvZERlY2xhcmF0aW9uW10gPSBbXTtcblxuICAgIGlmIChOb2RlLmlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKGV4cHJlc3Npb24pIHx8IE5vZGUuaXNJZGVudGlmaWVyKGV4cHJlc3Npb24pKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZFN5bWJvbCA9IGV4cHJlc3Npb24uZ2V0U3ltYm9sKCk7XG4gICAgICAgIGlmIChtZXRob2RTeW1ib2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IG1ldGhvZFN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKTtcbiAgICAgICAgICAgIG1ldGhvZERlY2xhcmF0aW9ucyA9IGRlY2xhcmF0aW9ucy5maWx0ZXIoZGVjbCA9PiBOb2RlLmlzTWV0aG9kRGVjbGFyYXRpb24oZGVjbCkpIGFzIE1ldGhvZERlY2xhcmF0aW9uW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWV0aG9kRGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47IC8vIENhbm5vdCBwcm9jZWVkIHdpdGhvdXQgbWV0aG9kIGRlY2xhcmF0aW9uc1xuICAgIH1cblxuICAgIGxldCBpc0dlbmVyaWNNZXRob2REZWNsYXJhdGlvbiA9IG1ldGhvZERlY2xhcmF0aW9ucy5maWx0ZXIoZGVjbCA9PiB7XG4gICAgICAgIHJldHVybiBkZWNsLmdldFR5cGVQYXJhbWV0ZXJzKCkubGVuZ3RoID4gMFxuICAgIH0pLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoIWlzR2VuZXJpY01ldGhvZERlY2xhcmF0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGaWx0ZXIgdG8gVW5pdHkgQVBJIG1ldGhvZHNcbiAgICBtZXRob2REZWNsYXJhdGlvbnMgPSBtZXRob2REZWNsYXJhdGlvbnMuZmlsdGVyKGRlY2wgPT4gZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKGRlY2wpKTtcblxuICAgIGlmIChtZXRob2REZWNsYXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjsgLy8gTm8gVW5pdHkgQVBJIG1ldGhvZHNcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2ROYW1lID0gZ2V0TWV0aG9kTmFtZShleHByZXNzaW9uKTtcblxuICAgIC8vIENoZWNrIGZvciBub24tZ2VuZXJpYyBvdmVybG9hZHMgdGhhdCBhY2NlcHQgdGhlIHNhbWUgcGFyYW1ldGVyc1xuICAgIGlmIChoYXNNYXRjaGluZ05vbkdlbmVyaWNPdmVybG9hZChtZXRob2REZWNsYXJhdGlvbnMsIGNhbGxFeHByKSkge1xuICAgICAgICByZXR1cm47IC8vIFNraXAgdGhlIGNoZWNrIHNpbmNlIGEgbm9uLWdlbmVyaWMgb3ZlcmxvYWQgZXhpc3RzXG4gICAgfVxuXG4gICAgLy8gTm93LCBlbnN1cmUgdGhhdCB0aGUgY2FsbCBwcm92aWRlcyB0eXBlIGFyZ3VtZW50c1xuICAgIGNvbnN0IHR5cGVBcmdzID0gY2FsbEV4cHIuZ2V0VHlwZUFyZ3VtZW50cygpO1xuXG4gICAgaWYgKHR5cGVBcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBHZW5lcmljIG1ldGhvZCBjYWxsZWQgd2l0aG91dCBzcGVjaWZ5aW5nIHR5cGUgYXJndW1lbnRzXG4gICAgICAgIGFkZERpYWdub3N0aWMoXG4gICAgICAgICAgICBkaWFnbm9zdGljcyxcbiAgICAgICAgICAgIGNhbGxFeHByLFxuICAgICAgICAgICAgYEdlbmVyaWMgbWV0aG9kICcke21ldGhvZE5hbWV9JyBtdXN0IGJlIGNhbGxlZCB3aXRoIHR5cGUgYXJndW1lbnRzLmAsXG4gICAgICAgICAgICBDVVNUT01fRElBR05PU1RJQ19DT0RFUy5HRU5FUklDX01FVEhPRF9NSVNTSU5HX1RZUEVfQVJHVU1FTlRTXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmFsaWRBcmdzID0gbWV0aG9kRGVjbGFyYXRpb25zLm1hcChtID0+IG0uZ2V0VHlwZVBhcmFtZXRlcnMoKS5sZW5ndGgpO1xuICAgIGlmICghdmFsaWRBcmdzLmluY2x1ZGVzKHR5cGVBcmdzLmxlbmd0aCkpIHtcbiAgICAgICAgLy8gSW5jb3JyZWN0IG51bWJlciBvZiB0eXBlIGFyZ3VtZW50cyBwcm92aWRlZFxuICAgICAgICBhZGREaWFnbm9zdGljKFxuICAgICAgICAgICAgZGlhZ25vc3RpY3MsXG4gICAgICAgICAgICBjYWxsRXhwcixcbiAgICAgICAgICAgIGBHZW5lcmljIG1ldGhvZCAnJHttZXRob2ROYW1lfScgd2FzIHByb3ZpZGVkIHRoZSB3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzLiBWYWxpZCBhcmdzIGNvdW50czogJyR7dmFsaWRBcmdzLmpvaW4oXCIsIFwiKX0nYCxcbiAgICAgICAgICAgIENVU1RPTV9ESUFHTk9TVElDX0NPREVTLkdFTkVSSUNfQ0xBU1NfSU5WQUxJRF9UWVBFX0FSR1VNRU5UU1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHR5cGUgYXJndW1lbnRzXG4gICAgaWYgKENPTVBPTkVOVF9NRVRIT0RTLmhhcyhtZXRob2ROYW1lKSkge1xuICAgICAgICAvLyBBcHBseSBHZXRDb21wb25lbnQgcnVsZXNcbiAgICAgICAgdHlwZUFyZ3MuZm9yRWFjaCh0eXBlQXJnTm9kZSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzVmFsaWRDb21wb25lbnRUeXBlQXJnKHR5cGVBcmdOb2RlKSkge1xuICAgICAgICAgICAgICAgIGFkZERpYWdub3N0aWMoXG4gICAgICAgICAgICAgICAgICAgIGRpYWdub3N0aWNzLFxuICAgICAgICAgICAgICAgICAgICB0eXBlQXJnTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgYFR5cGUgYXJndW1lbnRzIGZvciBtZXRob2QgJyR7bWV0aG9kTmFtZX0nIG11c3QgYmUgYSBVbml0eSBBUEkgdHlwZSwgYW4gaW50ZXJmYWNlLCBvciBhIHR5cGUgdGhhdCBleHRlbmRzIE1vbm9CZWhhdmlvdXIuYCxcbiAgICAgICAgICAgICAgICAgICAgQ1VTVE9NX0RJQUdOT1NUSUNfQ09ERVMuR0VORVJJQ19NRVRIT0RfSU5WQUxJRF9UWVBFX0FSR1VNRU5UU1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvdGhlciBtZXRob2RzLCB0eXBlIGFyZ3VtZW50cyBtdXN0IGJlIFVuaXR5IEFQSSB0eXBlc1xuICAgICAgICB0eXBlQXJncy5mb3JFYWNoKHR5cGVBcmdOb2RlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVBcmdUeXBlID0gdHlwZUFyZ05vZGUuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgaWYgKCFnZXRJc1ZhbGlkVW5pdHlHZW5lcmljVHlwZUFyZyh0eXBlQXJnVHlwZSkpIHtcbiAgICAgICAgICAgICAgICBhZGREaWFnbm9zdGljKFxuICAgICAgICAgICAgICAgICAgICBkaWFnbm9zdGljcyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZUFyZ05vZGUsXG4gICAgICAgICAgICAgICAgICAgIGBUeXBlIGFyZ3VtZW50cyBmb3IgbWV0aG9kICcke21ldGhvZE5hbWV9JyBtdXN0IGJlIFVuaXR5IEFQSSB0eXBlcy5gLFxuICAgICAgICAgICAgICAgICAgICBDVVNUT01fRElBR05PU1RJQ19DT0RFUy5HRU5FUklDX01FVEhPRF9JTlZBTElEX1RZUEVfQVJHVU1FTlRTXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNNYXRjaGluZ05vbkdlbmVyaWNPdmVybG9hZChcbiAgICBtZXRob2REZWNsYXJhdGlvbnM6IE1ldGhvZERlY2xhcmF0aW9uW10sXG4gICAgY2FsbEV4cHI6IENhbGxFeHByZXNzaW9uXG4pOiBib29sZWFuIHtcbiAgICBjb25zdCBjYWxsQXJnVHlwZXMgPSBjYWxsRXhwci5nZXRBcmd1bWVudHMoKS5tYXAoYXJnID0+IGFyZy5nZXRUeXBlKCkpO1xuICAgIGNvbnN0IHR5cGVDaGVja2VyID0gY2FsbEV4cHIuZ2V0UHJvamVjdCgpLmdldFR5cGVDaGVja2VyKCk7XG5cbiAgICByZXR1cm4gbWV0aG9kRGVjbGFyYXRpb25zLnNvbWUoZGVjbCA9PiB7XG4gICAgICAgIGlmIChkZWNsLmdldFR5cGVQYXJhbWV0ZXJzKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJdCdzIGEgZ2VuZXJpYyBtZXRob2RcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBkZWNsLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoICE9PSBjYWxsQXJnVHlwZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb21wYXJlIHBhcmFtZXRlciB0eXBlc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtVHlwZSA9IHBhcmFtZXRlcnNbaV0uZ2V0VHlwZSgpO1xuICAgICAgICAgICAgY29uc3QgYXJnVHlwZSA9IGNhbGxBcmdUeXBlc1tpXTtcblxuICAgICAgICAgICAgaWYgKCF0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8oYXJnVHlwZSwgcGFyYW1UeXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBGb3VuZCBhIG1hdGNoaW5nIG5vbi1nZW5lcmljIG92ZXJsb2FkXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRDb21wb25lbnRUeXBlQXJnKHR5cGVBcmdOb2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdHlwZUFyZ1R5cGUgPSB0eXBlQXJnTm9kZS5nZXRUeXBlKCk7XG5cbiAgICBpZiAoZ2V0SXNWYWxpZFVuaXR5R2VuZXJpY1R5cGVBcmcodHlwZUFyZ1R5cGUpKSB7XG4gICAgICAgIC8vIEl0J3MgYSBVbml0eSBBUEkgdHlwZSwgYWNjZXB0YWJsZVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW5pZXNTY3JpcHRUeXBlID0gZ2V0R2VuaWVzU2NyaXB0VHlwZUZyb21UeXBlKHR5cGVBcmdUeXBlKTtcbiAgICBpZiAoZ2VuaWVzU2NyaXB0VHlwZSA9PT0gR2VuaWVzU2NyaXB0VHlwZS5Nb25vYmVoYXZpb3VyKSB7XG4gICAgICAgIC8vIEl0J3MgYSBNb25vQmVoYXZpb3VyLCBhY2NlcHRhYmxlXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHN5bWJvbCA9IHR5cGVBcmdUeXBlLmdldFN5bWJvbCgpO1xuICAgIGlmIChzeW1ib2wpIHtcbiAgICAgICAgY29uc3QgZGVjbGFyYXRpb25zID0gc3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuICAgICAgICBpZiAoZGVjbGFyYXRpb25zICYmIGRlY2xhcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoTm9kZS5pc0ludGVyZmFjZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uc1swXSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIGFuIGludGVyZmFjZSwgYWNjZXB0YWJsZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBJbnZhbGlkIHR5cGUgYXJndW1lbnRcbn1cblxuZnVuY3Rpb24gZ2V0TWV0aG9kTmFtZShleHByZXNzaW9uOiBOb2RlKTogc3RyaW5nIHtcbiAgICBpZiAoTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSkge1xuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbi5nZXROYW1lKCk7XG4gICAgfSBlbHNlIGlmIChOb2RlLmlzSWRlbnRpZmllcihleHByZXNzaW9uKSkge1xuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbi5nZXRUZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICcnOyAvLyBVbmtub3duXG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGREaWFnbm9zdGljKFxuICAgIGRpYWdub3N0aWNzOiB0cy5EaWFnbm9zdGljW10sXG4gICAgbm9kZTogTm9kZSxcbiAgICBtZXNzYWdlVGV4dDogc3RyaW5nLFxuICAgIGNvZGU6IG51bWJlclxuKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBub2RlLmdldFN0YXJ0KCk7XG4gICAgY29uc3QgbGVuZ3RoID0gbm9kZS5nZXRXaWR0aCgpO1xuICAgIGNvbnN0IGRpYWdub3N0aWM6IHRzLkRpYWdub3N0aWMgPSB7XG4gICAgICAgIGZpbGU6IG5vZGUuZ2V0U291cmNlRmlsZSgpLmNvbXBpbGVyTm9kZSxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgbWVzc2FnZVRleHQ6IG1lc3NhZ2VUZXh0LFxuICAgICAgICBjYXRlZ29yeTogdHMuRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yLFxuICAgICAgICBjb2RlOiBjb2RlLFxuICAgICAgICBzb3VyY2U6ICdHZW5pZXMnLFxuICAgIH07XG4gICAgZGlhZ25vc3RpY3MucHVzaChkaWFnbm9zdGljKTtcbn1cbiIsImltcG9ydCB7XG4gICAgU3ludGF4S2luZCxcbiAgICBOb2RlLFxuICAgIEF3YWl0RXhwcmVzc2lvbixcbiAgICBUeXBlQ2hlY2tlcixcbiAgICBDYWxsRXhwcmVzc2lvbixcbiAgICBUeXBlLFxuICAgIFByb3BlcnR5QWNjZXNzRXhwcmVzc2lvblxufSBmcm9tICd0cy1tb3JwaCc7XG5pbXBvcnQge1RyYW5zZm9ybWF0aW9uQ29udGV4dH0gZnJvbSBcIi4vVHJhbnNmb3JtYXRpb25Db250ZXh0XCI7XG5pbXBvcnQge0lUcmFuc2Zvcm1lcn0gZnJvbSBcIi4vSVRyYW5zZm9ybWVyXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9taXNlV3JhcHBlclRyYW5zZm9ybWVyIGltcGxlbWVudHMgSVRyYW5zZm9ybWVyIHtcbiAgICAvLyBXZSBjYXJlIGFib3V0IEF3YWl0RXhwcmVzc2lvbnMgYW5kIENhbGxFeHByZXNzaW9ucy5cbiAgICBub2RlVHlwZXMgPSBbU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbl07XG4gICAgdHJhbnNmb3JtZXJLZXkgPSBcIlByb21pc2VXcmFwcGVyVHJhbnNmb3JtZXJcIjtcblxuICAgIHRyYW5zZm9ybU5vZGUobm9kZTogTm9kZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0OiBUcmFuc2Zvcm1hdGlvbkNvbnRleHQpOiBOb2RlIHtcbiAgICAgICAgY29uc3QgdHlwZUNoZWNrZXIgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXI7XG4gICAgICAgIGlmIChOb2RlLmlzQ2FsbEV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZSBhcyBDYWxsRXhwcmVzc2lvbjtcblxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGNhbGxFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJvbWlzZSh0eXBlKSAmJiAhdGhpcy5pc1Byb21pc2VQYXJlbnQobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVkVGV4dCA9IHRoaXMud3JhcCh0eXBlLCBjYWxsRXhwcmVzc2lvbi5nZXRUZXh0KCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dCh3cmFwcGVkVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHdyYXAodHlwZTogVHlwZSwgb3JpZ2luYWxUZXh0OiBzdHJpbmcpXG4gICAge1xuICAgICAgICBjb25zdCBhcmdzID0gdHlwZS5nZXRUeXBlQXJndW1lbnRzKCk7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgY2FzdFR5cGUgPSBhcmdzWzBdLmdldFRleHQoKTtcbiAgICAgICAgICAgIHJldHVybiBgJHByb21pc2U8JHtjYXN0VHlwZX0+KCR7b3JpZ2luYWxUZXh0fSlgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBgJHByb21pc2UoJHtvcmlnaW5hbFRleHR9KWA7XG4gICAgfVxuICAgIFxuICAgIC8vIERldGVjdHMgaWYgYSB0eXBlIHJlcHJlc2VudHMgYSBwcm9taXNlLWxpa2UgdmFsdWUuXG4gICAgcHJpdmF0ZSBpc1Byb21pc2UodHlwZTogVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB0eXBlU3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICAgICAgaWYgKCF0eXBlU3ltYm9sKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSB0eXBlU3ltYm9sLmdldE5hbWUoKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHR5cGVOYW1lID09PSAnVGFzaycgfHxcbiAgICAgICAgICAgIHR5cGVOYW1lID09PSAnVGFzayQxJyB8fFxuICAgICAgICAgICAgdHlwZU5hbWUgPT09ICdVbmlUYXNrJyB8fFxuICAgICAgICAgICAgdHlwZU5hbWUgPT09ICdVbmlUYXNrJDEnIHx8XG4gICAgICAgICAgICB0eXBlTmFtZSA9PT0gJ1lpZWxkQXdhaXRhYmxlJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIENoZWNrcyBpZiB0aGUgbWV0aG9kIG5hbWUgaXMgb25lIG9mIHRoZSBjb21tb24gcHJvbWlzZSBtZXRob2RzLlxuICAgIHByaXZhdGUgaXNQcm9taXNlUGFyZW50KG5vZGU6IE5vZGUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5nZXRQYXJlbnQoKTtcbiAgICAgICAgXG4gICAgICAgIGlmKHBhcmVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LmdldFRleHQoKS5zdGFydHNXaXRoKCckcHJvbWlzZSgnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7R2VuaWVzTFNQQ29udGV4dH0gZnJvbSBcIi4vcGx1Z2lucy9HZW5pZXNMU1BDb250ZXh0XCI7XG5pbXBvcnQge1xuICAgIEJpbmFyeUV4cHJlc3Npb24sIENsYXNzRGVjbGFyYXRpb24sXG4gICAgTm9kZSxcbiAgICBQb3N0Zml4VW5hcnlFeHByZXNzaW9uLFxuICAgIFByZWZpeFVuYXJ5RXhwcmVzc2lvbiwgU3ludGF4S2luZCxcbiAgICBUeXBlLCBUeXBlQ2hlY2tlciwgVHlwZUZsYWdzXG59IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHtcbiAgICBnZXRJc1VuaXR5QVBJVHlwZSxcbiAgICB0eXBlc0FyZUVxdWFsXG59IGZyb20gXCIuL0NvbXBpbGVyVXRpbHNcIjtcblxuLy8gTW9kaWZ5IHRvIHJldHVybiB0aGUgdHlwZSBpZiB0aGUgb3BlcmF0b3IgbWV0aG9kIGV4aXN0c1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yTWV0aG9kUmV0dXJuVHlwZSh0eXBlQ2hlY2tlciA6IFR5cGVDaGVja2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvck1ldGhvZE5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHRUeXBlOiBUeXBlKTogVHlwZSB8IG51bGwge1xuICAgIGNvbnN0IHR5cGVTeW1ib2wgPSB0eXBlLmdldFN5bWJvbCgpO1xuICAgIGlmICghdHlwZVN5bWJvbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSB0eXBlU3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuICAgIGZvciAoY29uc3QgZGVjbGFyYXRpb24gb2YgZGVjbGFyYXRpb25zKSB7XG4gICAgICAgIGlmIChOb2RlLmlzQ2xhc3NEZWNsYXJhdGlvbihkZWNsYXJhdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzRGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbiBhcyBDbGFzc0RlY2xhcmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kcyA9IGNsYXNzRGVjbGFyYXRpb24uZ2V0TWV0aG9kcygpLmZpbHRlcihtID0+IG0uZ2V0TmFtZSgpID09PSBvcGVyYXRvck1ldGhvZE5hbWUgJiYgbS5nZXRUeXBlUGFyYW1ldGVycygpLmxlbmd0aCA9PT0gMCk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVmdFBhcmFtZXRlclR5cGUgPSBwYXJhbWV0ZXJzWzBdLmdldFR5cGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmlnaHRQYXJhbWV0ZXJUeXBlID0gcGFyYW1ldGVyc1sxXS5nZXRUeXBlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzUmlnaHRUeXBlID0gdHlwZXNBcmVFcXVhbChyaWdodFBhcmFtZXRlclR5cGUsIHJpZ2h0VHlwZSkgfHwgdHlwZUNoZWNrZXIuaXNUeXBlQXNzaWduYWJsZVRvKHJpZ2h0VHlwZSwgcmlnaHRQYXJhbWV0ZXJUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzTGVmdFR5cGUgPSB0eXBlc0FyZUVxdWFsKGxlZnRQYXJhbWV0ZXJUeXBlLCB0eXBlKSB8fCB0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8odHlwZSwgbGVmdFBhcmFtZXRlclR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNMZWZ0VHlwZSAmJiBoYXNSaWdodFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuZ2V0UmV0dXJuVHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvck1ldGhvZE5hbWUoXG4gICAgb3BlcmF0b3JLaW5kOiBTeW50YXhLaW5kLFxuICAgIGlzVW5hcnk6IGJvb2xlYW4gPSBmYWxzZVxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoaXNVbmFyeSkge1xuICAgICAgICAvLyBIYW5kbGUgdW5hcnkgb3BlcmF0b3JzOlxuICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yS2luZCkge1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLk1pbnVzVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gLWFcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9VbmFyeU5lZ2F0aW9uXCI7XG4gICAgICAgICAgICBjYXNlIFN5bnRheEtpbmQuUGx1c1Rva2VuOlxuICAgICAgICAgICAgICAgIC8vICthXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfVW5hcnlQbHVzXCI7XG4gICAgICAgICAgICBjYXNlIFN5bnRheEtpbmQuRXhjbGFtYXRpb25Ub2tlbjpcbiAgICAgICAgICAgICAgICAvLyAhYVxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9wX0xvZ2ljYWxOb3RcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5UaWxkZVRva2VuOlxuICAgICAgICAgICAgICAgIC8vIH5hXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfT25lc0NvbXBsZW1lbnRcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5QbHVzUGx1c1Rva2VuOlxuICAgICAgICAgICAgICAgIC8vICsrYSBvciBhKytcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9JbmNyZW1lbnRcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5NaW51c01pbnVzVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gLS1hIG9yIGEtLVxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9wX0RlY3JlbWVudFwiO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSGFuZGxlIGJpbmFyeSBvcGVyYXRvcnM6XG4gICAgICAgIHN3aXRjaCAob3BlcmF0b3JLaW5kKSB7XG4gICAgICAgICAgICBjYXNlIFN5bnRheEtpbmQuUGx1c1Rva2VuOlxuICAgICAgICAgICAgICAgIC8vIGEgKyBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfQWRkaXRpb25cIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5NaW51c1Rva2VuOlxuICAgICAgICAgICAgICAgIC8vIGEgLSBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfU3VidHJhY3Rpb25cIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5Bc3Rlcmlza1Rva2VuOlxuICAgICAgICAgICAgICAgIC8vIGEgKiBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfTXVsdGlwbHlcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5TbGFzaFRva2VuOlxuICAgICAgICAgICAgICAgIC8vIGEgLyBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfRGl2aXNpb25cIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5QZXJjZW50VG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSAlIGJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9Nb2R1bHVzXCI7XG4gICAgICAgICAgICBjYXNlIFN5bnRheEtpbmQuRXF1YWxzRXF1YWxzVG9rZW46XG4gICAgICAgICAgICBjYXNlIFN5bnRheEtpbmQuRXF1YWxzRXF1YWxzRXF1YWxzVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSA9PSBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfRXF1YWxpdHlcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5FeGNsYW1hdGlvbkVxdWFsc1Rva2VuOlxuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkV4Y2xhbWF0aW9uRXF1YWxzRXF1YWxzVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSAhPSBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfSW5lcXVhbGl0eVwiO1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkdyZWF0ZXJUaGFuVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSA+IGJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9HcmVhdGVyVGhhblwiO1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkxlc3NUaGFuVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSA8IGJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9MZXNzVGhhblwiO1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkdyZWF0ZXJUaGFuRXF1YWxzVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSA+PSBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfR3JlYXRlclRoYW5PckVxdWFsXCI7XG4gICAgICAgICAgICBjYXNlIFN5bnRheEtpbmQuTGVzc1RoYW5FcXVhbHNUb2tlbjpcbiAgICAgICAgICAgICAgICAvLyBhIDw9IGJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9MZXNzVGhhbk9yRXF1YWxcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5CYXJUb2tlbjpcbiAgICAgICAgICAgICAgICAvLyBhIHwgYlxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9wX0JpdHdpc2VPclwiO1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkFtcGVyc2FuZFRva2VuOlxuICAgICAgICAgICAgICAgIC8vIGEgJiBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfQml0d2lzZUFuZFwiO1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkNhcmV0VG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSBeIGJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9FeGNsdXNpdmVPclwiO1xuICAgICAgICAgICAgY2FzZSBTeW50YXhLaW5kLkxlc3NUaGFuTGVzc1RoYW5Ub2tlbjpcbiAgICAgICAgICAgICAgICAvLyBhIDw8IGJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvcF9MZWZ0U2hpZnRcIjtcbiAgICAgICAgICAgIGNhc2UgU3ludGF4S2luZC5HcmVhdGVyVGhhbkdyZWF0ZXJUaGFuVG9rZW46XG4gICAgICAgICAgICAgICAgLy8gYSA+PiBiXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3BfUmlnaHRTaGlmdFwiO1xuICAgICAgICAgICAgLy8gQWRkIGFkZGl0aW9uYWwgYmluYXJ5IG9wZXJhdG9ycyBpZiBuZWVkZWQuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlOiBOb2RlKTogTm9kZSB7XG4gICAgaWYgKE5vZGUuaXNQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlKSkge1xuICAgICAgICByZXR1cm4gdW53cmFwUGFyZW50aGVzaXplZEV4cHJlc3Npb24obm9kZS5nZXRFeHByZXNzaW9uKCkpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG91bmRBc3NpZ25tZW50KG9wZXJhdG9yS2luZDogU3ludGF4S2luZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBvcGVyYXRvcktpbmQgPj0gU3ludGF4S2luZC5GaXJzdENvbXBvdW5kQXNzaWdubWVudCAmJiBvcGVyYXRvcktpbmQgPD0gU3ludGF4S2luZC5MYXN0Q29tcG91bmRBc3NpZ25tZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQoY29tcG91bmRPcGVyYXRvcktpbmQ6IFN5bnRheEtpbmQpOiBTeW50YXhLaW5kIHtcbiAgICBzd2l0Y2ggKGNvbXBvdW5kT3BlcmF0b3JLaW5kKSB7XG4gICAgICAgIGNhc2UgU3ludGF4S2luZC5QbHVzRXF1YWxzVG9rZW46XG4gICAgICAgICAgICByZXR1cm4gU3ludGF4S2luZC5QbHVzVG9rZW47XG4gICAgICAgIGNhc2UgU3ludGF4S2luZC5NaW51c0VxdWFsc1Rva2VuOlxuICAgICAgICAgICAgcmV0dXJuIFN5bnRheEtpbmQuTWludXNUb2tlbjtcbiAgICAgICAgY2FzZSBTeW50YXhLaW5kLkFzdGVyaXNrRXF1YWxzVG9rZW46XG4gICAgICAgICAgICByZXR1cm4gU3ludGF4S2luZC5Bc3Rlcmlza1Rva2VuO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuU2xhc2hFcXVhbHNUb2tlbjpcbiAgICAgICAgICAgIHJldHVybiBTeW50YXhLaW5kLlNsYXNoVG9rZW47XG4gICAgICAgIGNhc2UgU3ludGF4S2luZC5QZXJjZW50RXF1YWxzVG9rZW46XG4gICAgICAgICAgICByZXR1cm4gU3ludGF4S2luZC5QZXJjZW50VG9rZW47XG4gICAgICAgIGNhc2UgU3ludGF4S2luZC5BbXBlcnNhbmRFcXVhbHNUb2tlbjpcbiAgICAgICAgICAgIHJldHVybiBTeW50YXhLaW5kLkFtcGVyc2FuZFRva2VuO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuQmFyRXF1YWxzVG9rZW46XG4gICAgICAgICAgICByZXR1cm4gU3ludGF4S2luZC5CYXJUb2tlbjtcbiAgICAgICAgY2FzZSBTeW50YXhLaW5kLkNhcmV0RXF1YWxzVG9rZW46XG4gICAgICAgICAgICByZXR1cm4gU3ludGF4S2luZC5DYXJldFRva2VuO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuTGVzc1RoYW5MZXNzVGhhbkVxdWFsc1Rva2VuOlxuICAgICAgICAgICAgcmV0dXJuIFN5bnRheEtpbmQuTGVzc1RoYW5MZXNzVGhhblRva2VuO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuR3JlYXRlclRoYW5HcmVhdGVyVGhhbkVxdWFsc1Rva2VuOlxuICAgICAgICAgICAgcmV0dXJuIFN5bnRheEtpbmQuR3JlYXRlclRoYW5HcmVhdGVyVGhhblRva2VuO1xuICAgICAgICBjYXNlIFN5bnRheEtpbmQuR3JlYXRlclRoYW5HcmVhdGVyVGhhbkdyZWF0ZXJUaGFuRXF1YWxzVG9rZW46XG4gICAgICAgICAgICByZXR1cm4gU3ludGF4S2luZC5HcmVhdGVyVGhhbkdyZWF0ZXJUaGFuR3JlYXRlclRoYW5Ub2tlbjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY29tcG91bmQgb3BlcmF0b3I6ICR7U3ludGF4S2luZFtjb21wb3VuZE9wZXJhdG9yS2luZF19YCk7XG4gICAgfVxufVxuXG4vLyBNb2RpZnkgdG8gcmV0dXJuIHRoZSB0eXBlIGlmIHRoZSB1bmFyeSBvcGVyYXRvciBtZXRob2QgZXhpc3RzXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5hcnlPcGVyYXRvck1ldGhvZFJldHVyblR5cGUodHlwZTogVHlwZSwgb3BlcmF0b3JNZXRob2ROYW1lOiBzdHJpbmcpOiBUeXBlIHwgbnVsbCB7XG4gICAgY29uc3QgdHlwZVN5bWJvbCA9IHR5cGUuZ2V0U3ltYm9sKCk7XG4gICAgaWYgKCF0eXBlU3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IHR5cGVTeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgZm9yIChjb25zdCBkZWNsYXJhdGlvbiBvZiBkZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgaWYgKE5vZGUuaXNDbGFzc0RlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgY2xhc3NEZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uIGFzIENsYXNzRGVjbGFyYXRpb247XG4gICAgICAgICAgICBjb25zdCBtZXRob2RzID0gY2xhc3NEZWNsYXJhdGlvbi5nZXRNZXRob2RzKCkuZmlsdGVyKG0gPT4gbS5nZXROYW1lKCkgPT09IG9wZXJhdG9yTWV0aG9kTmFtZSAmJiBtLmdldFR5cGVQYXJhbWV0ZXJzKCkubGVuZ3RoID09PSAwKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBtZXRob2Qgb2YgbWV0aG9kcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBtZXRob2QuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVyYW5kVHlwZSA9IHBhcmFtZXRlcnNbMF0uZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmFuZFR5cGUuZ2V0VGV4dCgpID09PSB0eXBlLmdldFRleHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5nZXRSZXR1cm5UeXBlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yTm9kZVJldHVyblR5cGUobm9kZTogTm9kZSwgY29udGV4dDogR2VuaWVzTFNQQ29udGV4dCk6IFR5cGUgfCBudWxsIHtcbiAgICBpZiAoTm9kZS5pc0JpbmFyeUV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGdldEJpbmFyeU9wZXJhdG9yTm9kZVJldHVyblR5cGUobm9kZSwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChOb2RlLmlzUHJlZml4VW5hcnlFeHByZXNzaW9uKG5vZGUpIHx8IE5vZGUuaXNQb3N0Zml4VW5hcnlFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBnZXRVbmFyeU9wZXJhdG9yTm9kZVJldHVyblR5cGUobm9kZSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHVud3JhcFR5cGUobm9kZTogTm9kZSwgY29udGV4dDogR2VuaWVzTFNQQ29udGV4dCk6IFR5cGUgfCBudWxsIHtcblxuICAgIGlmIChOb2RlLmlzQmluYXJ5RXhwcmVzc2lvbihub2RlKSkge1xuICAgICAgICByZXR1cm4gZ2V0QmluYXJ5T3BlcmF0b3JOb2RlUmV0dXJuVHlwZShub2RlLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKE5vZGUuaXNQcmVmaXhVbmFyeUV4cHJlc3Npb24obm9kZSkgfHwgTm9kZS5pc1Bvc3RmaXhVbmFyeUV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGdldFVuYXJ5T3BlcmF0b3JOb2RlUmV0dXJuVHlwZShub2RlLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dC5UeXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihub2RlKTtcbn1cblxuZnVuY3Rpb24gZ2V0QmluYXJ5T3BlcmF0b3JOb2RlUmV0dXJuVHlwZShub2RlOiBCaW5hcnlFeHByZXNzaW9uLCBjb250ZXh0OiBHZW5pZXNMU1BDb250ZXh0KTogVHlwZSB8IG51bGwge1xuICAgIGNvbnN0IG9wZXJhdG9yVG9rZW4gPSBub2RlLmdldE9wZXJhdG9yVG9rZW4oKTtcbiAgICBjb25zdCBvcGVyYXRvcktpbmQgPSBvcGVyYXRvclRva2VuLmdldEtpbmQoKTtcbiAgICBsZXQgb3BlcmF0b3JNZXRob2ROYW1lID0gZ2V0T3BlcmF0b3JNZXRob2ROYW1lKG9wZXJhdG9yS2luZCk7XG5cbiAgICBpZiAoaXNDb21wb3VuZEFzc2lnbm1lbnQob3BlcmF0b3JLaW5kKSkge1xuICAgICAgICBjb25zdCBlcXVpdmFsZW50T3BlcmF0b3JLaW5kID0gZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQob3BlcmF0b3JLaW5kKTtcbiAgICAgICAgb3BlcmF0b3JNZXRob2ROYW1lID0gZ2V0T3BlcmF0b3JNZXRob2ROYW1lKGVxdWl2YWxlbnRPcGVyYXRvcktpbmQpO1xuICAgIH1cblxuICAgIGlmIChvcGVyYXRvck1ldGhvZE5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgdHJhbnNmb3JtYXRpb25zIGZvciAnPT0gbnVsbCcgYW5kICc9PSB1bmRlZmluZWQnXG4gICAgaWYgKG9wZXJhdG9yS2luZCA9PT0gU3ludGF4S2luZC5FcXVhbHNFcXVhbHNFcXVhbHNUb2tlblxuICAgICAgICB8fCBvcGVyYXRvcktpbmQgPT09IFN5bnRheEtpbmQuRXF1YWxzRXF1YWxzVG9rZW5cbiAgICAgICAgfHwgb3BlcmF0b3JLaW5kID09PSBTeW50YXhLaW5kLkV4Y2xhbWF0aW9uRXF1YWxzRXF1YWxzVG9rZW5cbiAgICAgICAgfHwgb3BlcmF0b3JLaW5kID09IFN5bnRheEtpbmQuRXhjbGFtYXRpb25FcXVhbHNUb2tlbikge1xuICAgICAgICBjb25zdCByaWdodCA9IHVud3JhcFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKG5vZGUuZ2V0UmlnaHQoKSk7XG4gICAgICAgIGlmIChOb2RlLmlzTnVsbExpdGVyYWwocmlnaHQpIHx8IE5vZGUuaXNVbmRlZmluZWRLZXl3b3JkKHJpZ2h0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsZWZ0ID0gdW53cmFwUGFyZW50aGVzaXplZEV4cHJlc3Npb24obm9kZS5nZXRMZWZ0KCkpO1xuICAgICAgICBpZiAoTm9kZS5pc051bGxMaXRlcmFsKGxlZnQpIHx8IE5vZGUuaXNVbmRlZmluZWRLZXl3b3JkKGxlZnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGxlZnQgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlLmdldExlZnQoKSk7XG4gICAgY29uc3QgcmlnaHQgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlLmdldFJpZ2h0KCkpO1xuXG4gICAgbGV0IGxlZnRUeXBlID0gdW53cmFwVHlwZShsZWZ0LCBjb250ZXh0KTtcbiAgICBsZXQgcmlnaHRUeXBlID0gdW53cmFwVHlwZShyaWdodCwgY29udGV4dCk7XG5cbiAgICBpZiAobGVmdFR5cGUgPT0gbnVsbCB8fCByaWdodFR5cGUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocmlnaHRUeXBlLmlzTGl0ZXJhbCgpKSB7XG4gICAgICAgIHJpZ2h0VHlwZSA9IGNvbnRleHQuVHlwZUNoZWNrZXIuZ2V0QmFzZVR5cGVPZkxpdGVyYWxUeXBlKHJpZ2h0VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGxlZnRUeXBlLmlzTGl0ZXJhbCgpKSB7XG4gICAgICAgIGxlZnRUeXBlID0gY29udGV4dC5UeXBlQ2hlY2tlci5nZXRCYXNlVHlwZU9mTGl0ZXJhbFR5cGUobGVmdFR5cGUpO1xuICAgIH1cblxuICAgIGlmICghZ2V0SXNVbml0eUFQSVR5cGUobGVmdFR5cGUpICYmICFnZXRJc1VuaXR5QVBJVHlwZShyaWdodFR5cGUpKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LlR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKG5vZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IGxlZnRSZXR1cm5UeXBlID0gZ2V0T3BlcmF0b3JNZXRob2RSZXR1cm5UeXBlKGNvbnRleHQuVHlwZUNoZWNrZXIsIGxlZnRUeXBlLCBvcGVyYXRvck1ldGhvZE5hbWUsIHJpZ2h0VHlwZSk7XG4gICAgY29uc3QgcmlnaHRSZXR1cm5UeXBlID0gZ2V0T3BlcmF0b3JNZXRob2RSZXR1cm5UeXBlKGNvbnRleHQuVHlwZUNoZWNrZXIsIHJpZ2h0VHlwZSwgb3BlcmF0b3JNZXRob2ROYW1lLCBsZWZ0VHlwZSk7XG5cbiAgICBpZiAobGVmdFJldHVyblR5cGUgPT0gbnVsbCAmJiByaWdodFJldHVyblR5cGUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcG91bmQgYXNzaWdubWVudHMgKCs9LCAtPSwgZXRjLilcbiAgICBpZiAoaXNDb21wb3VuZEFzc2lnbm1lbnQob3BlcmF0b3JLaW5kKSkge1xuICAgICAgICBjb25zdCBlcXVpdmFsZW50T3BlcmF0b3JLaW5kID0gZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQob3BlcmF0b3JLaW5kKTtcbiAgICAgICAgY29uc3QgZXF1aXZhbGVudE9wZXJhdG9yTWV0aG9kTmFtZSA9IGdldE9wZXJhdG9yTWV0aG9kTmFtZShlcXVpdmFsZW50T3BlcmF0b3JLaW5kKTtcblxuICAgICAgICBpZiAoZXF1aXZhbGVudE9wZXJhdG9yTWV0aG9kTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRPcGVyYXRvck1ldGhvZFJldHVyblR5cGUoY29udGV4dC5UeXBlQ2hlY2tlciwgbGVmdFR5cGUsIGVxdWl2YWxlbnRPcGVyYXRvck1ldGhvZE5hbWUsIHJpZ2h0VHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlZnRSZXR1cm5UeXBlID8/IHJpZ2h0UmV0dXJuVHlwZTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5hcnlPcGVyYXRvck5vZGVSZXR1cm5UeXBlKG5vZGU6IFByZWZpeFVuYXJ5RXhwcmVzc2lvbiB8IFBvc3RmaXhVbmFyeUV4cHJlc3Npb24sIGNvbnRleHQ6IEdlbmllc0xTUENvbnRleHQpOiBUeXBlIHwgbnVsbCB7XG4gICAgY29uc3Qgb3BlcmFuZCA9IHVud3JhcFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKG5vZGUuZ2V0T3BlcmFuZCgpKTtcbiAgICBjb25zdCBvcGVyYXRvcktpbmQgPSBub2RlLmdldE9wZXJhdG9yVG9rZW4oKTtcbiAgICBjb25zdCBvcGVyYXRvck1ldGhvZE5hbWUgPSBnZXRPcGVyYXRvck1ldGhvZE5hbWUob3BlcmF0b3JLaW5kLCB0cnVlKTtcblxuICAgIGlmIChvcGVyYXRvck1ldGhvZE5hbWUpIHtcbiAgICAgICAgY29uc3Qgb3BlcmFuZFR5cGUgPSBjb250ZXh0LlR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKG9wZXJhbmQpO1xuICAgICAgICByZXR1cm4gZ2V0VW5hcnlPcGVyYXRvck1ldGhvZFJldHVyblR5cGUob3BlcmFuZFR5cGUsIG9wZXJhdG9yTWV0aG9kTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQge1xuICAgIGNvbnZlcnRUb0dlbmllc0FsaWFzUGF0aCxcbiAgICBleHRlbmRzTW9ub0JlaGF2aW91cixcbiAgICBleHRlbmRzU2NyaXB0YWJsZU9iamVjdCxcbiAgICBleHRyYWN0UHJvcGVydGllcyxcbiAgICBGaWxlQ29tcGlsZU91dHB1dCxcbiAgICBHZW5pZXNTY3JpcHRVaUV2ZW50cywgZ2V0Q29tcGxldGVUeXBlQXJndW1lbnRNYXAsXG4gICAgZ2V0RnVsbFR5cGVOYW1lLFxuICAgIE1vbm9iZWhhdmlvdXJUeXBlTmFtZSxcbiAgICBQcm9wZXJ0eUluZm8sXG4gICAgcmVtb3ZlRGVjb3JhdG9ycyxcbiAgICBTY3JpcHRhYmxlT2JqZWN0VHlwZU5hbWUsXG4gICAgc2V0UHJvamVjdFJvb3QsXG4gICAgc29ydEltcG9ydHNBbmRWYXJzLFxuICAgIHRyYXZlcnNlUG9zdE9yZGVyLFxuICAgIHRyYXZlcnNlUHJvdG90eXBlQ2hhaW4sXG4gICAgVWlJbnRlcmZhY2VUb0VudW1NYXAsXG4gICAgdXBkYXRlSW1wb3J0c1RvQWxpYXNQYXRoc1xufSBmcm9tIFwiLi4vQ29tcGlsZXJVdGlsc1wiO1xuXG5pbXBvcnQge0RpYWdub3N0aWNNZXNzYWdlQ2hhaW4sIGZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHR9IGZyb20gXCJ0eXBlc2NyaXB0XCI7XG5pbXBvcnQge0NsYXNzRGVjbGFyYXRpb24sIE5vZGUsIFByb2plY3QsIFNvdXJjZUZpbGUsIFN5bnRheEtpbmQsIFR5cGUsfSBmcm9tIFwidHMtbW9ycGhcIjtcbmltcG9ydCB7UHJvbWlzZVdyYXBwZXJUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9Qcm9taXNlV3JhcHBlclRyYW5zZm9ybWVyXCI7XG5pbXBvcnQge0NvbXBvbmVudENhbGxUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9Db21wb25lbnRDYWxsVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7UmVmVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvUmVmVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7R2VuZXJpY1R5cGVUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9HZW5lcmljVHlwZVRyYW5zZm9ybWVyXCI7XG5pbXBvcnQge0dlbmVyaWNNZXRob2RUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9HZW5lcmljTWV0aG9kVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7RXh0ZW5zaW9uTWV0aG9kVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvRXh0ZW5zaW9uTWV0aG9kVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7VHJhbnNmb3JtYXRpb25Db250ZXh0fSBmcm9tIFwiLi4vdHJhbnNmb3JtZXJzL1RyYW5zZm9ybWF0aW9uQ29udGV4dFwiO1xuaW1wb3J0IHtJVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvSVRyYW5zZm9ybWVyXCI7XG5pbXBvcnQge0dlbmllc0luc3RhbmNlVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvR2VuaWVzSW5zdGFuY2VUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtTY3JpcHRhYmxlT2JqZWN0Q3JlYXRlSW5zdGFuY2VUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9TY3JpcHRhYmxlT2JqZWN0Q3JlYXRlSW5zdGFuY2VUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtPcGVyYXRvck92ZXJsb2FkaW5nVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvT3BlcmF0b3JPdmVybG9hZGluZ1RyYW5zZm9ybWVyXCI7XG5pbXBvcnQge0V2ZW50Q29udGV4dFRyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtZXJzL0V2ZW50Q29udGV4dFRyYW5zZm9ybWVyXCI7XG5pbXBvcnQge2dldEdlbmllc1NlbWFudGljRGlhZ25vc3RpY3N9IGZyb20gXCIuLi9HZW5pZXNEaWFnbm9zdGljc1V0aWxzXCI7XG5pbXBvcnQge0RlbGVnYXRlVG9BcnJvd0Z1bmN0aW9uVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvRGVsZWdhdGVUb0Fycm93RnVuY3Rpb25UcmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtOdW1lcmljT3ZlcmxvYWRSZXNvbHV0aW9uVHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1lcnMvTnVtZXJpY092ZXJsb2FkUmVzb2x1dGlvblRyYW5zZm9ybWVyXCI7XG5pbXBvcnQge0JyYWNrZXRBY2Nlc3NUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9CcmFja2V0QWNjZXNzVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7Q1NoYXJwRXZlbnRUcmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9DU2hhcnBFdmVudFRyYW5zZm9ybWVyXCI7XG5pbXBvcnQgTWFnaWNTdHJpbmcgZnJvbSBcIm1hZ2ljLXN0cmluZ1wiO1xuaW1wb3J0IHtkaWZmX21hdGNoX3BhdGNofSBmcm9tIFwiZGlmZi1tYXRjaC1wYXRjaFwiO1xuaW1wb3J0IHJlbWFwcGluZyBmcm9tIFwiQGFtcHByb2plY3QvcmVtYXBwaW5nXCI7XG5pbXBvcnQge1xuICAgIE9iamVjdEluc3RhbnRpYXRlVHJhbnNmb3JtZXJcbn0gZnJvbSBcIi4uL3RyYW5zZm9ybWVycy9PYmplY3RJbnN0YW50aWF0ZVRyYW5zZm9ybWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbmllc1RyYW5zcGlsZXIge1xuICAgIHByaXZhdGUgcHJvamVjdDogUHJvamVjdDtcbiAgICBwcml2YXRlIHJvb3REaXJlY3Rvcnk6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyYW5zZm9ybWVyczogeyBwaGFzZTogbnVtYmVyLCB0cmFuc2Zvcm1lcjogSVRyYW5zZm9ybWVyIH1bXTtcbiAgICBwcml2YXRlIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IodHNDb25maWdQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gbmV3IFByb2plY3Qoe1xuICAgICAgICAgICAgdHNDb25maWdGaWxlUGF0aDogdHNDb25maWdQYXRoLFxuICAgICAgICAgICAgc2tpcEFkZGluZ0ZpbGVzRnJvbVRzQ29uZmlnOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJvb3REaXJlY3RvcnkgPSBwYXRoLmRpcm5hbWUodHNDb25maWdQYXRoKTtcbiAgICAgICAgY29uc3QgdHlwZUNoZWNrZXIgPSB0aGlzLnByb2plY3QuZ2V0VHlwZUNoZWNrZXIoKTtcbiAgICAgICAgLy9HbG9iYWxseSBzZXQgZm9yIG90aGVyIHV0aWxzL3RyYW5zZm9ybWVyc1xuICAgICAgICBzZXRQcm9qZWN0Um9vdCh0aGlzLnJvb3REaXJlY3RvcnkpO1xuXG4gICAgICAgIHRoaXMudHJhbnNmb3JtYXRpb25Db250ZXh0ID0gbmV3IFRyYW5zZm9ybWF0aW9uQ29udGV4dCh0eXBlQ2hlY2tlcik7XG5cbiAgICAgICAgLy9FYWNoIHBoYXNlIGlzIGVzc2VudGlhbGx5IGEgZnVsbCByZS1sb29wIG9mIHRoZSBBU1RcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1lcnMgPSBbXG4gICAgICAgICAgICAvL0FsbG93cyBhd2FpdGluZyB0YXNrIGFuZCB1bml0YXNrXG4gICAgICAgICAgICAvL1J1biBmaXJzdCBiZWNhdXNlIHdyYXBwaW5nIHdpbGwgdXN1YWxseSBjcmVhdGUgYW4gaW5maW5pdGUgbG9vcCBhcyB0aGUgQ2FsbEV4cHJlc3Npb24gaXMgcmVjaGVja2VkXG4gICAgICAgICAgICAvL3dpdGhvdXQgY2hlY2tpbmcgdGhlIHBhcmVudC5cbiAgICAgICAgICAgIHtwaGFzZTogMCwgdHJhbnNmb3JtZXI6IG5ldyBQcm9taXNlV3JhcHBlclRyYW5zZm9ybWVyKCl9LFxuXG4gICAgICAgICAgICAvL1JlcGxhY2VzIHBsYWNlaG9sZGVyIENTaGFycEV2ZW50IGNhbGxzIHdpdGggdGhlIGFjdHVhbCBhZGQgYW5kIHJlbW92ZSBtZXRob2RzLlxuICAgICAgICAgICAge3BoYXNlOiAxLCB0cmFuc2Zvcm1lcjogbmV3IENTaGFycEV2ZW50VHJhbnNmb3JtZXIoKX0sXG5cbiAgICAgICAgICAgIC8vQWxsb3dzIHVzaW5nICRyZWYudmFsdWVcbiAgICAgICAgICAgIHtwaGFzZTogMSwgdHJhbnNmb3JtZXI6IG5ldyBSZWZUcmFuc2Zvcm1lcigpfSxcblxuICAgICAgICAgICAgLy9BbGxvd3MgcGFzcyBjb250ZXh0IHRvIGdlbmllcyBldmVudC9zaWduYWwgYnVzXG4gICAgICAgICAgICB7cGhhc2U6IDEsIHRyYW5zZm9ybWVyOiBuZXcgRXZlbnRDb250ZXh0VHJhbnNmb3JtZXIoKX0sXG5cbiAgICAgICAgICAgIC8vSWYgcGFzc2luZyBhIGZ1bmN0aW9uIHRvIGEgZGVsZWdhdGUsIGNvbnZlcnQgdG8gYW4gYXJyb3cgZnVuY3Rpb24gdG8gcHJlc2VydmUgXG4gICAgICAgICAgICAvL3RoZSBjb250ZXh0XG4gICAgICAgICAgICB7cGhhc2U6IDEsIHRyYW5zZm9ybWVyOiBuZXcgRGVsZWdhdGVUb0Fycm93RnVuY3Rpb25UcmFuc2Zvcm1lcigpfSxcblxuICAgICAgICAgICAgLy9Gb3IgcmVwbGFjaW5nIGJyYWNrZXQgYWNjZXNzIGZvciBpbmRleGVycyBhbmQgcmVwbGFjaW5nIHRoZW0gd2l0aCBnZXRfaXRlbSBhbmQgc2V0X2l0ZW1cbiAgICAgICAgICAgIHtwaGFzZTogMSwgdHJhbnNmb3JtZXI6IG5ldyBCcmFja2V0QWNjZXNzVHJhbnNmb3JtZXIoKX0sXG5cbiAgICAgICAgICAgIC8vRW5zdXJlIEluc3RhbnRpYXRlIGFsd2F5cyB1c2UgdGhlIG5vbiBnZW5lcmljIG92ZXJsb2FkXG4gICAgICAgICAgICB7cGhhc2U6IDEsIHRyYW5zZm9ybWVyOiBuZXcgT2JqZWN0SW5zdGFudGlhdGVUcmFuc2Zvcm1lcigpfSxcblxuICAgICAgICAgICAgLy9FbnN1cmUgd2UgYXJlIGhhbmRsaW5nIGdlbmVyaWMgY29tcG9uZW50IGNhbGxzIHRvIHRoZWlyIG92ZXJsb2Fkc1xuICAgICAgICAgICAge3BoYXNlOiAxLCB0cmFuc2Zvcm1lcjogbmV3IENvbXBvbmVudENhbGxUcmFuc2Zvcm1lcigpfSxcblxuICAgICAgICAgICAgLy9FbnN1cmUgd2UgYXJlIGhhbmRsaW5nIGdlbmVyaWMgY29tcG9uZW50IGNhbGxzIHRvIHRoZWlyIG92ZXJsb2Fkc1xuICAgICAgICAgICAge3BoYXNlOiAxLCB0cmFuc2Zvcm1lcjogbmV3IFNjcmlwdGFibGVPYmplY3RDcmVhdGVJbnN0YW5jZVRyYW5zZm9ybWVyKCl9LFxuXG4gICAgICAgICAgICAvL0Vuc3VyZSB3ZSBhcmUgdHJhbnNmb3JtaW5nIGdlbmVyaWMgZXh0ZW5zaW9ucyBtZXRob2RzIHRvIHVzZSB0aGUgZGVjbGFyaW5nIHR5cGUgaW5zdGVhZC5cbiAgICAgICAgICAgIHtwaGFzZTogMSwgdHJhbnNmb3JtZXI6IG5ldyBFeHRlbnNpb25NZXRob2RUcmFuc2Zvcm1lcigpfSxcblxuICAgICAgICAgICAgLy9XaGVuIHBhc3NpbmcgVFMgTW9ub2JlaGF2aW91ciBvciBTY3JpcHRhYmxlT2JqZWN0IHRvIHVuaXR5IEFQSSB3ZSB3aWxsIHJlcGxhY2VcbiAgICAgICAgICAgIC8vV2l0aCBfX2dlbmllc0luc3RhbmNlX18gd2hpY2ggaXMgcHJveGllZCB0byB0aGUgYWN0dWFsIGNvbXBvbmVudC4gRXg6IERlc3Ryb3kodGhpcyk7XG4gICAgICAgICAgICB7cGhhc2U6IDEsIHRyYW5zZm9ybWVyOiBuZXcgR2VuaWVzSW5zdGFuY2VUcmFuc2Zvcm1lcigpfSxcblxuICAgICAgICAgICAgLy9FbnN1cmUgYWxsIGdlbmVyaWMgdHlwZXMgYXJlIGhhbmRsZWQgYmVmb3JlIHdlIGNyZWF0ZSBnZW5lcmljIG1ldGhvZHNcbiAgICAgICAgICAgIHtwaGFzZTogMiwgdHJhbnNmb3JtZXI6IG5ldyBHZW5lcmljVHlwZVRyYW5zZm9ybWVyKCl9LFxuXG4gICAgICAgICAgICAvL0hhbmRsZSBvcGVyYXRvciBvdmVybG9hZGluZyBieSBjYWxsaW5nIHRoZSBjb3JyZWN0IG1ldGhvZC5cbiAgICAgICAgICAgIHtwaGFzZTogMywgdHJhbnNmb3JtZXI6IG5ldyBPcGVyYXRvck92ZXJsb2FkaW5nVHJhbnNmb3JtZXIoKX0sXG5cbiAgICAgICAgICAgIC8vRW5zdXJlIHdlIGFyZSB0cmFuc2Zvcm1pbmcgZ2VuZXJpYyBleHRlbnNpb25zIG1ldGhvZHMgdG8gdXNlIHRoZSBkZWNsYXJpbmcgdHlwZSBpbnN0ZWFkLlxuICAgICAgICAgICAgLy9OT1RFOiBUaGlzIHNob3VsZCBoYXBwZW4gcmlnaHQgYmVmb3JlIGdlbmVyaWMgbWV0aG9kIHRyYW5zZm9ybWVyIGFuZCBhZnRlciBvdGhlcnMgc2luY2UgXG4gICAgICAgICAgICAvL2l0IGhhcyBpbmZvIGFib3V0IHRoZSBnZW5lcmljIG1ldGhvZCB0cmFuc2Zvcm1hdGlvbnMgYW5kIHRoYXQgaW5mbyBpcyBzdG9yZWQgd2l0aCB0aGUgXG4gICAgICAgICAgICAvL2NhbGwgbm9kZSBhcyBhIGtleSBzbyB0aGlzIHdpbGwgYXZvaWQgYW55IGtleXMgYnJlYWtpbmcgYmVjYXVzZSB0aGUgbm9kZSBnb3QgdHJhbnNmb3JtZWQuXG4gICAgICAgICAgICB7cGhhc2U6IDQsIHRyYW5zZm9ybWVyOiBuZXcgTnVtZXJpY092ZXJsb2FkUmVzb2x1dGlvblRyYW5zZm9ybWVyKCl9LFxuXG4gICAgICAgICAgICAvL1RyYW5zZm9ybXMgZ2VuZXJpYyBtZXRob2QgY2FsbHMgdG8gYmUgY2FsbGVkIGNvcnJlY3RseSBvbiB0aGUgQyMgc2lkZS5cbiAgICAgICAgICAgIHtwaGFzZTogNSwgdHJhbnNmb3JtZXI6IG5ldyBHZW5lcmljTWV0aG9kVHJhbnNmb3JtZXIoKX0sXG5cbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcGlsZShmaWxlc1RvQ29tcGlsZTogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgcHJvamVjdEZpbGVzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICBtb3ZlZEZpbGVzPzogeyBvbGRQYXRoOiBzdHJpbmc7IG5ld1BhdGg6IHN0cmluZyB9W10pOiBzdHJpbmcge1xuXG4gICAgICAgIC8vIExvYWQgc291cmNlIGZpbGVzIGludG8gdGhlIHByb2plY3RcbiAgICAgICAgdGhpcy5wcm9qZWN0LmFkZFNvdXJjZUZpbGVzQXRQYXRocyhmaWxlc1RvQ29tcGlsZSk7XG4gICAgICAgIHRoaXMucHJvamVjdC5hZGRTb3VyY2VGaWxlc0F0UGF0aHMocHJvamVjdEZpbGVzKTtcblxuICAgICAgICAvLyAyLiBGaXggcmVmZXJlbmNlcyBiZWZvcmUgY29sbGVjdGluZy90cmFuc2Zvcm1pbmdcbiAgICAgICAgaWYgKG1vdmVkRmlsZXMgJiYgbW92ZWRGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmZpeFJlZmVyZW5jZXMobW92ZWRGaWxlcywgdGhpcy5yb290RGlyZWN0b3J5KTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdC5zYXZlU3luYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbGxlY3RlZEZpbGVzOiBTZXQ8U291cmNlRmlsZT4gPSBuZXcgU2V0PFNvdXJjZUZpbGU+KCk7XG4gICAgICAgIGxldCBwcm9jZXNzZWQ6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgIGxldCBkZXBlbmRlbmN5R3JhcGg6IE1hcDxTb3VyY2VGaWxlLCBTZXQ8U291cmNlRmlsZT4+ID0gbmV3IE1hcDxTb3VyY2VGaWxlLCBTZXQ8U291cmNlRmlsZT4+KCk7XG5cbiAgICAgICAgLy8gU3RhcnQgY29sbGVjdGluZyBmcm9tIGluaXRpYWwgZmlsZSBwYXRoc1xuICAgICAgICBmaWxlc1RvQ29tcGlsZS5mb3JFYWNoKGZpbGVQYXRoID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSB0aGlzLnByb2plY3QuZ2V0U291cmNlRmlsZU9yVGhyb3coZmlsZVBhdGgpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3RGaWxlcyhzb3VyY2VGaWxlLCBjb2xsZWN0ZWRGaWxlcywgcHJvY2Vzc2VkLCBkZXBlbmRlbmN5R3JhcGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUb3BvbG9naWNhbCBzb3J0XG4gICAgICAgIGNvbnN0IHNvcnRlZEZpbGVzID0gdGhpcy50b3BvbG9naWNhbFNvcnQoQXJyYXkuZnJvbShjb2xsZWN0ZWRGaWxlcyksIGRlcGVuZGVuY3lHcmFwaCk7XG5cbiAgICAgICAgLy9Jbml0aWFsaXplIHRyYW5zZm9ybWVkIGNvZGUgbWFwXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkQ29kZU1hcCA9IG5ldyBNYXA8U291cmNlRmlsZSwgTWFnaWNTdHJpbmc+KCk7XG5cbiAgICAgICAgbGV0IG91dHB1dHM6IE1hcDxTb3VyY2VGaWxlLCBGaWxlQ29tcGlsZU91dHB1dD4gPSBuZXcgTWFwPFNvdXJjZUZpbGUsIEZpbGVDb21waWxlT3V0cHV0PigpO1xuXG4gICAgICAgIC8vUHJlcHJvY2VzcyBzb3VyY2UgZmlsZXNcbiAgICAgICAgc29ydGVkRmlsZXMuZm9yRWFjaChzID0+IHtcblxuICAgICAgICAgICAgLy9TdGFydCB3aXRoIHRoZSBvcmlnaW4gdGV4dC5cbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1lZENvZGUgPSBuZXcgTWFnaWNTdHJpbmcocy5nZXRGdWxsVGV4dCgpKTtcblxuICAgICAgICAgICAgLy9QcmUtZW1pdCwgZW5zdXJlIHNvdXJjZSBmaWxlcyBoYXZlIGNvcnJlY3QgZXhwb3J0cyBhbmQgc2F2ZVxuICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0RXhwb3J0KHMpO1xuICAgICAgICAgICAgdXBkYXRlSW1wb3J0c1RvQWxpYXNQYXRocyhzKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUNvbXBpbGVPdXRwdXQob3V0cHV0cywgcyk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy9NYXAgdHMgb3JpZ2luIDw+IHRyYW5zZm9ybWVkIHRzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybWF0aW9uRGlmZnModHJhbnNmb3JtZWRDb2RlLCBzKTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZENvZGVNYXAuc2V0KHMsIHRyYW5zZm9ybWVkQ29kZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy9pZiBmYWlsZWQgbG9nIGFuZCBjb250aW51ZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvcnRlZEZpbGVzLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQob3V0cHV0cywgdHJhbnNmb3JtZWRDb2RlTWFwLCBzKTtcbiAgICAgICAgfSlcblxuICAgICAgICBsZXQganNvbiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG91dHB1dHM6IFsuLi5vdXRwdXRzLnZhbHVlcygpXVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhqc29uKTtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXREZWZhdWx0RXhwb3J0KHNvdXJjZUZpbGU6IFNvdXJjZUZpbGUpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBhbHJlYWR5IGEgc3VpdGFibGUgZGVmYXVsdCBleHBvcnRcbiAgICAgICAgY29uc3QgZGVmYXVsdEV4cG9ydFN5bWJvbCA9IHNvdXJjZUZpbGUuZ2V0RGVmYXVsdEV4cG9ydFN5bWJvbCgpXG4gICAgICAgIGxldCBkZWZhdWx0RXhwb3J0ZWRDbGFzcyA9IG51bGw7XG4gICAgICAgIGlmIChkZWZhdWx0RXhwb3J0U3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBkZWZhdWx0RXhwb3J0U3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuICAgICAgICAgICAgZGVmYXVsdEV4cG9ydGVkQ2xhc3MgPSBkZWNsYXJhdGlvbnMuZmluZChkZWNsID0+IGRlY2wuZ2V0S2luZCgpID09PSBTeW50YXhLaW5kLkNsYXNzRGVjbGFyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmF1bHRFeHBvcnRlZENsYXNzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjsgIC8vIEV4aXQgdGhlIGZ1bmN0aW9uIGVhcmx5XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBubyBzdWl0YWJsZSBkZWZhdWx0IGV4cG9ydCwgbW9kaWZ5IGNsYXNzZXMgYXMgbmVlZGVkXG4gICAgICAgIGZvciAoY29uc3QgY2xzIG9mIHNvdXJjZUZpbGUuZ2V0Q2xhc3NlcygpKSB7XG4gICAgICAgICAgICBpZiAoZXh0ZW5kc01vbm9CZWhhdmlvdXIoY2xzKSB8fCBleHRlbmRzU2NyaXB0YWJsZU9iamVjdChjbHMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNEZWZhdWx0RXhwb3J0ZWQgPSBjbHMuaXNEZWZhdWx0RXhwb3J0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0RlZmF1bHRFeHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjbHMuc2V0SXNEZWZhdWx0RXhwb3J0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZpeFJlZmVyZW5jZXMobW92ZWRGaWxlczogeyBvbGRQYXRoOiBzdHJpbmc7IG5ld1BhdGg6IHN0cmluZyB9W10sIHByb2plY3RSb290OiBzdHJpbmcpIHtcbiAgICAgICAgLy8gMSkgQnVpbGQgbWFwIG9mIG9sZEFic1BhdGggLT4gbmV3QWJzUGF0aFxuICAgICAgICBjb25zdCBtb3ZlZE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgICAgIGZvciAoY29uc3Qge29sZFBhdGgsIG5ld1BhdGh9IG9mIG1vdmVkRmlsZXMpIHtcbiAgICAgICAgICAgIG1vdmVkTWFwLnNldChwYXRoLnJlc29sdmUob2xkUGF0aCksIHBhdGgucmVzb2x2ZShuZXdQYXRoKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAyKSBGb3IgZWFjaCBzb3VyY2UgZmlsZSBpbiB0aGUgcHJvamVjdC4uLlxuICAgICAgICBmb3IgKGNvbnN0IHNmIG9mIHRoaXMucHJvamVjdC5nZXRTb3VyY2VGaWxlcygpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGltcCBvZiBzZi5nZXRJbXBvcnREZWNsYXJhdGlvbnMoKSkge1xuICAgICAgICAgICAgICAgIGxldCByYXdJbXBvcnQgPSBpbXAuZ2V0TW9kdWxlU3BlY2lmaWVyVmFsdWUoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJhd0ltcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByYXdJbXBvcnQgPSByYXdJbXBvcnQucmVwbGFjZShcIkBhc3NldHNcIiwgXCJBc3NldHNcIik7XG5cbiAgICAgICAgICAgICAgICAvLyAzKSBSZXNvbHZlIHRoZSBvbGQgYWJzb2x1dGUgcGF0aCBhY2NvcmRpbmcgdG8geW91ciBiYXNlVXJsIGxvZ2ljXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkQWJzUGF0aCA9IHRoaXMucmVzb2x2ZVNwZWNpZmllcihcbiAgICAgICAgICAgICAgICAgICAgcmF3SW1wb3J0LFxuICAgICAgICAgICAgICAgICAgICBzZi5nZXREaXJlY3RvcnlQYXRoKCksIC8vIHRoZSBkaXJlY3Rvcnkgb2YgdGhlIGN1cnJlbnQgc291cmNlIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdFJvb3QgICAgICAgICAgICAvLyB0aGUgdHNjb25maWcgZm9sZGVyXG4gICAgICAgICAgICAgICAgKSArICcudHMnO1xuXG4gICAgICAgICAgICAgICAgLy8gNCkgQ2hlY2sgaWYgdGhhdCBvbGRBYnNQYXRoIGlzIGluIHlvdXIgbW92ZWRGaWxlcyBtYXBcbiAgICAgICAgICAgICAgICBpZiAobW92ZWRNYXAuaGFzKG9sZEFic1BhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Fic1BhdGggPSBtb3ZlZE1hcC5nZXQob2xkQWJzUGF0aCkhO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIDUpIENvbXB1dGUgbmV3IHJlbGF0aXZlIHBhdGggZnJvbSB0aGlzIGZpbGUgdG8gdGhlIG5ldyBmaWxlXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdJbXBvcnRTcGVjaWZpZXI6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U291cmNlRmlsZSA9IHRoaXMucHJvamVjdC5nZXRTb3VyY2VGaWxlKG5ld0Fic1BhdGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3U291cmNlRmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VuaWVzUGF0aCA9IGNvbnZlcnRUb0dlbmllc0FsaWFzUGF0aChuZXdBYnNQYXRoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlbmllc1BhdGggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbXBvcnRTcGVjaWZpZXIgPSBnZW5pZXNQYXRoLnJlcGxhY2UoXCIudHNcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgaW4gdGhlIHByb2plY3QsIGxldCB0cy1tb3JwaCBjb21wdXRlIGEgbmljZSByZWxhdGl2ZSBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW1wb3J0U3BlY2lmaWVyID0gc2YuZ2V0UmVsYXRpdmVQYXRoQXNNb2R1bGVTcGVjaWZpZXJUbyhuZXdTb3VyY2VGaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgbWFudWFsbHkgY29tcHV0ZSBhIHJlbGF0aXZlIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltcG9ydGVyRGlyID0gc2YuZ2V0RGlyZWN0b3J5UGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW1wb3J0U3BlY2lmaWVyID0gcGF0aC5yZWxhdGl2ZShpbXBvcnRlckRpciwgbmV3QWJzUGF0aCkucmVwbGFjZSgvXFxcXC9nLCBcIi9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld0ltcG9ydFNwZWNpZmllci5zdGFydHNXaXRoKFwiLlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ltcG9ydFNwZWNpZmllciA9IFwiLi9cIiArIG5ld0ltcG9ydFNwZWNpZmllcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIDYpIEZpbmFsbHkgdXBkYXRlIHRoZSBpbXBvcnRcbiAgICAgICAgICAgICAgICAgICAgaW1wLnNldE1vZHVsZVNwZWNpZmllcihuZXdJbXBvcnRTcGVjaWZpZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgdGhlIHJhdyBpbXBvcnQgc3BlY2lmaWVyIHRvIGFuIGFic29sdXRlIHBhdGgsIGdpdmVuOlxuICAgICAqICAtIFRoZSBkaXJlY3Rvcnkgb2YgdGhlIGltcG9ydGVyIHNvdXJjZSBmaWxlXG4gICAgICogIC0gVGhlIHByb2plY3Qgcm9vdCAod2hlcmUgdHNjb25maWcuanNvbiBpcywgaS5lLiBiYXNlVXJsID0gXCIuXCIpXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXNvbHZlU3BlY2lmaWVyKFxuICAgICAgICBzcGVjaWZpZXI6IHN0cmluZyxcbiAgICAgICAgaW1wb3J0ZXJEaXI6IHN0cmluZyxcbiAgICAgICAgcHJvamVjdFJvb3Q6IHN0cmluZ1xuICAgICk6IHN0cmluZyB7XG4gICAgICAgIC8vIDEpIElmIGl0IHN0YXJ0cyB3aXRoIFwiLlwiIG9yIFwiLi5cIiwgaXQncyByZWxhdGl2ZSB0byB0aGUgaW1wb3J0ZXJEaXJcbiAgICAgICAgaWYgKHNwZWNpZmllci5zdGFydHNXaXRoKFwiLlwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZShpbXBvcnRlckRpciwgc3BlY2lmaWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDIpIElmIGl0IHN0YXJ0cyB3aXRoIFwiL1wiLCBpbnRlcnByZXQgYXMgYSB0cnVseSBPUy1hYnNvbHV0ZSBwYXRoXG4gICAgICAgIC8vICAgIChzb21lIHByb2plY3RzIGRvOiBpbXBvcnQgRm9vIGZyb20gXCIvYWJzb2x1dGUvcGF0aFwiLiBSYXJlIGluIFRTLCBidXQgcG9zc2libGUuKVxuICAgICAgICBpZiAoc3BlY2lmaWVyLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHNwZWNpZmllcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzKSBPdGhlcndpc2UsIGl0J3MgYSBiYXNlVXJsLWJhc2VkIGltcG9ydCAobGlrZSBcIkFzc2V0cy9FeHBlcmllbmNlL015U2NyaXB0XCIpLlxuICAgICAgICAvLyAgICBTbyB3ZSB0cmVhdCB0aGF0IGFzIFtwcm9qZWN0Um9vdF0vQXNzZXRzL0V4cGVyaWVuY2UvTXlTY3JpcHRcbiAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZShwcm9qZWN0Um9vdCwgc3BlY2lmaWVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdyb3VwVHJhbnNmb3JtZXJzQnlQaGFzZSgpOiB7IFtwaGFzZTogbnVtYmVyXTogeyBwaGFzZTogbnVtYmVyLCB0cmFuc2Zvcm1lcjogSVRyYW5zZm9ybWVyIH1bXSB9IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtZXJzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7cGhhc2V9ID0gY3VycjtcbiAgICAgICAgICAgIGlmICghYWNjW3BoYXNlXSkge1xuICAgICAgICAgICAgICAgIGFjY1twaGFzZV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjY1twaGFzZV0ucHVzaChjdXJyKTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9IGFzIHsgW3BoYXNlOiBudW1iZXJdOiB7IHBoYXNlOiBudW1iZXIsIHRyYW5zZm9ybWVyOiBJVHJhbnNmb3JtZXIgfVtdIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBydW5UcmFuc2Zvcm1lcnMoc291cmNlRmlsZTogU291cmNlRmlsZSk6IHZvaWQge1xuICAgICAgICAvLyBHcm91cCB0cmFuc2Zvcm1lcnMgYnkgcGhhc2VcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZXJzQnlQaGFzZSA9IHRoaXMuZ3JvdXBUcmFuc2Zvcm1lcnNCeVBoYXNlKCk7XG5cbiAgICAgICAgY29uc3QgcGhhc2VzID0gT2JqZWN0LmtleXModHJhbnNmb3JtZXJzQnlQaGFzZSkuc29ydCgoYSwgYikgPT4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHBoYXNlIG9mIHBoYXNlcykge1xuICAgICAgICAgICAgY29uc3QgcGhhc2VOdW1iZXIgPSBOdW1iZXIocGhhc2UpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZXJzID0gdHJhbnNmb3JtZXJzQnlQaGFzZVtwaGFzZU51bWJlcl07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgZWFjaCB0cmFuc2Zvcm1lciBpbiB0aGUgcGhhc2VcbiAgICAgICAgICAgIGZvciAoY29uc3Qge3RyYW5zZm9ybWVyfSBvZiB0cmFuc2Zvcm1lcnMpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBub2RlIHR5cGUgdGhpcyB0cmFuc2Zvcm1lciBoYW5kbGVzLCBnZXQgYW5kIHByb2Nlc3MgdGhlIG5vZGVzXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBub2RlVHlwZSBvZiB0cmFuc2Zvcm1lci5ub2RlVHlwZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRpbnVlUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZE5vZGVzID0gbmV3IFNldDxOb2RlPjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldHJ5Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBNQVhfUkVUUklFUyA9IDIwMDtcblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29udGludWVQcm9jZXNzaW5nICYmIHJldHJ5Q291bnQgPCBNQVhfUkVUUklFUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUNvdW50Kys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBub2RlcyBvZiB0aGlzIHNwZWNpZmljIHR5cGUgZGlyZWN0bHkgZnJvbSB0aGUgc291cmNlIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzVG9Qcm9jZXNzID0gc291cmNlRmlsZS5nZXREZXNjZW5kYW50c09mS2luZChub2RlVHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlc1RvUHJvY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzZWROb2Rlcy5oYXMobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCBmb3Jnb3R0ZW4gbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS53YXNGb3Jnb3R0ZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhub2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVByb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGUgdHJhbnNmb3JtYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdOb2RlID0gdHJhbnNmb3JtZXIudHJhbnNmb3JtTm9kZShub2RlLCB0aGlzLnRyYW5zZm9ybWF0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkTm9kZXMuYWRkKG5ld05vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXRyeUNvdW50ID49IE1BWF9SRVRSSUVTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNmb3JtYXRpb25zIHJlYWNoZWQgbWF4IHJldHJpZXNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGluaXRpYWxpemVDb21waWxlT3V0cHV0KG91dHB1dHM6IE1hcDxTb3VyY2VGaWxlLCBGaWxlQ29tcGlsZU91dHB1dD4sIHM6IFNvdXJjZUZpbGUpIHtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9HZXQgZ2VuaWVzIGN1c3RvbSBkaWFnbm9zdGljcyBcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMuZ2V0R2VuaWVzRGlhZ25vc3RpY3Mocyk7XG5cbiAgICAgICAgICAgIGlmIChlcnJvcnM/Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgLy9SdW4gdHJhbnNmb3JtYXRpb25zXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5UcmFuc2Zvcm1lcnMocyk7XG5cbiAgICAgICAgICAgICAgICAvL0ZpeCBhbnkgbWlzc2luZyBpbXBvcnRzIGZyb20gdHJhbnNmb3JtYXRpb25zXG4gICAgICAgICAgICAgICAgcy5maXhNaXNzaW5nSW1wb3J0cygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzb3J0SW1wb3J0c0FuZFZhcnMocyk7XG5cbiAgICAgICAgICAgIC8vQWRkIHByZSBlbWl0IGRpYWdub3N0aWNzIGFmdGVyIHRyYW5zZm9ybWF0aW9ucyBzaW5jZSB3ZSBoYW5kbGUgdHJhbnNmb3JtaW5nIFxuICAgICAgICAgICAgLy9hbnkgZXJyb3IgaW5kdWNpbmcgY29kZS5cbiAgICAgICAgICAgIGVycm9ycy5wdXNoKC4uLnRoaXMuZ2V0RGlhZ25vc3RpY3MocykpO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRzLnNldChzLCB7XG4gICAgICAgICAgICAgICAgICAgIEZpbGVQYXRoOiBzLmdldEZpbGVQYXRoKCksXG4gICAgICAgICAgICAgICAgICAgIElzU3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIEVycm9yczogZXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICBKc1NvdXJjZTogXCJcIiwgIC8vIENhcHR1cmUgdGhlIGVtaXR0ZWQgSmF2YVNjcmlwdFxuICAgICAgICAgICAgICAgICAgICBJc01vbm9iZWhhdmlvdXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBJc1NjcmlwdGFibGVPYmo6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgSWQ6IHMuZ2V0RmlsZVBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgRGVmYXVsdFR5cGVOYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBJbmhlcml0YW5jZUNoYWluOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgU3VwcG9ydGVkVWlFdmVudHM6IEdlbmllc1NjcmlwdFVpRXZlbnRzLk5vbmUsXG4gICAgICAgICAgICAgICAgICAgIFJlZmVyZW5jZWRTcGVjaWZpZXJzOiBbXVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTWFyayBjbGFzcyB0eXBlXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0RXhwb3J0U3ltYm9sID0gcy5nZXREZWZhdWx0RXhwb3J0U3ltYm9sKClcbiAgICAgICAgICAgIGxldCBkZWZhdWx0RXhwb3J0ZWRDbGFzczogQ2xhc3NEZWNsYXJhdGlvbiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0RXhwb3J0U3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25zID0gZGVmYXVsdEV4cG9ydFN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0RXhwb3J0ZWRDbGFzcyA9IGRlY2xhcmF0aW9ucy5maW5kKGRlY2wgPT4gZGVjbC5nZXRLaW5kKCkgPT09IFN5bnRheEtpbmQuQ2xhc3NEZWNsYXJhdGlvbikgYXMgQ2xhc3NEZWNsYXJhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGlzTW9ub2JlaGF2aW91ciA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGlzU2NyaXB0YWJsZU9iaiA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGRlZmF1bHRUeXBlTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdEV4cG9ydGVkQ2xhc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlzTW9ub2JlaGF2aW91ciA9IGV4dGVuZHNNb25vQmVoYXZpb3VyKGRlZmF1bHRFeHBvcnRlZENsYXNzKTtcbiAgICAgICAgICAgICAgICBpc1NjcmlwdGFibGVPYmogPSBleHRlbmRzU2NyaXB0YWJsZU9iamVjdChkZWZhdWx0RXhwb3J0ZWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdFR5cGVOYW1lID0gZ2V0RnVsbFR5cGVOYW1lKGRlZmF1bHRFeHBvcnRlZENsYXNzLmdldFR5cGUoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vQ29sbGVjdCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzOiBQcm9wZXJ0eUluZm9bXSA9IFtdO1xuICAgICAgICAgICAgbGV0IGluaGVyaXRhbmNlQ2hhaW46IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBsZXQgc3VwcG9ydGVkVWlFdmVudHM6IEdlbmllc1NjcmlwdFVpRXZlbnRzID0gR2VuaWVzU2NyaXB0VWlFdmVudHMuTm9uZTtcblxuICAgICAgICAgICAgaWYgKGlzTW9ub2JlaGF2aW91ciB8fCBpc1NjcmlwdGFibGVPYmogJiYgZGVmYXVsdEV4cG9ydGVkQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZUFyZ3VtZW50TWFwID0gbmV3IE1hcDxzdHJpbmcsIFR5cGU+KCk7XG4gICAgICAgICAgICAgICAgbGV0IGJhc2VDbGFzcyA9IGRlZmF1bHRFeHBvcnRlZENsYXNzO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGJhc2VDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlQ2xhc3NOYW1lID0gYmFzZUNsYXNzLmdldE5hbWUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUNsYXNzTmFtZSA9PSBNb25vYmVoYXZpb3VyVHlwZU5hbWUgfHwgYmFzZUNsYXNzTmFtZSA9PSBTY3JpcHRhYmxlT2JqZWN0VHlwZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRNYXAgPSBnZXRDb21wbGV0ZVR5cGVBcmd1bWVudE1hcChiYXNlQ2xhc3MsIHR5cGVBcmd1bWVudE1hcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy51bnNoaWZ0KC4uLmV4dHJhY3RQcm9wZXJ0aWVzKGJhc2VDbGFzcywgJycsIHR5cGVBcmd1bWVudE1hcCkpO1xuICAgICAgICAgICAgICAgICAgICBiYXNlQ2xhc3MgPSBiYXNlQ2xhc3MuZ2V0QmFzZUNsYXNzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5oZXJpdGFuY2VDaGFpbiA9IHRyYXZlcnNlUHJvdG90eXBlQ2hhaW4oZGVmYXVsdEV4cG9ydGVkQ2xhc3MhKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0YW5jZUNoYWluPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlQ2hhaW4uZm9yRWFjaChmID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVaUludGVyZmFjZVRvRW51bU1hcC5oYXMoZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWRVaUV2ZW50cyB8PSBVaUludGVyZmFjZVRvRW51bU1hcC5nZXQoZikhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29sbGVjdCBhbnkgaW1wb3J0cyB0aGF0IG5vdyBzdGFydCB3aXRoIEBhc3NldHMvIG9yIEBjb20uZ2VuaWVzXG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VkU3BlY2lmaWVycyA9IHMuZ2V0SW1wb3J0RGVjbGFyYXRpb25zKClcbiAgICAgICAgICAgICAgICAubWFwKGltcCA9PiBpbXAuZ2V0TW9kdWxlU3BlY2lmaWVyVmFsdWUoKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKG1vZHVsZVNwZWNpZmllciA9PlxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVTcGVjaWZpZXIuc3RhcnRzV2l0aCgnQGFzc2V0cy8nKSB8fFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVTcGVjaWZpZXIuc3RhcnRzV2l0aCgnQGNvbS5nZW5pZXMnKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG91dHB1dHMuc2V0KHMsIHtcbiAgICAgICAgICAgICAgICBGaWxlUGF0aDogcy5nZXRGaWxlUGF0aCgpLFxuICAgICAgICAgICAgICAgIElzU3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgRXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgICAgICAgSnNTb3VyY2U6IFwiXCIsICAvLyBDYXB0dXJlIHRoZSBlbWl0dGVkIEphdmFTY3JpcHRcbiAgICAgICAgICAgICAgICBJc01vbm9iZWhhdmlvdXI6IGlzTW9ub2JlaGF2aW91cixcbiAgICAgICAgICAgICAgICBJc1NjcmlwdGFibGVPYmo6IGlzU2NyaXB0YWJsZU9iaixcbiAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgIElkOiBzLmdldEZpbGVQYXRoKCksXG4gICAgICAgICAgICAgICAgRGVmYXVsdFR5cGVOYW1lOiBkZWZhdWx0VHlwZU5hbWUsXG4gICAgICAgICAgICAgICAgSW5oZXJpdGFuY2VDaGFpbjogaW5oZXJpdGFuY2VDaGFpbixcbiAgICAgICAgICAgICAgICBTdXBwb3J0ZWRVaUV2ZW50czogc3VwcG9ydGVkVWlFdmVudHMsXG4gICAgICAgICAgICAgICAgUmVmZXJlbmNlZFNwZWNpZmllcnM6IHJlZmVyZW5jZWRTcGVjaWZpZXJzXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvL1JlbW92ZSBkZWNvcmF0b3JzXG4gICAgICAgICAgICBjb25zdCBkZWNvcmF0b3JzID0gcy5nZXREZXNjZW5kYW50c09mS2luZChTeW50YXhLaW5kLkRlY29yYXRvcik7XG4gICAgICAgICAgICByZW1vdmVEZWNvcmF0b3JzKHMsIGRlY29yYXRvcnMpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgbGV0IGVycm9ycyA9IHRoaXMuZ2V0RGlhZ25vc3RpY3MocykgPz8gW107XG4gICAgICAgICAgICBlcnJvcnMucHVzaChgVHJhbnNmb3JtYXRpb25zIEZhaWxlZDogJHtlfWApO1xuXG4gICAgICAgICAgICAvL1RyYW5zZm9ybWF0aW9ucyBwcm9iYWJseSBmYWlsZWQgYmVjYXVzZSB0aGVyZSB3ZXJlIGVycm9ycyBpbiB0aGUgZmlsZS5cbiAgICAgICAgICAgIG91dHB1dHMuc2V0KHMsIHtcbiAgICAgICAgICAgICAgICBGaWxlUGF0aDogcy5nZXRGaWxlUGF0aCgpLFxuICAgICAgICAgICAgICAgIElzU3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgRXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgICAgICAgSnNTb3VyY2U6IFwiXCIsICAvLyBDYXB0dXJlIHRoZSBlbWl0dGVkIEphdmFTY3JpcHRcbiAgICAgICAgICAgICAgICBJc01vbm9iZWhhdmlvdXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIElzU2NyaXB0YWJsZU9iajogZmFsc2UsXG4gICAgICAgICAgICAgICAgUHJvcGVydGllczogW10sXG4gICAgICAgICAgICAgICAgSWQ6IHMuZ2V0RmlsZVBhdGgoKSxcbiAgICAgICAgICAgICAgICBEZWZhdWx0VHlwZU5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgSW5oZXJpdGFuY2VDaGFpbjogW10sXG4gICAgICAgICAgICAgICAgU3VwcG9ydGVkVWlFdmVudHM6IEdlbmllc1NjcmlwdFVpRXZlbnRzLk5vbmUsXG4gICAgICAgICAgICAgICAgUmVmZXJlbmNlZFNwZWNpZmllcnM6IFtdXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHByaXZhdGUgZW1pdChvdXRwdXRzOiBNYXA8U291cmNlRmlsZSwgRmlsZUNvbXBpbGVPdXRwdXQ+LCB0cmFuc2Zvcm1lZENvZGVNYXA6IE1hcDxTb3VyY2VGaWxlLCBNYWdpY1N0cmluZz4sIGZpbGU6IFNvdXJjZUZpbGUpIHtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9FbWl0IGFuZCByZXR1cm4gb3V0cHV0XG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBmaWxlLmdldEVtaXRPdXRwdXQoKTtcbiAgICAgICAgICAgIGxldCBqc1NvdXJjZSA9IG91dHB1dC5nZXRPdXRwdXRGaWxlcygpWzBdLmdldFRleHQoKTtcbiAgICAgICAgICAgIGpzU291cmNlID0gdGhpcy5yZW1hcFNvdXJjZXMoanNTb3VyY2UsIGZpbGUsIHRyYW5zZm9ybWVkQ29kZU1hcCk7XG5cbiAgICAgICAgICAgIGxldCBjb21waWxlT3V0cHV0ID0gb3V0cHV0cy5nZXQoZmlsZSkhO1xuICAgICAgICAgICAgbGV0IGFsbEVycm9ycyA9IGNvbXBpbGVPdXRwdXQuRXJyb3JzO1xuICAgICAgICAgICAgY29tcGlsZU91dHB1dC5Jc1N1Y2Nlc3NmdWwgPSBhbGxFcnJvcnMgPT09IHVuZGVmaW5lZCB8fCBhbGxFcnJvcnMubGVuZ3RoID09PSAwO1xuICAgICAgICAgICAgY29tcGlsZU91dHB1dC5Kc1NvdXJjZSA9IGpzU291cmNlO1xuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgIGxldCBjb21waWxlT3V0cHV0ID0gb3V0cHV0cy5nZXQoZmlsZSk7XG5cbiAgICAgICAgICAgIGlmICghY29tcGlsZU91dHB1dCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWNvbXBpbGVPdXRwdXQuRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgY29tcGlsZU91dHB1dC5FcnJvcnMgPSBbZV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBpbGVPdXRwdXQuRXJyb3JzLnB1c2goYENvbXBpbGF0aW9uIEZhaWxlZDogJHtlfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21waWxlT3V0cHV0LklzU3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICAgICAgY29tcGlsZU91dHB1dC5Kc1NvdXJjZSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlbWFwIGpzIHNvdXJjZSBtYXAgdG8gdGhlIG9yaWdpbmFsIHRzIHNvdXJjZSBjb2RlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW1hcFNvdXJjZXMoZW1pdHRlZEpzOiBzdHJpbmcsIGZpbGU6IFNvdXJjZUZpbGUsIHRyYW5zZm9ybWVkQ29kZU1hcDogTWFwPFNvdXJjZUZpbGUsIE1hZ2ljU3RyaW5nPikge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRDb2RlID0gdHJhbnNmb3JtZWRDb2RlTWFwLmdldChmaWxlKSE7XG5cbiAgICAgICAgICAgIC8vR2VuZXJhdGUgbWFwcGluZyBmcm9tIG9yaWdpbiB0cyA8PiBmaW5hbCB0c1xuICAgICAgICAgICAgbGV0IG9yaWdpblRvVHJhbnNmb3JtZWRTb3VyY2VNYXAgPSB0cmFuc2Zvcm1lZENvZGUuZ2VuZXJhdGVNYXAoe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogZmlsZS5nZXRCYXNlTmFtZSgpLFxuICAgICAgICAgICAgICAgIGZpbGU6IGZpbGUuZ2V0QmFzZU5hbWUoKSxcbiAgICAgICAgICAgICAgICBpbmNsdWRlQ29udGVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaGlyZXM6IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VNYXBDb21tZW50UmVnZXggPSAvXFwvXFwvIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uKD86O2NoYXJzZXQ9dXRmLTgpPztiYXNlNjQsKFtBLVphLXowLTkrLz1dKykvO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBlbWl0dGVkSnMubWF0Y2goc291cmNlTWFwQ29tbWVudFJlZ2V4KTtcblxuICAgICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGlubGluZSBzb3VyY2UgbWFwIGZvdW5kIGluIHRoZSBKUyBvdXRwdXQuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBiYXNlNjRNYXAgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IHRzVG9Kc01hcEpzb24gPSBCdWZmZXIuZnJvbShiYXNlNjRNYXAsICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpO1xuICAgICAgICAgICAgY29uc3QgdHNUb0pzTWFwID0gSlNPTi5wYXJzZSh0c1RvSnNNYXBKc29uKTtcblxuICAgICAgICAgICAgY29uc3QgcmVtYXBwZWQgPSByZW1hcHBpbmcoXG4gICAgICAgICAgICAgICAgW3RzVG9Kc01hcCwgSlNPTi5zdHJpbmdpZnkob3JpZ2luVG9UcmFuc2Zvcm1lZFNvdXJjZU1hcCldLCAoKSA9PiBudWxsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBmaW5hbE1hcEpzb24gPSBKU09OLnN0cmluZ2lmeShyZW1hcHBlZCk7XG4gICAgICAgICAgICBjb25zdCBmaW5hbE1hcEJhc2U2NCA9IEJ1ZmZlci5mcm9tKGZpbmFsTWFwSnNvbiwgJ3V0ZjgnKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgICAgICBjb25zdCBpbmxpbmVGaW5hbE1hcCA9IGBkYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJHtmaW5hbE1hcEJhc2U2NH1gO1xuXG4gICAgICAgICAgICBjb25zdCBqc091dHB1dFdpdGhvdXRNYXAgPSBlbWl0dGVkSnMucmVwbGFjZShzb3VyY2VNYXBDb21tZW50UmVnZXgsICcnKS50cmltKCk7XG4gICAgICAgICAgICByZXR1cm4gYCR7anNPdXRwdXRXaXRob3V0TWFwfVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSR7aW5saW5lRmluYWxNYXB9YDtcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICAvL0ZhaWxlZCB0byByZW1hcCwgbG9nIGFuZCByZXR1cm4uXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuIGVtaXR0ZWRKcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0R2VuaWVzRGlhZ25vc3RpY3Moc291cmNlRmlsZTogU291cmNlRmlsZSk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgZ2VuaWVzRGlhZ25vc3RpY3MgPSBnZXRHZW5pZXNTZW1hbnRpY0RpYWdub3N0aWNzKHNvdXJjZUZpbGUsIHRoaXMucHJvamVjdC5nZXRUeXBlQ2hlY2tlcigpKTtcblxuICAgICAgICByZXR1cm4gZ2VuaWVzRGlhZ25vc3RpY3MubWFwKGRpYWdub3N0aWMgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBkaWFnbm9zdGljLnN0YXJ0ID8/IDA7XG4gICAgICAgICAgICBjb25zdCB7bGluZSwgY29sdW1ufSA9IHNvdXJjZUZpbGUuZ2V0TGluZUFuZENvbHVtbkF0UG9zKHN0YXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gYCR7c291cmNlRmlsZS5nZXRGaWxlUGF0aCgpfSAoJHtsaW5lfSwke2NvbHVtbn0pOiAke21lc3NhZ2V9YDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREaWFnbm9zdGljcyhzb3VyY2VGaWxlOiBTb3VyY2VGaWxlKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBwcmVFbWl0RGlhZ25vc3RpY3MgPSBzb3VyY2VGaWxlLmdldFByZUVtaXREaWFnbm9zdGljcygpLm1hcChkaWFnID0+IGRpYWcuY29tcGlsZXJPYmplY3QpO1xuXG4gICAgICAgIHJldHVybiBwcmVFbWl0RGlhZ25vc3RpY3MubWFwKGRpYWdub3N0aWMgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBkaWFnbm9zdGljLnN0YXJ0ID8/IDA7XG4gICAgICAgICAgICBjb25zdCB7bGluZSwgY29sdW1ufSA9IHNvdXJjZUZpbGUuZ2V0TGluZUFuZENvbHVtbkF0UG9zKHN0YXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gYCR7c291cmNlRmlsZS5nZXRGaWxlUGF0aCgpfSAoJHtsaW5lfSwke2NvbHVtbn0pOiAke21lc3NhZ2V9YDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KG1lc3NhZ2VUZXh0OiBzdHJpbmcgfCBEaWFnbm9zdGljTWVzc2FnZUNoYWluKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlVGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlVGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KG1lc3NhZ2VUZXh0LCAnXFxuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbGxlY3RGaWxlcyhmaWxlOiBTb3VyY2VGaWxlLCBjb2xsZWN0ZWQ6IFNldDxTb3VyY2VGaWxlPiwgcHJvY2Vzc2VkOiBTZXQ8c3RyaW5nPiwgZGVwZW5kZW5jeUdyYXBoOiBNYXA8U291cmNlRmlsZSwgU2V0PFNvdXJjZUZpbGU+Pikge1xuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUuZ2V0RmlsZVBhdGgoKTtcbiAgICAgICAgaWYgKHByb2Nlc3NlZC5oYXMoZmlsZVBhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzZWQuYWRkKGZpbGVQYXRoKTtcbiAgICAgICAgY29sbGVjdGVkLmFkZChmaWxlKTtcblxuICAgICAgICAvLyBJbml0aWFsaXplIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBmaWxlXG4gICAgICAgIGlmICghZGVwZW5kZW5jeUdyYXBoLmhhcyhmaWxlKSkge1xuICAgICAgICAgICAgZGVwZW5kZW5jeUdyYXBoLnNldChmaWxlLCBuZXcgU2V0PFNvdXJjZUZpbGU+KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJvY2VzcyByZWZlcmVuY2VkIGZpbGVzIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGZpbGUuZ2V0UmVmZXJlbmNpbmdTb3VyY2VGaWxlcygpLmZvckVhY2gocmVmRmlsZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3RGaWxlcyhyZWZGaWxlLCBjb2xsZWN0ZWQsIHByb2Nlc3NlZCwgZGVwZW5kZW5jeUdyYXBoKTtcblxuICAgICAgICAgICAgLy8gQWRkIGRlcGVuZGVuY3lcbiAgICAgICAgICAgIGlmICghZGVwZW5kZW5jeUdyYXBoLmhhcyhyZWZGaWxlKSkge1xuICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lHcmFwaC5zZXQocmVmRmlsZSwgbmV3IFNldDxTb3VyY2VGaWxlPigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlcGVuZGVuY3lHcmFwaC5nZXQocmVmRmlsZSkhLmFkZChmaWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b3BvbG9naWNhbFNvcnQoZmlsZXM6IFNvdXJjZUZpbGVbXSwgZGVwZW5kZW5jeUdyYXBoOiBNYXA8U291cmNlRmlsZSwgU2V0PFNvdXJjZUZpbGU+Pik6IFNvdXJjZUZpbGVbXSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b3BvbG9naWNhbFNvcnRXaXRoVGFyamFuKGZpbGVzLCBkZXBlbmRlbmN5R3JhcGgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVG9wb2xvZ2ljYWwgU29ydCBGYWlsZWQ6ICR7ZXJyb3J9YCk7XG4gICAgICAgICAgICByZXR1cm4gW107IC8vIEhhbmRsZSBhcHByb3ByaWF0ZWx5XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvcG9sb2dpY2FsU29ydFdpdGhDeWNsZXMoZmlsZXM6IFNvdXJjZUZpbGVbXSwgZGVwZW5kZW5jeUdyYXBoOiBNYXA8U291cmNlRmlsZSwgU2V0PFNvdXJjZUZpbGU+Pik6IFNvdXJjZUZpbGVbXVtdIHtcbiAgICAgICAgY29uc3QgaW5kZXhNYXAgPSBuZXcgTWFwPFNvdXJjZUZpbGUsIG51bWJlcj4oKTtcbiAgICAgICAgY29uc3QgbG93TGlua01hcCA9IG5ldyBNYXA8U291cmNlRmlsZSwgbnVtYmVyPigpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHt2YWx1ZTogMH07XG4gICAgICAgIGNvbnN0IHN0YWNrOiBTb3VyY2VGaWxlW10gPSBbXTtcbiAgICAgICAgY29uc3Qgb25TdGFjayA9IG5ldyBTZXQ8U291cmNlRmlsZT4oKTtcbiAgICAgICAgY29uc3Qgc2NjTGlzdDogU291cmNlRmlsZVtdW10gPSBbXTtcblxuICAgICAgICBjb25zdCBzdHJvbmdDb25uZWN0ID0gKGZpbGU6IFNvdXJjZUZpbGUpID0+IHtcbiAgICAgICAgICAgIGluZGV4TWFwLnNldChmaWxlLCBpbmRleC52YWx1ZSk7XG4gICAgICAgICAgICBsb3dMaW5rTWFwLnNldChmaWxlLCBpbmRleC52YWx1ZSk7XG4gICAgICAgICAgICBpbmRleC52YWx1ZSsrO1xuICAgICAgICAgICAgc3RhY2sucHVzaChmaWxlKTtcbiAgICAgICAgICAgIG9uU3RhY2suYWRkKGZpbGUpO1xuXG4gICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmN5R3JhcGguZ2V0KGZpbGUpIHx8IG5ldyBTZXQ8U291cmNlRmlsZT4oKTtcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcy5mb3JFYWNoKGRlcCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmRleE1hcC5oYXMoZGVwKSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJvbmdDb25uZWN0KGRlcCk7XG4gICAgICAgICAgICAgICAgICAgIGxvd0xpbmtNYXAuc2V0KGZpbGUsIE1hdGgubWluKGxvd0xpbmtNYXAuZ2V0KGZpbGUpISwgbG93TGlua01hcC5nZXQoZGVwKSEpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9uU3RhY2suaGFzKGRlcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG93TGlua01hcC5zZXQoZmlsZSwgTWF0aC5taW4obG93TGlua01hcC5nZXQoZmlsZSkhLCBpbmRleE1hcC5nZXQoZGVwKSEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGxvd0xpbmtNYXAuZ2V0KGZpbGUpID09PSBpbmRleE1hcC5nZXQoZmlsZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2M6IFNvdXJjZUZpbGVbXSA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCB3OiBTb3VyY2VGaWxlIHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgdyA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodyA9PT0gdW5kZWZpbmVkKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgb25TdGFjay5kZWxldGUodyk7XG4gICAgICAgICAgICAgICAgICAgIHNjYy5wdXNoKHcpO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKHcgIT09IGZpbGUpO1xuICAgICAgICAgICAgICAgIHNjY0xpc3QucHVzaChzY2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgICAgICBpZiAoIWluZGV4TWFwLmhhcyhmaWxlKSkge1xuICAgICAgICAgICAgICAgIHN0cm9uZ0Nvbm5lY3QoZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzY2NMaXN0O1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9wb2xvZ2ljYWxTb3J0V2l0aFRhcmphbihmaWxlczogU291cmNlRmlsZVtdLCBkZXBlbmRlbmN5R3JhcGg6IE1hcDxTb3VyY2VGaWxlLCBTZXQ8U291cmNlRmlsZT4+KTogU291cmNlRmlsZVtdIHtcbiAgICAgICAgY29uc3Qgc2NjTGlzdCA9IHRoaXMudG9wb2xvZ2ljYWxTb3J0V2l0aEN5Y2xlcyhmaWxlcywgZGVwZW5kZW5jeUdyYXBoKTtcbiAgICAgICAgY29uc3Qgc29ydGVkOiBTb3VyY2VGaWxlW10gPSBbXTtcblxuICAgICAgICAvLyBQcm9jZXNzIFNDQ3MgaW4gcmV2ZXJzZSBvcmRlclxuICAgICAgICBmb3IgKGxldCBpID0gc2NjTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgc29ydGVkLnB1c2goLi4uc2NjTGlzdFtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc29ydGVkO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgd2UgZG8gc291cmNlIGNvZGUgdHJhbnNmb3JtYXRpb25zIGZvciB1bml0eSBzdXBwb3J0LFxuICAgICAqIHRoZSBmaW5hbCBBU1QgY2FuIGxvb2sgdmVyeSBkaWZmZXJlbnQgdGhhbiB0aGUgb3JpZ2luYWwsIHRoaXNcbiAgICAgKiBtZXNzZXMgdXAgc291cmNlIG1hcHMuIFRvIGZpeCwgd2UgbmVlZCB0byB1c2UgMiBsaWJyYXJpZXNcbiAgICAgKiBNYWdpY1N0cmluZyAtPiB0YWtlcyBhbiBvcmlnaW4gc3RyaW5nIGFuZCBhbGxvd3MgeW91IHRvIHRyYW5zZm9ybSBhbmQgaXQgdHJhY2tzIHRoZSBtYXBwaW5nXG4gICAgICogUmVtYXBwZXIgLT4gdHJhY2VzIG1hcHBpbmcgdGhyb3VnaCBtdWx0aXBsZSBmb3JtcyBhbmQgcmV0dXJucyBhIG1hcHBpbmcgdGhhdCBwb2ludHMgdG8gb3JpZ2luXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgYXBwbHlpbmcgZGlmZnMgZnJvbSB0aGUgb3JpZ2luYWwgc3RyaW5nIHRvIHRoZSBmaW5hbCB0cmFuc2Zvcm1lZCBzb3VyY2VmaWxlIHN0cmluZ1xuICAgICAqIGFuZCB3ZSB1c2UgdGhlIG91dHB1dCBNYWdpY1N0cmluZyB0byBnZW5lcmF0ZSBtYXBwaW5nIGZyb20gb3JpZ2luIFRTIDw+IGZpbmFsIFRTXG4gICAgICovXG4gICAgcHJpdmF0ZSBhcHBseVRyYW5zZm9ybWF0aW9uRGlmZnMob3JpZ2luYWxGaWxlU3RyaW5nOiBNYWdpY1N0cmluZywgczogU291cmNlRmlsZSkge1xuICAgICAgICBjb25zdCBkbXAgPSBuZXcgZGlmZl9tYXRjaF9wYXRjaCgpO1xuICAgICAgICBjb25zdCBvcmlnaW5hbFRleHQgPSBvcmlnaW5hbEZpbGVTdHJpbmcub3JpZ2luYWw7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkVGV4dCA9IHMuZ2V0RnVsbFRleHQoKTtcblxuICAgICAgICAvLyBHZXQgcmF3IGRpZmZzIHdpdGhvdXQgc2VtYW50aWMgY2xlYW51cFxuICAgICAgICBjb25zdCBkaWZmcyA9IGRtcC5kaWZmX21haW4ob3JpZ2luYWxUZXh0LCB0cmFuc2Zvcm1lZFRleHQpO1xuXG4gICAgICAgIGxldCBvcmlnaW5hbFBvcyA9IDA7XG4gICAgICAgIGxldCB0cmFuc2Zvcm1lZFBvcyA9IDA7XG5cbiAgICAgICAgZm9yIChjb25zdCBbb3AsIHRleHRdIG9mIGRpZmZzKSB7XG4gICAgICAgICAgICBpZiAob3AgPT09IDApIHsgLy8gVW5jaGFuZ2VkXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxQb3MgKz0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRQb3MgKz0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAtMSkgeyAvLyBEZWxldGlvblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRmlsZVN0cmluZy5yZW1vdmUob3JpZ2luYWxQb3MsIG9yaWdpbmFsUG9zICsgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciByZW1vdmluZyB0ZXh0IGF0IFske29yaWdpbmFsUG9zfSwgJHtvcmlnaW5hbFBvcyArIHRleHQubGVuZ3RofSk6ICR7ZXJyfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcmlnaW5hbFBvcyArPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgPT09IDEpIHsgLy8gSW5zZXJ0aW9uXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxGaWxlU3RyaW5nLmFwcGVuZFJpZ2h0KG9yaWdpbmFsUG9zLCB0ZXh0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW5zZXJ0aW5nIHRleHQgYXQgJHtvcmlnaW5hbFBvc306ICR7ZXJyfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZFBvcyArPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iLCJpbXBvcnQge1xuICAgIENsYXNzRGVjbGFyYXRpb24sXG4gICAgTWV0aG9kRGVjbGFyYXRpb24sXG4gICAgTm9kZSxcbiAgICBPcHRpb25hbEtpbmQsXG4gICAgU291cmNlRmlsZSxcbiAgICBTeW50YXhLaW5kLFxuICAgIFR5cGUsXG4gICAgVmFyaWFibGVEZWNsYXJhdGlvbktpbmQsXG4gICAgVmFyaWFibGVTdGF0ZW1lbnRTdHJ1Y3R1cmVcbn0gZnJvbSBcInRzLW1vcnBoXCI7XG5pbXBvcnQge1xuICAgIGNvbXBvbmVudE1ldGhvZHMsIGNyZWF0ZUdlbmVyaWNUeXBlVmFyaWFibGUsXG4gICAgR2VuaWVzSW5zdGFuY2VQcm9wTmFtZSxcbiAgICBnZXRGdWxsVHlwZU5hbWUsIGdldEdlbmVyaWNUeXBlS2V5LFxuICAgIGdldElzVW5pdHlBUElEZWNsYXJhdGlvbixcbiAgICBnZXRJc1VuaXR5QVBJVHlwZSxcbiAgICBnZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkLFxuICAgIGlzR2VuaWVzU2NyaXB0VHlwZSxcbiAgICBpc09ySW5oZXJpdHNGcm9tR2FtZU9iamVjdE9yQ29tcG9uZW50LFxuICAgIGdldFR5cGVOYW1lXG59IGZyb20gXCIuLi9Db21waWxlclV0aWxzXCI7XG5pbXBvcnQge1RyYW5zZm9ybWF0aW9uQ29udGV4dH0gZnJvbSBcIi4vVHJhbnNmb3JtYXRpb25Db250ZXh0XCI7XG5pbXBvcnQge0lUcmFuc2Zvcm1lcn0gZnJvbSBcIi4vSVRyYW5zZm9ybWVyXCI7XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmljTWV0aG9kVHJhbnNmb3JtZXIgaW1wbGVtZW50cyBJVHJhbnNmb3JtZXIge1xuICAgIG5vZGVUeXBlcyA9IFtTeW50YXhLaW5kLkNhbGxFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiR2VuZXJpY01ldGhvZFRyYW5zZm9ybWVyXCI7XG5cbiAgICBwcml2YXRlIHNvdXJjZUZpbGVHZW5lcmljTWFwOiBNYXA8U291cmNlRmlsZSwgTWFwPHN0cmluZywgc3RyaW5nPj4gPSBuZXcgTWFwKCk7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGxldCBuZXdOb2RlID0gbm9kZTtcblxuICAgICAgICBpZiAobm9kZS5nZXRLaW5kKCkgPT09IFN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZS5hc0tpbmRPclRocm93KFN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcblxuICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZU5vZGUgPSBleHByZXNzaW9uLmdldExhc3RDaGlsZEJ5S2luZChTeW50YXhLaW5kLklkZW50aWZpZXIpO1xuICAgICAgICAgICAgaWYgKG1ldGhvZE5hbWVOb2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWVOb2RlLmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50TWV0aG9kcy5oYXMobWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RDaGlsZCA9IGV4cHJlc3Npb24uZ2V0Rmlyc3RDaGlsZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NUeXBlID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3JJbmhlcml0c0Zyb21HYW1lT2JqZWN0T3JDb21wb25lbnQoY2xhc3NUeXBlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleHByZXNzaW9uLmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eUFjY2VzcyA9IGV4cHJlc3Npb24uYXNLaW5kT3JUaHJvdyhTeW50YXhLaW5kLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgbGV0IG1ldGhvZE5hbWUgPSBwcm9wZXJ0eUFjY2Vzcy5nZXROYW1lKCk7XG4gICAgICAgICAgICAgICAgbGV0IG1ldGhvZERlY2xhcmF0aW9uOiBNZXRob2REZWNsYXJhdGlvbiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRob2RTeW1ib2wgPSBwcm9wZXJ0eUFjY2Vzcy5nZXRTeW1ib2woKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHByb3BlcnR5QWNjZXNzLmdldEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnN0YW5jZVR5cGUgPSBpbnN0YW5jZS5nZXRUeXBlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1ldGhvZFN5bWJvbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZXRyaWV2ZSBvdmVybG9hZCBpbmZvIGZyb20gVHJhbnNmb3JtYXRpb25Db250ZXh0XG4gICAgICAgICAgICAgICAgY29uc3Qgb3ZlcmxvYWRJbmZvID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LmdldFN3YXBPdmVybG9hZChjYWxsRXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJsb2FkSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHN3YXBwZWQgbWV0aG9kIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kTmFtZSA9IG92ZXJsb2FkSW5mby5tZXRob2RTd2FwVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZERlY2xhcmF0aW9uID0gb3ZlcmxvYWRJbmZvLmRlY2xhcmF0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtZXRob2REZWNsYXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25zID0gbWV0aG9kU3ltYm9sLmdldERlY2xhcmF0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWNsYXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kRGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbnNbMF0gYXMgTWV0aG9kRGVjbGFyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtZXRob2REZWNsYXJhdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKG1ldGhvZERlY2xhcmF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNsYXJpbmdUeXBlID0gbWV0aG9kRGVjbGFyYXRpb24uZ2V0UGFyZW50KCkuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gY2FsbEV4cHJlc3Npb24uZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcmdzTm9kZXMgPSBjYWxsRXhwcmVzc2lvbi5nZXRUeXBlQXJndW1lbnRzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVBcmdzTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlRmlsZSA9IG5vZGUuZ2V0U291cmNlRmlsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNvdXJjZUZpbGVHZW5lcmljTWFwLmhhcyhzb3VyY2VGaWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRmlsZUdlbmVyaWNNYXAuc2V0KHNvdXJjZUZpbGUsIG5ldyBNYXAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcmdzID0gdHlwZUFyZ3NOb2Rlcy5tYXAodCA9PiB0LmdldFR5cGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNNYXRjaGluZ05vbkdlbmVyaWNPdmVybG9hZChtZXRob2REZWNsYXJhdGlvbiwgdHlwZUFyZ3MsIGFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHRoaXMucmVwbGFjZVdpdGhOb25HZW5lcmljQ2FsbChjYWxsRXhwcmVzc2lvbiwgdHlwZUFyZ3MsIGFyZ3MsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyaWNNZXRob2RWYXJOYW1lID0gdGhpcy5jcmVhdGVHZW5lcmljTWV0aG9kVmFyaWFibGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmluZ1R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVBcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VGaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnc1RleHQgPSBhcmdzLm1hcChhcmcgPT4gYXJnLmdldEZ1bGxUZXh0KCkpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1N0YXRpYyA9IG1ldGhvZERlY2xhcmF0aW9uLmlzU3RhdGljKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VUZXh0ID0gaXNHZW5pZXNTY3JpcHRUeXBlKGluc3RhbmNlVHlwZSkgJiYgIWlzU3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCIvL0B0cy1pZ25vcmVcXG5cIiArIGluc3RhbmNlLmdldFRleHQoKSArIFwiLlwiICsgR2VuaWVzSW5zdGFuY2VQcm9wTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGluc3RhbmNlLmdldFRleHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0V4cHJlc3Npb25UZXh0ID0gaXNTdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtnZW5lcmljTWV0aG9kVmFyTmFtZX0oJHthcmdzVGV4dH0pYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGAke2dlbmVyaWNNZXRob2RWYXJOYW1lfS5jYWxsKCR7aW5zdGFuY2VUZXh0fSwgJHthcmdzVGV4dH0pYDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjYWxsRXhwcmVzc2lvbi5yZXBsYWNlV2l0aFRleHQobmV3RXhwcmVzc2lvblRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRLZXkodHlwZU5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICBtZXRob2ROYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgYXJnczogVHlwZVtdLFxuICAgICAgICAgICAgICAgICAgIHNvdXJjZUZpbGU6IFNvdXJjZUZpbGUsXG4gICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtYXRpb25Db250ZXh0OiBUcmFuc2Zvcm1hdGlvbkNvbnRleHQpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dHlwZU5hbWV9JCR7bWV0aG9kTmFtZX0kJHthcmdzLm1hcChhcmcgPT4gdGhpcy5nZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKGFyZywgc291cmNlRmlsZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0KSkuam9pbihcIiRcIil9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUdlbmVyaWNNZXRob2RWYXJpYWJsZShcbiAgICAgICAgdHlwZTogVHlwZSxcbiAgICAgICAgbWV0aG9kTmFtZTogc3RyaW5nLFxuICAgICAgICBhcmdzOiBUeXBlW10sXG4gICAgICAgIHNvdXJjZUZpbGU6IFNvdXJjZUZpbGUsXG4gICAgICAgIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0XG4gICAgKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdEFyZ3MgPSB0eXBlLmdldFR5cGVBcmd1bWVudHMoKTtcblxuICAgICAgICBjb25zdCBnZW5lcmljVHlwZU5hbWUgPSB0aGlzLmdldFR5cGVOYW1lQW5kRW5zdXJlSW1wb3J0ZWQodHlwZSwgc291cmNlRmlsZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0KTtcbiAgICAgICAgY29uc3QgZ2VuZXJpY0tleSA9IHRoaXMuZ2V0S2V5KGdlbmVyaWNUeXBlTmFtZSwgbWV0aG9kTmFtZSwgYXJncywgc291cmNlRmlsZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0KTtcblxuICAgICAgICBjb25zdCBnZW5lcmljTWFwID0gdGhpcy5zb3VyY2VGaWxlR2VuZXJpY01hcC5nZXQoc291cmNlRmlsZSkhO1xuXG4gICAgICAgIGlmICghZ2VuZXJpY01hcC5oYXMoZ2VuZXJpY0tleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyaWNBcmdzID0gYXJncy5tYXAoYXJnID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKGFyZywgc291cmNlRmlsZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgZ2VuZXJpY0RlY2xhcmF0aW9uID0gYCRnZW5lcmljTWV0aG9kKCR7Z2VuZXJpY1R5cGVOYW1lfSwgXCIke21ldGhvZE5hbWV9XCIsICR7Z2VuZXJpY0FyZ3Muam9pbihcIiwgXCIpfSlgO1xuXG4gICAgICAgICAgICBjb25zdCBnZW5lcmljVmFyTmFtZSA9IGBfJHtnZW5lcmljS2V5LnJlcGxhY2UoL1xcJC9nLCBcIl9cIil9YDtcbiAgICAgICAgICAgIGdlbmVyaWNNYXAuc2V0KGdlbmVyaWNLZXksIGdlbmVyaWNWYXJOYW1lKTtcblxuICAgICAgICAgICAgLy8gSW5zZXJ0IG5ldyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICBzb3VyY2VGaWxlLmFkZFZhcmlhYmxlU3RhdGVtZW50KFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25LaW5kOiBWYXJpYWJsZURlY2xhcmF0aW9uS2luZC5Db25zdCxcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2VuZXJpY1Zhck5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplcjogZ2VuZXJpY0RlY2xhcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nVHJpdmlhOiBcIi8vIEB0cy1pZ25vcmVcIlxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2VuZXJpY01hcC5nZXQoZ2VuZXJpY0tleSkhO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VHlwZU5hbWVBbmRFbnN1cmVJbXBvcnRlZCh0eXBlOiBUeXBlLCBzb3VyY2VGaWxlOiBTb3VyY2VGaWxlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQ6IFRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IHN0cmluZyB7XG5cbiAgICAgICAgaWYgKHR5cGUuZ2V0VHlwZUFyZ3VtZW50cygpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1hdGlvbkNvbnRleHQuc291cmNlRmlsZUdlbmVyaWNUeXBlTWFwLmhhcyhzb3VyY2VGaWxlKSkge1xuICAgICAgICAgICAgICAgIGxldCBtYXBwaW5nID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnNvdXJjZUZpbGVHZW5lcmljVHlwZU1hcC5nZXQoc291cmNlRmlsZSkhO1xuICAgICAgICAgICAgICAgIGxldCB0eXBlQXJncyA9IHR5cGUuZ2V0VHlwZUFyZ3VtZW50cygpO1xuICAgICAgICAgICAgICAgIGxldCB0eXBlS2V5ID0gZ2V0R2VuZXJpY1R5cGVLZXkodHlwZSwgdHlwZUFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hcHBpbmcuaGFzKHR5cGVLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXBwaW5nLmdldCh0eXBlS2V5KSE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUdlbmVyaWNUeXBlVmFyaWFibGUodHlwZSwgdHlwZS5nZXRUeXBlQXJndW1lbnRzKCksIHNvdXJjZUZpbGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlR2VuZXJpY1R5cGVWYXJpYWJsZSh0eXBlLCB0eXBlLmdldFR5cGVBcmd1bWVudHMoKSwgc291cmNlRmlsZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKHR5cGUsIHNvdXJjZUZpbGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzTWF0Y2hpbmdOb25HZW5lcmljT3ZlcmxvYWQobWV0aG9kRGVjbGFyYXRpb246IE1ldGhvZERlY2xhcmF0aW9uLCB0eXBlQXJnczogVHlwZVtdLCBhcmdzOiBOb2RlW10pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcGFyZW50Q2xhc3MgPSBtZXRob2REZWNsYXJhdGlvbi5nZXRQYXJlbnQoKSBhcyBDbGFzc0RlY2xhcmF0aW9uO1xuICAgICAgICBjb25zdCBtZXRob2ROYW1lID0gbWV0aG9kRGVjbGFyYXRpb24uZ2V0TmFtZSgpO1xuICAgICAgICBjb25zdCBtZXRob2RzID0gcGFyZW50Q2xhc3MuZ2V0TWV0aG9kcygpLmZpbHRlcihtID0+IG0uZ2V0TmFtZSgpID09PSBtZXRob2ROYW1lICYmIG0uZ2V0VHlwZVBhcmFtZXRlcnMoKS5sZW5ndGggPT09IDApO1xuXG4gICAgICAgIGNvbnN0IGNzaGFycFR5cGVOYW1lID0gJ1N5c3RlbS5UeXBlJztcblxuICAgICAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVQYXJhbUNvdW50ID0gcGFyYW1ldGVycy5maWx0ZXIocCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEZ1bGxUeXBlTmFtZShwLmdldFR5cGUoKSkgPT09IGNzaGFycFR5cGVOYW1lO1xuICAgICAgICAgICAgfSkubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAodHlwZVBhcmFtQ291bnQgPT09IHR5cGVBcmdzLmxlbmd0aCAmJiBwYXJhbWV0ZXJzLmxlbmd0aCA9PT0gdHlwZUFyZ3MubGVuZ3RoICsgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5ldmVyeSgocGFyYW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHR5cGVBcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEZ1bGxUeXBlTmFtZShwYXJhbS5nZXRUeXBlKCkpID09PSBjc2hhcnBUeXBlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS5nZXRUeXBlKCkuZ2V0VGV4dCgpID09PSBhcmdzW2luZGV4IC0gdHlwZUFyZ3MubGVuZ3RoXS5nZXRUeXBlKCkuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVwbGFjZVdpdGhOb25HZW5lcmljQ2FsbChjYWxsRXhwcmVzc2lvbjogTm9kZSwgdHlwZUFyZ3M6IFR5cGVbXSwgYXJnczogTm9kZVtdLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQ6IFRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IE5vZGUge1xuICAgICAgICBjb25zdCBtZXRob2RDYWxsID0gY2FsbEV4cHJlc3Npb24uYXNLaW5kT3JUaHJvdyhTeW50YXhLaW5kLkNhbGxFeHByZXNzaW9uKTtcbiAgICAgICAgY29uc3QgcHJvcGVydHlBY2Nlc3MgPSBtZXRob2RDYWxsLmdldEV4cHJlc3Npb24oKS5hc0tpbmRPclRocm93KFN5bnRheEtpbmQuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKTtcbiAgICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IHByb3BlcnR5QWNjZXNzLmdldE5hbWUoKTtcbiAgICAgICAgY29uc3QgaW5zdGFuY2VUZXh0ID0gcHJvcGVydHlBY2Nlc3MuZ2V0RXhwcmVzc2lvbigpLmdldFRleHQoKTtcblxuICAgICAgICBjb25zdCB0eXBlQXJnc1RleHQgPSB0eXBlQXJncy5tYXAoYXJnID0+IHtcbiAgICAgICAgICAgIGlmIChnZXRJc1VuaXR5QVBJVHlwZShhcmcpICYmIGFyZy5pc0ludGVyZmFjZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAkdHlwZW9mKFwiJHtnZXRGdWxsVHlwZU5hbWUoYXJnKX1cIilgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5nZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKGFyZywgY2FsbEV4cHJlc3Npb24uZ2V0U291cmNlRmlsZSgpLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQpfWA7XG4gICAgICAgIH0pLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgY29uc3QgYXJnc1RleHQgPSBhcmdzLm1hcChhcmcgPT4gYXJnLmdldFRleHQoKSkuam9pbihcIiwgXCIpO1xuICAgICAgICBjb25zdCByZXR1cm5UeXBlID0gbWV0aG9kQ2FsbC5nZXRSZXR1cm5UeXBlKCk7XG5cbiAgICAgICAgY29uc3QgbmV3RXhwcmVzc2lvblRleHQgPSBgJHtpbnN0YW5jZVRleHR9LiR7bWV0aG9kTmFtZX0oJHt0eXBlQXJnc1RleHR9JHthcmdzVGV4dCA/IGAsICR7YXJnc1RleHR9YCA6IFwiXCJ9KSBhcyAke3JldHVyblR5cGUuZ2V0VGV4dCgpfWA7XG5cbiAgICAgICAgcmV0dXJuIGNhbGxFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dChuZXdFeHByZXNzaW9uVGV4dCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEdlbmllc1RyYW5zcGlsZXIgZnJvbSAnLi9jb21waWxlci9Db21waWxlcic7XG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuZnVuY3Rpb24gbWFpbigpIHtcbiAgICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuICAgIGxldCB0c0NvbmZpZ1BhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgY29tcGlsZUZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGxldCBwcm9qZWN0RmlsZXM6IHN0cmluZ1tdID0gW107XG4gICAgbGV0IG1vdmVkRmlsZXM6IHsgb2xkUGF0aDogc3RyaW5nOyBuZXdQYXRoOiBzdHJpbmcgfVtdID0gW107XG4gICAgbGV0IGN1cnJlbnRGbGFnOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIC8vIENvbGxlY3QgY29tcGlsZSBhbmQgcHJvamVjdCBmaWxlcywgdHJlYXRpbmcgYWxsIGZvbGxvd2luZyBzdHJpbmdzIGFmdGVyIGVhY2ggZmxhZyBhcyBwYXJ0IG9mIHRoZSBsaXN0XG4gICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgICBpZiAoYXJnID09PSAnLS10c2NvbmZpZycgfHwgYXJnID09PSAnLXQnKSB7XG4gICAgICAgICAgICBjdXJyZW50RmxhZyA9ICd0c2NvbmZpZyc7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJnID09PSAnLWMnIHx8IGFyZyA9PT0gJy0tY29tcGlsZScpIHtcbiAgICAgICAgICAgIGN1cnJlbnRGbGFnID0gJ2NvbXBpbGUnO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZyA9PT0gJy1wJyB8fCBhcmcgPT09ICctLXByb2plY3QnKSB7XG4gICAgICAgICAgICBjdXJyZW50RmxhZyA9ICdwcm9qZWN0JztcbiAgICAgICAgfSBlbHNlIGlmIChhcmcgPT09ICctbWYnIHx8IGFyZyA9PT0gJy0tbW92ZWRGaWxlcycpIHtcbiAgICAgICAgICAgIGN1cnJlbnRGbGFnID0gJ21vdmVkRmlsZXMnO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRGbGFnID09PSAndHNjb25maWcnKSB7XG4gICAgICAgICAgICB0c0NvbmZpZ1BhdGggPSBhcmc7XG4gICAgICAgICAgICBjdXJyZW50RmxhZyA9IG51bGw7IC8vIHJlc2V0IGZsYWcgYWZ0ZXIgY2FwdHVyaW5nIHRoZSB2YWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRGbGFnID09PSAnY29tcGlsZScpIHtcbiAgICAgICAgICAgIGNvbXBpbGVGaWxlcy5wdXNoKGFyZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEZsYWcgPT09ICdwcm9qZWN0Jykge1xuICAgICAgICAgICAgcHJvamVjdEZpbGVzLnB1c2goYXJnKTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50RmxhZyA9PT0gJ21vdmVkRmlsZXMnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1vdmVkRmlsZXMgPSBKU09OLnBhcnNlKGFyZyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgbW92ZWRGaWxlcyBKU09OOicsIGVycik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEZsYWcgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0c0NvbmZpZ1BhdGggfHwgY29tcGlsZUZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdVc2FnZTogbm9kZSBpbmRleC5qcyAtLXRzY29uZmlnIDx0c2NvbmZpZ1BhdGg+IC1jIDxmaWxlMT4gWzxmaWxlMj4gWy4uLl1dIC1wIDxhZGRpdGlvbmFsRmlsZTE+IFs8YWRkaXRpb25hbEZpbGUyPiBbLi4uXV0nKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbXBpbGVyID0gbmV3IEdlbmllc1RyYW5zcGlsZXIodHNDb25maWdQYXRoKTtcblxuICAgICAgICAvLyBBd2FpdCB0aGUgcmVzdWx0IG9mIHRoZSBjb21waWxlIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVyLmNvbXBpbGUoY29tcGlsZUZpbGVzLCBwcm9qZWN0RmlsZXMsIG1vdmVkRmlsZXMpO1xuICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShyZXN1bHQudG9TdHJpbmcoKSk7IC8vIFdyaXRlIHRoZSByZXN1bHQgdG8gc3Rkb3V0XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQ29tcGlsYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbn1cblxuLy8gUnVuIHRoZSBtYWluIGZ1bmN0aW9uXG5tYWluKCk7XG4iLCJpbXBvcnQge1xuICAgIFN5bnRheEtpbmQsXG4gICAgTm9kZSxcbiAgICBDYWxsRXhwcmVzc2lvbixcbiAgICBUeXBlLFxuICAgIEV4cHJlc3Npb24sXG4gICAgUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uLCBUeXBlRm9ybWF0RmxhZ3MsXG59IGZyb20gJ3RzLW1vcnBoJztcbmltcG9ydCB7XG4gICAgZ2V0RnVsbFR5cGVOYW1lLFxufSBmcm9tICcuLi9Db21waWxlclV0aWxzJztcbmltcG9ydCB7IFRyYW5zZm9ybWF0aW9uQ29udGV4dCB9IGZyb20gJy4vVHJhbnNmb3JtYXRpb25Db250ZXh0JztcbmltcG9ydCB7IElUcmFuc2Zvcm1lciB9IGZyb20gJy4vSVRyYW5zZm9ybWVyJztcblxuZXhwb3J0IGNsYXNzIENTaGFycEV2ZW50VHJhbnNmb3JtZXIgaW1wbGVtZW50cyBJVHJhbnNmb3JtZXIge1xuICAgIG5vZGVUeXBlcyA9IFtTeW50YXhLaW5kLkNhbGxFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiQ1NoYXJwRXZlbnRUcmFuc2Zvcm1lclwiO1xuXG4gICAgdHJhbnNmb3JtTm9kZShub2RlOiBOb2RlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQ6IFRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IE5vZGUge1xuICAgICAgICBpZiAoTm9kZS5pc0NhbGxFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsRXhwcmVzc2lvbiA9IG5vZGUgYXMgQ2FsbEV4cHJlc3Npb247XG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gY2FsbEV4cHJlc3Npb24uZ2V0RXhwcmVzc2lvbigpO1xuXG4gICAgICAgICAgICBpZiAoTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBleHByZXNzaW9uLmdldE5hbWUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChtZXRob2ROYW1lID09PSAnQWRkJyB8fCBtZXRob2ROYW1lID09PSAnUmVtb3ZlJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudEV4cHJlc3Npb24gPSBleHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRUeXBlID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGV2ZW50RXhwcmVzc2lvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDU2hhcnBFdmVudFR5cGUoZXZlbnRUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24oZXZlbnRFeHByZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IGV2ZW50RXhwcmVzc2lvbi5nZXROYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0RXhwcmVzc2lvbiA9IGV2ZW50RXhwcmVzc2lvbi5nZXRFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDYWxsRXhwcmVzc2lvbiA9IHRoaXMuY3JlYXRlTmV3Q2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2ROYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdHMtaWdub3JlIGNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRzSWdub3JlQ29tbWVudChuZXdDYWxsRXhwcmVzc2lvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Q2FsbEV4cHJlc3Npb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzQ1NoYXJwRXZlbnRUeXBlKHR5cGU6IFR5cGUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICAgICAgaWYgKCFzeW1ib2wpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gc3ltYm9sLmdldE5hbWUoKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdHlwZU5hbWUgPT09ICdDU2hhcnBFdmVudCcgfHxcbiAgICAgICAgICAgIHR5cGVOYW1lID09PSAnQ1NoYXJwRXZlbnRfQWRkJyB8fFxuICAgICAgICAgICAgdHlwZU5hbWUgPT09ICdDU2hhcnBFdmVudF9SZW1vdmUnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVOZXdDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgY2FsbEV4cHJlc3Npb246IENhbGxFeHByZXNzaW9uLFxuICAgICAgICBvYmplY3RFeHByZXNzaW9uOiBFeHByZXNzaW9uLFxuICAgICAgICBtZXRob2RQcmVmaXg6IHN0cmluZyxcbiAgICAgICAgcHJvcGVydHlOYW1lOiBzdHJpbmdcbiAgICApOiBDYWxsRXhwcmVzc2lvbiB7XG4gICAgICAgIGNvbnN0IGFyZ3NUZXh0ID0gY2FsbEV4cHJlc3Npb25cbiAgICAgICAgICAgIC5nZXRBcmd1bWVudHMoKVxuICAgICAgICAgICAgLm1hcCgoYXJnKSA9PiBhcmcuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgIGNvbnN0IG5ld01ldGhvZE5hbWUgPSBgJHttZXRob2RQcmVmaXh9XyR7cHJvcGVydHlOYW1lfWA7XG4gICAgICAgIGNvbnN0IG5ld0NhbGxFeHByZXNzaW9uVGV4dCA9IGAke29iamVjdEV4cHJlc3Npb24uZ2V0VGV4dCgpfS4ke25ld01ldGhvZE5hbWV9KCR7YXJnc1RleHR9KWA7XG5cbiAgICAgICAgY29uc3QgbmV3Q2FsbEV4cHJlc3Npb24gPSBjYWxsRXhwcmVzc2lvbi5yZXBsYWNlV2l0aFRleHQoXG4gICAgICAgICAgICBuZXdDYWxsRXhwcmVzc2lvblRleHRcbiAgICAgICAgKSBhcyBDYWxsRXhwcmVzc2lvbjtcblxuICAgICAgICByZXR1cm4gbmV3Q2FsbEV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUc0lnbm9yZUNvbW1lbnQoY2FsbEV4cHJlc3Npb246IENhbGxFeHByZXNzaW9uKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBjYWxsRXhwcmVzc2lvbi5nZXRTb3VyY2VGaWxlKCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gY2FsbEV4cHJlc3Npb24uZ2V0U3RhcnQoKTtcbiAgICAgICAgc291cmNlRmlsZS5pbnNlcnRUZXh0KHN0YXJ0LCAnLy8gQHRzLWlnbm9yZVxcbicpO1xuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRpZmYtbWF0Y2gtcGF0Y2hcIik7IiwiaW1wb3J0IHtcbiAgICBOb2RlLFxuICAgIFN5bnRheEtpbmQsXG4gICAgQXJyb3dGdW5jdGlvbixcbiAgICBUeXBlXG59IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHtJVHJhbnNmb3JtZXJ9IGZyb20gXCIuL0lUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtUcmFuc2Zvcm1hdGlvbkNvbnRleHR9IGZyb20gXCIuL1RyYW5zZm9ybWF0aW9uQ29udGV4dFwiO1xuaW1wb3J0IHtpc0dlbmllc0V2ZW50VHlwZSwgaXNTaWduYWxCdXNUeXBlfSBmcm9tIFwiLi4vQ29tcGlsZXJVdGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgRGVsZWdhdGVUb0Fycm93RnVuY3Rpb25UcmFuc2Zvcm1lciBpbXBsZW1lbnRzIElUcmFuc2Zvcm1lciB7XG4gICAgbm9kZVR5cGVzID0gW1N5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb25dO1xuICAgIHRyYW5zZm9ybWVyS2V5ID0gXCJEZWxlZ2F0ZVRvQXJyb3dGdW5jdGlvblRyYW5zZm9ybWVyXCI7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGlmICghTm9kZS5pc0NhbGxFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZS5hc0tpbmRPclRocm93KFN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pO1xuICAgICAgICBjb25zdCB0eXBlQ2hlY2tlciA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlcjtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjYWxsIGlzIGEgcHJvcGVydHkgYWNjZXNzIChlLmcuLCBTaWduYWxCdXMuc3Vic2NyaWJlKVxuICAgICAgICBpZiAoTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSkge1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0RXhwcmVzc2lvbiA9IGV4cHJlc3Npb24uZ2V0RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0VHlwZSA9IHR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKG9iamVjdEV4cHJlc3Npb24pO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBpdCBpcyBhIFNpZ25hbEJ1cyBvciBHZW5pZXNFdmVudCBtZXRob2RzIHRoZW4gd2UgaWdub3JlIHNpbmNlIHdlIGFyZVxuICAgICAgICAgICAgLy8gdHJhbnNmb3JtaW5nIHRoZW0gc29tZXdoZXJlIGVsc2VcbiAgICAgICAgICAgIGlmIChpc1NpZ25hbEJ1c1R5cGUob2JqZWN0VHlwZSkgfHwgaXNHZW5pZXNFdmVudFR5cGUob2JqZWN0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHR5cGVDaGVja2VyLmdldFJlc29sdmVkU2lnbmF0dXJlKGNhbGxFeHByZXNzaW9uKTtcbiAgICAgICAgaWYgKCFzaWduYXR1cmUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHNpZ25hdHVyZS5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKTtcblxuICAgICAgICBhcmdzLm1hcCgoYXJnLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyID0gcGFyYW1ldGVyc1tpbmRleF07XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1UeXBlID0gdHlwZUNoZWNrZXIuZ2V0VHlwZU9mU3ltYm9sQXRMb2NhdGlvbihwYXJhbWV0ZXIsIGNhbGxFeHByZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0RlbGVnYXRlVHlwZShwYXJhbVR5cGUpICYmICFOb2RlLmlzQXJyb3dGdW5jdGlvbihhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndyYXBJbkFycm93RnVuY3Rpb24oYXJnLCBwYXJhbVR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgcmV0dXJuIGNhbGxFeHByZXNzaW9uO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNEZWxlZ2F0ZVR5cGUodHlwZTogVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBjYWxsU2lnbmF0dXJlcyA9IHR5cGUuZ2V0Q2FsbFNpZ25hdHVyZXMoKTtcbiAgICAgICAgcmV0dXJuIGNhbGxTaWduYXR1cmVzLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIHByaXZhdGUgd3JhcEluQXJyb3dGdW5jdGlvbihub2RlOiBOb2RlLCBfcGFyYW1UeXBlOiBUeXBlKTogQXJyb3dGdW5jdGlvbiB7XG4gICAgICAgIC8vIFVzZSB0aGUgdHlwZSBvZiB0aGUgcGFzc2VkIGFyZ3VtZW50IHJhdGhlciB0aGFuIHRoZSBwYXJhbWV0ZXIncyB0eXBlLlxuICAgICAgICBjb25zdCBkZWxlZ2F0ZVR5cGUgPSBub2RlLmdldFR5cGUoKTtcbiAgICAgICAgY29uc3QgY2FsbFNpZ25hdHVyZXMgPSBkZWxlZ2F0ZVR5cGUuZ2V0Q2FsbFNpZ25hdHVyZXMoKTtcbiAgICAgICAgaWYgKGNhbGxTaWduYXR1cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgZGVsZWdhdGUgdHlwZSB0byBoYXZlIGNhbGwgc2lnbmF0dXJlcy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIHNpZ25hdHVyZSBmcm9tIHRoZSBwYXNzZWQgYXJndW1lbnQgKHRoZSBkZWxlZ2F0ZSBpdHNlbGYpXG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGNhbGxTaWduYXR1cmVzWzBdO1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzIHRoYXQgdGhlIGRlbGVnYXRlIGZ1bmN0aW9uIGFjdHVhbGx5IGV4cGVjdHMuXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkUGFyYW1Db3VudCA9IHNpZ25hdHVyZS5nZXRQYXJhbWV0ZXJzKCkubGVuZ3RoO1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGdlbmVyaWMgcGFyYW1ldGVyIG5hbWVzIChhcmcwLCBhcmcxLCAuLi4pXG4gICAgICAgIGNvbnN0IHBhcmFtTmFtZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBleHBlY3RlZFBhcmFtQ291bnQgfSwgKF8sIGkpID0+IGBhcmcke2l9YCk7XG4gICAgICAgIGNvbnN0IHBhcmFtTGlzdCA9IHBhcmFtTmFtZXMuam9pbihcIiwgXCIpO1xuXG4gICAgICAgIC8vIEJ1aWxkIHRoZSBhcnJvdyBmdW5jdGlvbiB0ZXh0IHRvIG9ubHkgcGFzcyB0aGUgZXhwZWN0ZWQgcGFyYW1ldGVycy5cbiAgICAgICAgY29uc3QgYXJyb3dGdW5jdGlvblRleHQgPSBgKCR7cGFyYW1MaXN0fSkgPT4gJHtub2RlLmdldFRleHQoKX0oJHtwYXJhbU5hbWVzLmpvaW4oXCIsIFwiKX0pYDtcblxuICAgICAgICBjb25zb2xlLmxvZyhgV3JhcHBpbmcgaW4gYXJyb3cgZnVuY3Rpb246ICR7YXJyb3dGdW5jdGlvblRleHR9YCk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGUucmVwbGFjZVdpdGhUZXh0KGFycm93RnVuY3Rpb25UZXh0KSBhcyBBcnJvd0Z1bmN0aW9uO1xuICAgIH1cbn0iLCIvLyBCcmFja2V0QWNjZXNzVHJhbnNmb3JtZXIudHNcbmltcG9ydCB7XG4gICAgRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24sXG4gICAgU3ludGF4S2luZCxcbiAgICBOb2RlLFxuICAgIE1ldGhvZERlY2xhcmF0aW9uLFxuICAgIE1ldGhvZFNpZ25hdHVyZSxcbiAgICBDbGFzc0RlY2xhcmF0aW9uLFxuICAgIEludGVyZmFjZURlY2xhcmF0aW9uLFxuICAgIFN5bWJvbCxcbiAgICBUeXBlLFxuICAgIEJpbmFyeUV4cHJlc3Npb24sXG59IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHsgSVRyYW5zZm9ybWVyIH0gZnJvbSBcIi4vSVRyYW5zZm9ybWVyXCI7XG5pbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbkNvbnRleHQgfSBmcm9tIFwiLi9UcmFuc2Zvcm1hdGlvbkNvbnRleHRcIjtcbmltcG9ydCB7R0VUX0lURU1fTkFNRSwgZ2V0SXNVbml0eUFQSVR5cGUsIFNFVF9JVEVNX05BTUV9IGZyb20gXCIuLi9Db21waWxlclV0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBCcmFja2V0QWNjZXNzVHJhbnNmb3JtZXIgaW1wbGVtZW50cyBJVHJhbnNmb3JtZXIge1xuICAgIC8vIFNwZWNpZnkgdGhlIG5vZGUgdHlwZXMgdGhpcyB0cmFuc2Zvcm1lciB3aWxsIGhhbmRsZVxuICAgIG5vZGVUeXBlcyA9IFtTeW50YXhLaW5kLkVsZW1lbnRBY2Nlc3NFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiQnJhY2tldEFjY2Vzc1RyYW5zZm9ybWVyXCI7XG5cbiAgICBcbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGlmICghTm9kZS5pc0VsZW1lbnRBY2Nlc3NFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVsZW1lbnRBY2Nlc3MgPSBub2RlIGFzIEVsZW1lbnRBY2Nlc3NFeHByZXNzaW9uO1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gZWxlbWVudEFjY2Vzcy5nZXRFeHByZXNzaW9uKCk7XG4gICAgICAgIGNvbnN0IGFyZ3VtZW50RXhwcmVzc2lvbiA9IGVsZW1lbnRBY2Nlc3MuZ2V0QXJndW1lbnRFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgaWYgKCFhcmd1bWVudEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gYXJndW1lbnQgKGUuZy4sIG9ialtdKSwgc2tpcCB0cmFuc2Zvcm1hdGlvblxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlID0gZXhwcmVzc2lvbi5nZXRUeXBlKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHR5cGUgaXMgYSBVbml0eSBBUEkgdHlwZVxuICAgICAgICBpZiAoIWdldElzVW5pdHlBUElUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHJpZXZlIHRoZSBzeW1ib2wgb2YgdGhlIHR5cGVcbiAgICAgICAgY29uc3QgdHlwZVN5bWJvbCA9IHR5cGUuZ2V0U3ltYm9sKCk7XG4gICAgICAgIGlmICghdHlwZVN5bWJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWxsIGRlY2xhcmF0aW9ucyAoY2xhc3NlcyBhbmQgaW50ZXJmYWNlcykgYXNzb2NpYXRlZCB3aXRoIHRoZSB0eXBlXG4gICAgICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IHR5cGVTeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCkuZmlsdGVyKFxuICAgICAgICAgICAgZGVjbCA9PiBOb2RlLmlzQ2xhc3NEZWNsYXJhdGlvbihkZWNsKSB8fCBOb2RlLmlzSW50ZXJmYWNlRGVjbGFyYXRpb24oZGVjbClcbiAgICAgICAgKSBhcyAoQ2xhc3NEZWNsYXJhdGlvbiB8IEludGVyZmFjZURlY2xhcmF0aW9uKVtdO1xuXG4gICAgICAgIGlmIChkZWNsYXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbGxlY3QgYWxsIHVuaXF1ZSBnZXRfaXRlbSBhbmQgc2V0X2l0ZW0gbWV0aG9kcyBhY3Jvc3MgYWxsIGRlY2xhcmF0aW9uc1xuICAgICAgICBjb25zdCBnZXRJdGVtTWV0aG9kczogKE1ldGhvZERlY2xhcmF0aW9uIHwgTWV0aG9kU2lnbmF0dXJlKVtdID0gW107XG4gICAgICAgIGNvbnN0IHNldEl0ZW1NZXRob2RzOiAoTWV0aG9kRGVjbGFyYXRpb24gfCBNZXRob2RTaWduYXR1cmUpW10gPSBbXTtcblxuICAgICAgICBjb25zdCBtZXRob2RTaWduYXR1cmVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICAgICAgZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbGFzc09ySW50ZXJmYWNlID0gZGVjbCBhcyBDbGFzc0RlY2xhcmF0aW9uIHwgSW50ZXJmYWNlRGVjbGFyYXRpb247XG5cbiAgICAgICAgICAgIC8vIGdldE1ldGhvZHMgcmV0dXJucyBhbiBhcnJheSBvZiBNZXRob2REZWNsYXJhdGlvbiBvciBNZXRob2RTaWduYXR1cmVcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZHMgPSBjbGFzc09ySW50ZXJmYWNlLmdldE1ldGhvZHMoKTtcblxuICAgICAgICAgICAgbWV0aG9kcy5mb3JFYWNoKG1ldGhvZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZC5nZXROYW1lKCk7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09IEdFVF9JVEVNX05BTUUgfHwgbWV0aG9kTmFtZSA9PT0gU0VUX0lURU1fTkFNRSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBzaWduYXR1cmUgc3RyaW5nIGZvciB0aGUgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IG1ldGhvZC5nZXRTaWduYXR1cmUoKS5nZXREZWNsYXJhdGlvbigpPy5nZXRUZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWduYXR1cmUgJiYgIW1ldGhvZFNpZ25hdHVyZXMuaGFzKHNpZ25hdHVyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXRob2ROYW1lID09PSBHRVRfSVRFTV9OQU1FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0SXRlbU1ldGhvZHMucHVzaChtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtTWV0aG9kcy5wdXNoKG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RTaWduYXR1cmVzLmFkZChzaWduYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChnZXRJdGVtTWV0aG9kcy5sZW5ndGggPT09IDAgJiYgc2V0SXRlbU1ldGhvZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBOZWl0aGVyIGdldHRlciBub3Igc2V0dGVyIGV4aXN0czsgbm8gdHJhbnNmb3JtYXRpb24gbmVlZGVkXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGVsZW1lbnRBY2Nlc3MuZ2V0UGFyZW50KCk7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBnZXR0ZXIgb3Igc2V0dGVyXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIE5vZGUuaXNCaW5hcnlFeHByZXNzaW9uKHBhcmVudCkgJiZcbiAgICAgICAgICAgIHBhcmVudC5nZXRPcGVyYXRvclRva2VuKCkuZ2V0S2luZCgpID09PSBTeW50YXhLaW5kLkVxdWFsc1Rva2VuICYmXG4gICAgICAgICAgICBwYXJlbnQuZ2V0TGVmdCgpID09PSBlbGVtZW50QWNjZXNzXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHNldHRlcjogb2JqW2luZGV4XSA9IHZhbHVlXG4gICAgICAgICAgICBpZiAoc2V0SXRlbU1ldGhvZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlRXhwcmVzc2lvbiA9IHBhcmVudC5nZXRSaWdodCgpO1xuXG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGZpbmQgYSBtYXRjaGluZyBzZXRfaXRlbSBtZXRob2RcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nU2V0SXRlbSA9IHNldEl0ZW1NZXRob2RzLmZpbmQobWV0aG9kID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBtZXRob2QuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleFBhcmFtVHlwZSA9IHBhcmFtc1swXS5nZXRUeXBlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVQYXJhbVR5cGUgPSBwYXJhbXNbMV0uZ2V0VHlwZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXhBcmdUeXBlID0gYXJndW1lbnRFeHByZXNzaW9uLmdldFR5cGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUFyZ1R5cGUgPSB2YWx1ZUV4cHJlc3Npb24uZ2V0VHlwZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZUNoZWNrZXIgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICB0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8oaW5kZXhBcmdUeXBlLCBpbmRleFBhcmFtVHlwZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZUNoZWNrZXIuaXNUeXBlQXNzaWduYWJsZVRvKHZhbHVlQXJnVHlwZSwgdmFsdWVQYXJhbVR5cGUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIW1hdGNoaW5nU2V0SXRlbSkge1xuICAgICAgICAgICAgICAgIC8vIE5vIHN1aXRhYmxlIHNldF9pdGVtIG92ZXJsb2FkIGZvdW5kXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgbmV3IGV4cHJlc3Npb246IG9iai5zZXRfaXRlbShpbmRleCwgdmFsdWUpXG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uVGV4dCA9IGV4cHJlc3Npb24uZ2V0VGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgaW5kZXhUZXh0ID0gYXJndW1lbnRFeHByZXNzaW9uLmdldFRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlVGV4dCA9IHZhbHVlRXhwcmVzc2lvbi5nZXRUZXh0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNldEl0ZW1DYWxsID0gYCR7ZXhwcmVzc2lvblRleHR9LiR7U0VUX0lURU1fTkFNRX0oJHtpbmRleFRleHR9LCAke3ZhbHVlVGV4dH0pYDtcblxuICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgZW50aXJlIGJpbmFyeSBleHByZXNzaW9uXG4gICAgICAgICAgICBwYXJlbnQucmVwbGFjZVdpdGhUZXh0KHNldEl0ZW1DYWxsKTtcblxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBnZXR0ZXI6IG9ialtpbmRleF1cbiAgICAgICAgICAgIGlmIChnZXRJdGVtTWV0aG9kcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBmaW5kIGEgbWF0Y2hpbmcgZ2V0X2l0ZW0gbWV0aG9kXG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZ0dldEl0ZW0gPSBnZXRJdGVtTWV0aG9kcy5maW5kKG1ldGhvZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXhQYXJhbVR5cGUgPSBwYXJhbXNbMF0uZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4QXJnVHlwZSA9IGFyZ3VtZW50RXhwcmVzc2lvbi5nZXRUeXBlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlQ2hlY2tlciA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlcjtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlQ2hlY2tlci5pc1R5cGVBc3NpZ25hYmxlVG8oaW5kZXhBcmdUeXBlLCBpbmRleFBhcmFtVHlwZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFtYXRjaGluZ0dldEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAvLyBObyBzdWl0YWJsZSBnZXRfaXRlbSBvdmVybG9hZCBmb3VuZFxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIG5ldyBleHByZXNzaW9uOiBvYmouZ2V0X2l0ZW0oaW5kZXgpXG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uVGV4dCA9IGV4cHJlc3Npb24uZ2V0VGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgaW5kZXhUZXh0ID0gYXJndW1lbnRFeHByZXNzaW9uLmdldFRleHQoKTtcblxuICAgICAgICAgICAgY29uc3QgZ2V0SXRlbUNhbGwgPSBgJHtleHByZXNzaW9uVGV4dH0uJHtHRVRfSVRFTV9OQU1FfSgke2luZGV4VGV4dH0pYDtcblxuICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgZWxlbWVudCBhY2Nlc3MgZXhwcmVzc2lvblxuICAgICAgICAgICAgZWxlbWVudEFjY2Vzcy5yZXBsYWNlV2l0aFRleHQoZ2V0SXRlbUNhbGwpO1xuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudEFjY2VzcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFN5bnRheEtpbmQsIE5vZGUsIFR5cGVDaGVja2VyLCBQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24sIEJpbmFyeUV4cHJlc3Npb24gfSBmcm9tICd0cy1tb3JwaCc7XG5pbXBvcnQge1RyYW5zZm9ybWF0aW9uQ29udGV4dH0gZnJvbSBcIi4vVHJhbnNmb3JtYXRpb25Db250ZXh0XCI7XG5pbXBvcnQge0lUcmFuc2Zvcm1lcn0gZnJvbSBcIi4vSVRyYW5zZm9ybWVyXCI7XG5cbmV4cG9ydCBjbGFzcyBSZWZUcmFuc2Zvcm1lciBpbXBsZW1lbnRzIElUcmFuc2Zvcm1lciB7XG4gICAgbm9kZVR5cGVzID0gW1N5bnRheEtpbmQuQmluYXJ5RXhwcmVzc2lvbiwgU3ludGF4S2luZC5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb25dO1xuICAgIHRyYW5zZm9ybWVyS2V5ID0gXCJSZWZUcmFuc2Zvcm1lclwiO1xuXG4gICAgdHJhbnNmb3JtTm9kZShub2RlOiBOb2RlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQ6IFRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IE5vZGUge1xuICAgICAgICBcbiAgICAgICAgbGV0IG5ld05vZGUgPSBub2RlO1xuICAgICAgICBcbiAgICAgICAgaWYgKE5vZGUuaXNCaW5hcnlFeHByZXNzaW9uKG5vZGUpICYmIG5vZGUuZ2V0T3BlcmF0b3JUb2tlbigpLmdldEtpbmQoKSA9PT0gU3ludGF4S2luZC5FcXVhbHNUb2tlbikge1xuICAgICAgICAgICAgY29uc3QgYmluYXJ5RXhwcmVzc2lvbiA9IG5vZGUgYXMgQmluYXJ5RXhwcmVzc2lvbjtcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBiaW5hcnlFeHByZXNzaW9uLmdldExlZnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gYmluYXJ5RXhwcmVzc2lvbi5nZXRSaWdodCgpO1xuXG4gICAgICAgICAgICBpZiAoTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihsZWZ0KSAmJiBsZWZ0LmdldE5hbWUoKSA9PT0gJ3ZhbHVlJyAmJiB0aGlzLmlzUmVmVHlwZShsZWZ0LmdldEV4cHJlc3Npb24oKSwgdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZkV4cHJlc3Npb24gPSBsZWZ0LmdldEV4cHJlc3Npb24oKS5nZXRUZXh0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVFeHByZXNzaW9uID0gcmlnaHQuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgIG5ld05vZGUgPSBub2RlLnJlcGxhY2VXaXRoVGV4dChgJHNldCgke3JlZkV4cHJlc3Npb259LCAke3ZhbHVlRXhwcmVzc2lvbn0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihub2RlKSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uID0gbm9kZSBhcyBQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb247XG4gICAgICAgICAgICBpZiAocHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uLmdldE5hbWUoKSA9PT0gJ3ZhbHVlJyAmJiB0aGlzLmlzUmVmVHlwZShwcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24uZ2V0RXhwcmVzc2lvbigpLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmRXhwcmVzc2lvbiA9IHByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbi5nZXRFeHByZXNzaW9uKCkuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgIG5ld05vZGUgPSBub2RlLnJlcGxhY2VXaXRoVGV4dChgJHVucmVmKCR7cmVmRXhwcmVzc2lvbn0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNSZWZUeXBlKG5vZGU6IE5vZGUsIHR5cGVDaGVja2VyOiBUeXBlQ2hlY2tlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24obm9kZSk7XG4gICAgICAgIGNvbnN0IHR5cGVTeW1ib2wgPSB0eXBlLmdldFN5bWJvbCgpO1xuICAgICAgICByZXR1cm4gdHlwZVN5bWJvbCA/IHR5cGVTeW1ib2wuZ2V0TmFtZSgpID09PSAnJFJlZicgOiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0NhbGxFeHByZXNzaW9uLCBNZXRob2REZWNsYXJhdGlvbiwgTm9kZSwgU291cmNlRmlsZSwgU3ludGF4S2luZCwgVHlwZSwgVHlwZUZvcm1hdEZsYWdzfSBmcm9tIFwidHMtbW9ycGhcIjtcbmltcG9ydCB7XG4gICAgR2VuaWVzSW5zdGFuY2VQcm9wTmFtZSxcbiAgICBnZXRJc1VuaXR5QVBJRGVjbGFyYXRpb24sXG4gICAgZ2V0VHlwZU5hbWVBbmRFbnN1cmVJbXBvcnRlZCxcbiAgICBpc0dlbmllc1NjcmlwdFR5cGVcbn0gZnJvbSBcIi4uL0NvbXBpbGVyVXRpbHNcIjtcbmltcG9ydCB7VHJhbnNmb3JtYXRpb25Db250ZXh0fSBmcm9tIFwiLi9UcmFuc2Zvcm1hdGlvbkNvbnRleHRcIjtcbmltcG9ydCB7SVRyYW5zZm9ybWVyfSBmcm9tIFwiLi9JVHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7c2VsZWN0QmVzdE92ZXJsb2FkfSBmcm9tIFwiLi4vTWV0aG9kT3ZlcmxvYWRVdGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgRXh0ZW5zaW9uTWV0aG9kVHJhbnNmb3JtZXIgaW1wbGVtZW50cyBJVHJhbnNmb3JtZXIge1xuICAgIG5vZGVUeXBlcyA9IFtTeW50YXhLaW5kLkNhbGxFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiRXh0ZW5zaW9uTWV0aG9kVHJhbnNmb3JtZXJcIjtcblxuICAgIHRyYW5zZm9ybU5vZGUobm9kZTogTm9kZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0OiBUcmFuc2Zvcm1hdGlvbkNvbnRleHQpOiBOb2RlIHtcbiAgICAgICAgaWYgKCFOb2RlLmlzQ2FsbEV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FsbEV4cHJlc3Npb24gPSBub2RlIGFzIENhbGxFeHByZXNzaW9uO1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gY2FsbEV4cHJlc3Npb24uZ2V0RXhwcmVzc2lvbigpO1xuXG4gICAgICAgIGlmICghTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9wZXJ0eUFjY2VzcyA9IGV4cHJlc3Npb24uYXNLaW5kT3JUaHJvdyhTeW50YXhLaW5kLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbik7XG4gICAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBwcm9wZXJ0eUFjY2Vzcy5nZXROYW1lKCk7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gcHJvcGVydHlBY2Nlc3MuZ2V0RXhwcmVzc2lvbigpO1xuICAgICAgICBjb25zdCB0eXBlID0gaW5zdGFuY2UuZ2V0VHlwZSgpO1xuXG4gICAgICAgIGNvbnN0IHN5bWJvbCA9IHByb3BlcnR5QWNjZXNzLmdldFN5bWJvbCgpO1xuICAgICAgICBpZiAoIXN5bWJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgICAgIFxuICAgICAgICBpZighZGVjbGFyYXRpb25zIHx8IGRlY2xhcmF0aW9ucy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG92ZXJsb2FkRGVjbGFyYXRpb25zID0gZGVjbGFyYXRpb25zLmZpbHRlcihkZWNsID0+XG4gICAgICAgICAgICBOb2RlLmlzTWV0aG9kRGVjbGFyYXRpb24oZGVjbCkgfHwgTm9kZS5pc01ldGhvZFNpZ25hdHVyZShkZWNsKVxuICAgICAgICApIGFzIE1ldGhvZERlY2xhcmF0aW9uW107XG5cbiAgICAgICAgaWYgKG92ZXJsb2FkRGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXRob2REZWNsYXJhdGlvbiA9IG92ZXJsb2FkRGVjbGFyYXRpb25zWzBdIGFzIE1ldGhvZERlY2xhcmF0aW9uO1xuXG4gICAgICAgIGlmICghZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKG1ldGhvZERlY2xhcmF0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlQ2hlY2tlciA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlcjtcblxuICAgICAgICAvLyBQZXJmb3JtIG92ZXJsb2FkIHJlc29sdXRpb25cbiAgICAgICAgY29uc3QgYmVzdE92ZXJsb2FkID0gc2VsZWN0QmVzdE92ZXJsb2FkKG92ZXJsb2FkRGVjbGFyYXRpb25zLCBjYWxsRXhwcmVzc2lvbiwgdHlwZUNoZWNrZXIpO1xuXG4gICAgICAgIGlmICghYmVzdE92ZXJsb2FkKSB7XG4gICAgICAgICAgICAvLyBObyBzdWl0YWJsZSBvdmVybG9hZCBmb3VuZDsgZmFsbGJhY2sgdG8gdGhlIGZpcnN0IG92ZXJsb2FkXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGpzRG9jVGFncyA9IGJlc3RPdmVybG9hZC5nZXRKc0RvY3MoKS5mbGF0TWFwKGQgPT4gZC5nZXRUYWdzKCkpIHx8IFtdO1xuXG4gICAgICAgIGlmICghanNEb2NUYWdzLnNvbWUodGFnID0+IHRhZy5nZXRUYWdOYW1lKCkgPT09ICdleHRlbnNpb24nKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBleHRlbnNpb25UYWcgPSBqc0RvY1RhZ3MuZmluZCh0YWcgPT4gdGFnLmdldFRhZ05hbWUoKSA9PT0gJ2V4dGVuc2lvbicpO1xuXG4gICAgICAgIGlmICghZXh0ZW5zaW9uVGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBleHRlbnNpb25HZW5lcmljQXJnSW5kZXg6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgIC8vIFBhcnNlICBAZXh0ZW5zaW9uLWdlbmVyaWMtYXJnLWluZGV4IHdoaWNoIG1hcHMgdG8gdGhlIGdlbmVyaWMgYXJndW1lbnQgb2YgdGhlIGB0aGlzYCBwYXJhbWV0ZXJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uR2VuZXJpY0FyZ0luZGV4VGFnID0ganNEb2NUYWdzLmZpbmQoXG4gICAgICAgICAgICAodCkgPT4gdC5nZXRUYWdOYW1lKCkgPT09IFwiZXh0ZW5zaW9uLWdlbmVyaWMtYXJnLWluZGV4XCJcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZXh0ZW5zaW9uR2VuZXJpY0FyZ0luZGV4VGFnKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZXh0ZW5zaW9uR2VuZXJpY0FyZ0luZGV4VGFnLmdldENvbW1lbnRUZXh0KCkgfHwgXCIwXCI7XG4gICAgICAgICAgICBleHRlbnNpb25HZW5lcmljQXJnSW5kZXggPSBwYXJzZUludCh0ZXh0LCAxMCk7XG4gICAgICAgICAgICBpZiAoaXNOYU4oZXh0ZW5zaW9uR2VuZXJpY0FyZ0luZGV4KSkge1xuICAgICAgICAgICAgICAgIGV4dGVuc2lvbkdlbmVyaWNBcmdJbmRleCA9IG51bGw7IC8vIGZhbGxiYWNrIGlmIHBhcnNlIGZhaWxzXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBleHRlbnNpb25Db21tZW50ID0gZXh0ZW5zaW9uVGFnLmdldENvbW1lbnRUZXh0KCk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGV4dGVuc2lvbkNsYXNzLFxuICAgICAgICAgICAgZXh0ZW5zaW9uTWV0aG9kLFxuICAgICAgICAgICAgdHlwZVBhcmFtZXRlcnNcbiAgICAgICAgfSA9IHRoaXMucGFyc2VFeHRlbnNpb25Db21tZW50KGV4dGVuc2lvbkNvbW1lbnQsIG1ldGhvZE5hbWUpO1xuXG5cbiAgICAgICAgY29uc3Qgc291cmNlRmlsZSA9IG5vZGUuZ2V0U291cmNlRmlsZSgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdHlwZUFyZ3MgPSB0aGlzLmV4dHJhY3RBbmRPcmRlclR5cGVBcmd1bWVudHMoaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0T3ZlcmxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25HZW5lcmljQXJnSW5kZXgpO1xuXG5cbiAgICAgICAgc291cmNlRmlsZS5maXhNaXNzaW5nSW1wb3J0cygpO1xuXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSBleHRlbnNpb25DbGFzcy5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBjbGFzc1Nob3J0TmFtZSA9IHBhcnRzLnBvcCgpIHx8ICcnO1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSBwYXJ0cy5qb2luKCcuJyk7XG5cbiAgICAgICAgdGhpcy5lbnN1cmVJbXBvcnQoc291cmNlRmlsZSwgY2xhc3NTaG9ydE5hbWUsIG5hbWVzcGFjZSk7XG5cbiAgICAgICAgY29uc3QgaW5zdGFuY2VUZXh0ID0gaXNHZW5pZXNTY3JpcHRUeXBlKHR5cGUpID8gXCIvL0B0cy1pZ25vcmVcXG5cIiArIGluc3RhbmNlLmdldFRleHQoKSArIFwiLlwiICsgR2VuaWVzSW5zdGFuY2VQcm9wTmFtZSA6IGluc3RhbmNlLmdldFRleHQoKTtcbiAgICAgICAgY29uc3QgYXJnc1RleHQgPSBhcmdzLm1hcChhcmcgPT4gYXJnLmdldEZ1bGxUZXh0KCkpLmpvaW4oXCIsIFwiKTtcblxuICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIG5ldyBleHByZXNzaW9uIHRleHRcbiAgICAgICAgY29uc3QgbmV3RXhwcmVzc2lvblRleHQgPSB0eXBlQXJncy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IGAke2NsYXNzU2hvcnROYW1lfS4ke2V4dGVuc2lvbk1ldGhvZH08JHt0eXBlQXJncy5qb2luKFwiLCBcIil9Pigke2luc3RhbmNlVGV4dH0sICR7YXJnc1RleHR9KWBcbiAgICAgICAgICAgIDogYCR7Y2xhc3NTaG9ydE5hbWV9LiR7ZXh0ZW5zaW9uTWV0aG9kfSgke2luc3RhbmNlVGV4dH0sICR7YXJnc1RleHR9KWA7XG5cbiAgICAgICAgcmV0dXJuIGNhbGxFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dChuZXdFeHByZXNzaW9uVGV4dCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZUV4dGVuc2lvbkNvbW1lbnQoY29tbWVudDogc3RyaW5nIHwgdW5kZWZpbmVkLCBtZXRob2ROYW1lOiBzdHJpbmcpOiB7XG4gICAgICAgIGV4dGVuc2lvbkNsYXNzOiBzdHJpbmcsXG4gICAgICAgIGV4dGVuc2lvbk1ldGhvZDogc3RyaW5nLFxuICAgICAgICB0eXBlUGFyYW1ldGVyczogc3RyaW5nW11cbiAgICB9IHtcbiAgICAgICAgaWYgKCFjb21tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge2V4dGVuc2lvbkNsYXNzOiBcIlwiLCBleHRlbnNpb25NZXRob2Q6IG1ldGhvZE5hbWUsIHR5cGVQYXJhbWV0ZXJzOiBbXX07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWdleCA9IC9eKD88bmFtZXNwYWNlPlthLXpBLVpfXVxcdyooPzpcXC5bYS16QS1aX11cXHcqKSopXFwuKD88bWV0aG9kPlthLXpBLVpfXVxcdyopXFxzKig/OjwoPzxhcmd1bWVudHM+W14+XSopPik/JC87XG4gICAgICAgIGNvbnN0IG1hdGNoID0gY29tbWVudC5tYXRjaChyZWdleCk7XG5cbiAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmdyb3Vwcykge1xuICAgICAgICAgICAgY29uc3Qge25hbWVzcGFjZSwgbWV0aG9kLCBhcmd1bWVudHM6IHR5cGVQYXJhbXN9ID0gbWF0Y2guZ3JvdXBzO1xuICAgICAgICAgICAgY29uc3QgdHlwZVBhcmFtZXRlcnMgPSB0eXBlUGFyYW1zID8gdHlwZVBhcmFtcy5zcGxpdCgnLCcpLm1hcChwYXJhbSA9PiBwYXJhbS50cmltKCkpIDogW107XG4gICAgICAgICAgICByZXR1cm4ge2V4dGVuc2lvbkNsYXNzOiBuYW1lc3BhY2UsIGV4dGVuc2lvbk1ldGhvZDogbWV0aG9kLCB0eXBlUGFyYW1ldGVyc307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge2V4dGVuc2lvbkNsYXNzOiBcIlwiLCBleHRlbnNpb25NZXRob2Q6IG1ldGhvZE5hbWUsIHR5cGVQYXJhbWV0ZXJzOiBbXX07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlbnN1cmVJbXBvcnQoc291cmNlRmlsZTogU291cmNlRmlsZSwgY2xhc3NOYW1lOiBzdHJpbmcsIG5hbWVTcGFjZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGltcG9ydERlY2xhcmF0aW9ucyA9IHNvdXJjZUZpbGUuZ2V0SW1wb3J0RGVjbGFyYXRpb25zKCk7XG5cbiAgICAgICAgbGV0IGhhc0ltcG9ydCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGltcG9ydERlY2wgb2YgaW1wb3J0RGVjbGFyYXRpb25zKSB7XG4gICAgICAgICAgICBpZiAoaW1wb3J0RGVjbC5nZXRNb2R1bGVTcGVjaWZpZXIoKS5nZXRMaXRlcmFsVGV4dCgpID09PSBuYW1lU3BhY2UpIHtcbiAgICAgICAgICAgICAgICBoYXNJbXBvcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVkSW1wb3J0cyA9IGltcG9ydERlY2wuZ2V0TmFtZWRJbXBvcnRzKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxyZWFkeUltcG9ydGVkID0gbmFtZWRJbXBvcnRzLnNvbWUobmFtZWRJbXBvcnQgPT4gbmFtZWRJbXBvcnQuZ2V0TmFtZSgpID09PSBjbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgIGlmICghYWxyZWFkeUltcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydERlY2wuYWRkTmFtZWRJbXBvcnQoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhhc0ltcG9ydCkge1xuICAgICAgICAgICAgc291cmNlRmlsZS5hZGRJbXBvcnREZWNsYXJhdGlvbih7XG4gICAgICAgICAgICAgICAgbmFtZWRJbXBvcnRzOiBbe25hbWU6IGNsYXNzTmFtZX1dLFxuICAgICAgICAgICAgICAgIG1vZHVsZVNwZWNpZmllcjogbmFtZVNwYWNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFR5cGVOYW1lKHR5cGU6IFR5cGUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdHlwZS5nZXRUZXh0KHVuZGVmaW5lZCwgVHlwZUZvcm1hdEZsYWdzLk5vbmUpO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGV4dHJhY3RBbmRPcmRlclR5cGVBcmd1bWVudHMoaW5zdGFuY2U6IE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kRGVjbGFyYXRpb246IE1ldGhvZERlY2xhcmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlUGFyYW1ldGVyczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbkdlbmVyaWNBcmdJbmRleDogbnVtYmVyIHwgbnVsbCk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2VUeXBlID0gaW5zdGFuY2UuZ2V0VHlwZSgpO1xuXG4gICAgICAgIGNvbnN0IHR5cGVBcmdzID0gaW5zdGFuY2VUeXBlLmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICAgICAgY29uc3QgdHlwZVBhcmFtcyA9IGluc3RhbmNlVHlwZS5nZXRTeW1ib2xPclRocm93KCkuZ2V0RGVjbGFyZWRUeXBlKCkuZ2V0VHlwZUFyZ3VtZW50cygpO1xuICAgICAgICBjb25zdCB0eXBlQXJnTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcblxuICAgICAgICB0eXBlQXJncy5mb3JFYWNoKCh0eXBlQXJnLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyYW0gPSB0eXBlUGFyYW1zW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHR5cGVBcmdNYXAuc2V0KHBhcmFtLmdldFRleHQoKSwgdHlwZUFyZy5nZXRUZXh0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjYWxsVHlwZUFyZ3MgPSBjYWxsRXhwcmVzc2lvbi5nZXRUeXBlQXJndW1lbnRzKCk7XG4gICAgICAgIGNvbnN0IGNhbGxUeXBlUGFyYW1zID0gbWV0aG9kRGVjbGFyYXRpb24uZ2V0VHlwZVBhcmFtZXRlcnMoKTtcblxuICAgICAgICBjYWxsVHlwZUFyZ3MuZm9yRWFjaCgodHlwZUFyZywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtID0gY2FsbFR5cGVQYXJhbXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgdHlwZUFyZ01hcC5zZXQocGFyYW0uZ2V0VGV4dCgpLCB0eXBlQXJnLmdldFRleHQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE9yZGVyIHR5cGUgYXJndW1lbnRzIGJhc2VkIG9uIHRoZSB0eXBlIHBhcmFtZXRlciBvcmRlciBpbiB0aGUgY29tbWVudFxuICAgICAgICBsZXQgc29ydGVkUGFyYW1zID0gdHlwZVBhcmFtZXRlcnMubWFwKHBhcmFtID0+IHR5cGVBcmdNYXAuZ2V0KHBhcmFtKSB8fCBwYXJhbSk7XG5cbiAgICAgICAgLy8gMikgSWYgd2UgaGF2ZSBhbiBleHRlbnNpb25HZW5lcmljQXJnSW5kZXgsIGluc2VydCB0aGUgaW5zdGFuY2XigJlzIHR5cGVcbiAgICAgICAgaWYgKGV4dGVuc2lvbkdlbmVyaWNBcmdJbmRleCAhPT0gbnVsbCAmJiBleHRlbnNpb25HZW5lcmljQXJnSW5kZXggPj0gMCAmJiBleHRlbnNpb25HZW5lcmljQXJnSW5kZXggPD0gc29ydGVkUGFyYW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBnZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkKGluc3RhbmNlVHlwZSwgY2FsbEV4cHJlc3Npb24uZ2V0U291cmNlRmlsZSgpKTtcbiAgICAgICAgICAgIHNvcnRlZFBhcmFtcy5zcGxpY2UoZXh0ZW5zaW9uR2VuZXJpY0FyZ0luZGV4LCAwLCB0aGlzLmdldFR5cGVOYW1lKGluc3RhbmNlVHlwZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNvcnRlZFBhcmFtcztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTeW50YXhLaW5kLCBOb2RlLCBDYWxsRXhwcmVzc2lvbiwgVHlwZUNoZWNrZXIsIFR5cGUgfSBmcm9tICd0cy1tb3JwaCc7XG5pbXBvcnQge1xuICAgIGNvbnZlcnRUb0FsaWFzUGF0aCwgR2VuaWVzU2NyaXB0VHlwZSwgZ2V0RnVsbFR5cGVOYW1lLFxuICAgIGdldEdlbmllc1NjcmlwdFR5cGVGcm9tVHlwZSxcbiAgICBnZXRJc1VuaXR5QVBJVHlwZVxufSBmcm9tICcuLi9Db21waWxlclV0aWxzJztcbmltcG9ydCB7VHJhbnNmb3JtYXRpb25Db250ZXh0fSBmcm9tIFwiLi9UcmFuc2Zvcm1hdGlvbkNvbnRleHRcIjtcbmltcG9ydCB7SVRyYW5zZm9ybWVyfSBmcm9tIFwiLi9JVHJhbnNmb3JtZXJcIjtcblxuZXhwb3J0IGNsYXNzIFNjcmlwdGFibGVPYmplY3RDcmVhdGVJbnN0YW5jZVRyYW5zZm9ybWVyIGltcGxlbWVudHMgSVRyYW5zZm9ybWVyIHtcbiAgICBub2RlVHlwZXMgPSBbU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbl07XG4gICAgdHJhbnNmb3JtZXJLZXkgPSBcIlNjcmlwdGFibGVPYmplY3RDcmVhdGVJbnN0YW5jZVRyYW5zZm9ybWVyXCI7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGxldCBuZXdOb2RlID0gbm9kZTtcblxuICAgICAgICBpZiAoTm9kZS5pc0NhbGxFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsRXhwcmVzc2lvbiA9IG5vZGUgYXMgQ2FsbEV4cHJlc3Npb247XG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gY2FsbEV4cHJlc3Npb24uZ2V0RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgY29uc3QgdHlwZUFyZ3VtZW50cyA9IGNhbGxFeHByZXNzaW9uLmdldFR5cGVBcmd1bWVudHMoKTtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZEFyZ3VtZW50cyA9IGNhbGxFeHByZXNzaW9uLmdldEFyZ3VtZW50cygpO1xuXG4gICAgICAgICAgICBpZiAodHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwIHx8IHRoaXMuaXNUeXBlb2ZBcmd1bWVudChtZXRob2RBcmd1bWVudHMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZU5vZGUgPSBleHByZXNzaW9uLmdldExhc3RDaGlsZEJ5S2luZChTeW50YXhLaW5kLklkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIGlmICghbWV0aG9kTmFtZU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWVOb2RlLmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ0NyZWF0ZUluc3RhbmNlJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkID0gZXhwcmVzc2lvbi5nZXRGaXJzdENoaWxkKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFzc1R5cGUgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24oZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzU2NyaXB0YWJsZU9iamVjdChjbGFzc1R5cGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHVyblR5cGUgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24oY2FsbEV4cHJlc3Npb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZUFyZ3VtZW50ID0gdHlwZUFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlQXJndW1lbnRUeXBlID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKHR5cGVBcmd1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHRoaXMucHJvY2Vzc1R5cGVBcmd1bWVudChjYWxsRXhwcmVzc2lvbiwgdHlwZUFyZ3VtZW50VHlwZSwgZmFsc2UsIG1ldGhvZE5hbWUsIGZpcnN0Q2hpbGQsIHJldHVyblR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVHlwZW9mQXJndW1lbnQobWV0aG9kQXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudCA9IHRoaXMuZ2V0VHlwZUZyb21UeXBlb2ZBcmd1bWVudChtZXRob2RBcmd1bWVudHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlQXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZUFyZ3VtZW50VHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0eXBlQXJndW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gdGhpcy5wcm9jZXNzVHlwZUFyZ3VtZW50KGNhbGxFeHByZXNzaW9uLCB0eXBlQXJndW1lbnRUeXBlLCB0cnVlLCBtZXRob2ROYW1lLCBmaXJzdENoaWxkLCByZXR1cm5UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzVHlwZW9mQXJndW1lbnQoYXJnczogTm9kZVtdKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA+IDAgJiYgYXJnc1swXS5nZXRUZXh0KCkuc3RhcnRzV2l0aCgnJHR5cGVvZignKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFR5cGVGcm9tVHlwZW9mQXJndW1lbnQoYXJnOiBOb2RlKTogTm9kZSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gYXJnLmdldEZpcnN0Q2hpbGRCeUtpbmQoU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbik7XG4gICAgICAgIGlmIChjYWxsRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgY29uc3QgdHlwZUFyZ3VtZW50ID0gY2FsbEV4cHJlc3Npb24uZ2V0QXJndW1lbnRzKClbMF07XG4gICAgICAgICAgICBpZiAoTm9kZS5pc1R5cGVOb2RlKHR5cGVBcmd1bWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZUFyZ3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzVHlwZUFyZ3VtZW50KGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbiwgdHlwZUFyZ3VtZW50VHlwZTogVHlwZSwgaXNUeXBlT2ZBcmcgOiBib29sZWFuLCBtZXRob2ROYW1lOiBzdHJpbmcsIGZpcnN0Q2hpbGQ6IE5vZGUsIHJldHVyblR5cGU6IFR5cGUpOiBOb2RlIHtcbiAgICAgICAgaWYgKGdldElzVW5pdHlBUElUeXBlKHR5cGVBcmd1bWVudFR5cGUpKSB7XG5cbiAgICAgICAgICAgIGlmKGlzVHlwZU9mQXJnKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdHlwZU5hbWUgPSB0aGlzLmdldFR5cGVOYW1lKHR5cGVBcmd1bWVudFR5cGUpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2FsbEV4cHJlc3Npb25UZXh0ID0gdGhpcy5jcmVhdGVPdmVybG9hZGVkQ2FsbEV4cHJlc3Npb24oY2FsbEV4cHJlc3Npb24sIGAkdHlwZW9mKCR7dHlwZU5hbWV9KWAsIG1ldGhvZE5hbWUsIGZpcnN0Q2hpbGQsIHJldHVyblR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dChuZXdDYWxsRXhwcmVzc2lvblRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2NyaXB0VHlwZSA9IGdldEdlbmllc1NjcmlwdFR5cGVGcm9tVHlwZSh0eXBlQXJndW1lbnRUeXBlKTtcbiAgICAgICAgICAgIGlmIChzY3JpcHRUeXBlID09PSBHZW5pZXNTY3JpcHRUeXBlLlNjcmlwdGFibGVPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGdldEZ1bGxUeXBlTmFtZSh0eXBlQXJndW1lbnRUeXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDYWxsRXhwcmVzc2lvblRleHQgPSB0aGlzLmNyZWF0ZU92ZXJsb2FkZWRDYWxsRXhwcmVzc2lvbihjYWxsRXhwcmVzc2lvbiwgYFwiJHt0eXBlTmFtZX1cImAsIG1ldGhvZE5hbWUsIGZpcnN0Q2hpbGQsIHJldHVyblR5cGUsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsRXhwcmVzc2lvbi5yZXBsYWNlV2l0aFRleHQobmV3Q2FsbEV4cHJlc3Npb25UZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsRXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzU2NyaXB0YWJsZU9iamVjdCh0eXBlOiBUeXBlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQ6IFRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXR5cGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjb25zdCBzeW1ib2wgPSB0eXBlLmdldFN5bWJvbCgpO1xuICAgICAgICBpZiAoIXN5bWJvbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChzeW1ib2wuZ2V0TmFtZSgpID09PSAnU2NyaXB0YWJsZU9iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5oZXJpdHNGcm9tKHR5cGUsIFsnU2NyaXB0YWJsZU9iamVjdCddLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5oZXJpdHNGcm9tKHR5cGU6IFR5cGUsIGJhc2VOYW1lczogc3RyaW5nW10sIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGJhc2VUeXBlcyA9IHRoaXMuZ2V0QmFzZVR5cGVzKHR5cGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCk7XG4gICAgICAgIGZvciAoY29uc3QgYmFzZVR5cGUgb2YgYmFzZVR5cGVzKSB7XG4gICAgICAgICAgICBjb25zdCBiYXNlVHlwZU5hbWUgPSBiYXNlVHlwZS5nZXRTeW1ib2woKT8uZ2V0TmFtZSgpO1xuICAgICAgICAgICAgaWYgKGJhc2VUeXBlTmFtZSAmJiBiYXNlTmFtZXMuaW5jbHVkZXMoYmFzZVR5cGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaW5oZXJpdHNGcm9tKGJhc2VUeXBlLCBiYXNlTmFtZXMsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRCYXNlVHlwZXModHlwZTogVHlwZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0OiBUcmFuc2Zvcm1hdGlvbkNvbnRleHQpOiBUeXBlW10ge1xuICAgICAgICBjb25zdCBiYXNlVHlwZXM6IFR5cGVbXSA9IFtdO1xuICAgICAgICBjb25zdCBzeW1ib2wgPSB0eXBlLmdldFN5bWJvbCgpO1xuICAgICAgICBpZiAoIXN5bWJvbCkgcmV0dXJuIGJhc2VUeXBlcztcblxuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBzeW1ib2wuZ2V0RGVjbGFyYXRpb25zKCk7XG4gICAgICAgIGlmICghZGVjbGFyYXRpb25zKSByZXR1cm4gYmFzZVR5cGVzO1xuXG4gICAgICAgIGZvciAoY29uc3QgZGVjbGFyYXRpb24gb2YgZGVjbGFyYXRpb25zKSB7XG4gICAgICAgICAgICBpZiAoTm9kZS5pc0NsYXNzRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVyaXRhZ2VDbGF1c2VzID0gZGVjbGFyYXRpb24uZ2V0SGVyaXRhZ2VDbGF1c2VzKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoZXJpdGFnZUNsYXVzZSBvZiBoZXJpdGFnZUNsYXVzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZXMgPSBoZXJpdGFnZUNsYXVzZS5nZXRUeXBlTm9kZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0eXBlTm9kZSBvZiB0eXBlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZVR5cGUgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24odHlwZU5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVR5cGVzLnB1c2goYmFzZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVHlwZXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUeXBlTmFtZSh0eXBlOiBUeXBlKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICAgICAgaWYgKHN5bWJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbC5nZXROYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGUuZ2V0VGV4dCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlT3ZlcmxvYWRlZENhbGxFeHByZXNzaW9uKGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbiwgdHlwZUFyZ3VtZW50VGV4dDogc3RyaW5nLCBtZXRob2ROYW1lOiBzdHJpbmcsIGZpcnN0Q2hpbGQ6IE5vZGUsIHJldHVyblR5cGU6IFR5cGUsIGFkZFRzSWdub3JlOiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBtZXRob2RBcmd1bWVudHMgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKS5tYXAoYXJnID0+IGFyZy5nZXRUZXh0KCkpLmpvaW4oJywgJyk7XG4gICAgICAgIGNvbnN0IGNhc3RUeXBlID0gcmV0dXJuVHlwZS5nZXRUZXh0KCk7XG5cbiAgICAgICAgbGV0IG5ld0NhbGwgPSBgKCR7Zmlyc3RDaGlsZC5nZXRGdWxsVGV4dCgpfS4ke21ldGhvZE5hbWV9KCR7dHlwZUFyZ3VtZW50VGV4dH0ke21ldGhvZEFyZ3VtZW50cyA/ICcsICcgKyBtZXRob2RBcmd1bWVudHMgOiAnJ30pIGFzICR7Y2FzdFR5cGV9KWA7XG5cbiAgICAgICAgaWYgKGFkZFRzSWdub3JlKSB7XG4gICAgICAgICAgICBuZXdDYWxsID0gYCR7bmV3Q2FsbH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld0NhbGw7XG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibWFnaWMtc3RyaW5nXCIpOyIsImltcG9ydCB7IFN5bnRheEtpbmQsIE5vZGUsIENhbGxFeHByZXNzaW9uLCBUeXBlQ2hlY2tlciwgVHlwZSB9IGZyb20gJ3RzLW1vcnBoJztcbmltcG9ydCB7XG4gICAgY29tcG9uZW50TWV0aG9kcyxcbiAgICBjb252ZXJ0VG9BbGlhc1BhdGgsXG4gICAgR2VuaWVzU2NyaXB0VHlwZSxcbiAgICBnZXRGdWxsVHlwZU5hbWUsXG4gICAgZ2V0R2VuaWVzU2NyaXB0VHlwZUZyb21UeXBlLFxuICAgIGdldElzVW5pdHlBUElUeXBlLCBpc09ySW5oZXJpdHNGcm9tR2FtZU9iamVjdE9yQ29tcG9uZW50XG59IGZyb20gJy4uL0NvbXBpbGVyVXRpbHMnO1xuaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25Db250ZXh0IH0gZnJvbSAnLi9UcmFuc2Zvcm1hdGlvbkNvbnRleHQnO1xuaW1wb3J0IHsgSVRyYW5zZm9ybWVyIH0gZnJvbSAnLi9JVHJhbnNmb3JtZXInO1xuXG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRDYWxsVHJhbnNmb3JtZXIgaW1wbGVtZW50cyBJVHJhbnNmb3JtZXIge1xuICAgIG5vZGVUeXBlcyA9IFtTeW50YXhLaW5kLkNhbGxFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiQ29tcG9uZW50Q2FsbFRyYW5zZm9ybWVyXCI7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG5cbiAgICAgICAgaWYgKE5vZGUuaXNDYWxsRXhwcmVzc2lvbihub2RlKSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbEV4cHJlc3Npb24gPSBub2RlIGFzIENhbGxFeHByZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudHMgPSBjYWxsRXhwcmVzc2lvbi5nZXRUeXBlQXJndW1lbnRzKCk7XG4gICAgICAgICAgICBjb25zdCBtZXRob2RBcmd1bWVudHMgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVBcmd1bWVudHMubGVuZ3RoID4gMCB8fCB0aGlzLmlzVHlwZW9mQXJndW1lbnQobWV0aG9kQXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZE5hbWVOb2RlID0gZXhwcmVzc2lvbi5nZXRMYXN0Q2hpbGRCeUtpbmQoU3ludGF4S2luZC5JZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIW1ldGhvZE5hbWVOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lTm9kZS5nZXRUZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudE1ldGhvZHMuaGFzKG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBleHByZXNzaW9uLmdldEZpcnN0Q2hpbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzVHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihmaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3JJbmhlcml0c0Zyb21HYW1lT2JqZWN0T3JDb21wb25lbnQoY2xhc3NUeXBlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXR1cm5UeXBlID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGNhbGxFeHByZXNzaW9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVBcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudCA9IHR5cGVBcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZUFyZ3VtZW50VHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0eXBlQXJndW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzLnByb2Nlc3NUeXBlQXJndW1lbnQoY2FsbEV4cHJlc3Npb24sIHR5cGVBcmd1bWVudFR5cGUsIGZhbHNlLCByZXR1cm5UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1R5cGVvZkFyZ3VtZW50KG1ldGhvZEFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlQXJndW1lbnQgPSB0aGlzLmdldFR5cGVGcm9tVHlwZW9mQXJndW1lbnQobWV0aG9kQXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZUFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudFR5cGUgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24odHlwZUFyZ3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRoaXMucHJvY2Vzc1R5cGVBcmd1bWVudChjYWxsRXhwcmVzc2lvbiwgdHlwZUFyZ3VtZW50VHlwZSwgdHJ1ZSwgcmV0dXJuVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1R5cGVvZkFyZ3VtZW50KGFyZ3M6IE5vZGVbXSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gYXJncy5sZW5ndGggPiAwICYmIGFyZ3NbMF0uZ2V0VGV4dCgpLnN0YXJ0c1dpdGgoJyR0eXBlb2YoJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUeXBlRnJvbVR5cGVvZkFyZ3VtZW50KGFyZzogTm9kZSk6IE5vZGUgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCBjYWxsRXhwcmVzc2lvbiA9IGFyZy5nZXRGaXJzdENoaWxkQnlLaW5kKFN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoY2FsbEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudCA9IGNhbGxFeHByZXNzaW9uLmdldEFyZ3VtZW50cygpWzBdO1xuICAgICAgICAgICAgaWYgKE5vZGUuaXNUeXBlTm9kZSh0eXBlQXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVBcmd1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc1R5cGVBcmd1bWVudChjYWxsRXhwcmVzc2lvbjogQ2FsbEV4cHJlc3Npb24sIHR5cGVBcmd1bWVudFR5cGU6IFR5cGUsIGlzVHlwZU9mQXJnOiBib29sZWFuLCByZXR1cm5UeXBlOiBUeXBlKTogTm9kZSB7XG4gICAgICAgIGlmIChnZXRJc1VuaXR5QVBJVHlwZSh0eXBlQXJndW1lbnRUeXBlKSkge1xuXG4gICAgICAgICAgICBpZiAoaXNUeXBlT2ZBcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gdHlwZUFyZ3VtZW50VHlwZS5pc0ludGVyZmFjZSgpID8gYCR0eXBlb2YoXCIke2dldEZ1bGxUeXBlTmFtZSh0eXBlQXJndW1lbnRUeXBlKX1cIilgIDogYCR0eXBlb2YoJHt0aGlzLmdldFR5cGVOYW1lKHR5cGVBcmd1bWVudFR5cGUpfSlgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVPdmVybG9hZGVkQ2FsbEV4cHJlc3Npb24oY2FsbEV4cHJlc3Npb24sIGAke3R5cGVOYW1lfWAsIHJldHVyblR5cGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZih0eXBlQXJndW1lbnRUeXBlLmlzSW50ZXJmYWNlKCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBnZXRGdWxsVHlwZU5hbWUodHlwZUFyZ3VtZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlT3ZlcmxvYWRlZENhbGxFeHByZXNzaW9uKGNhbGxFeHByZXNzaW9uLCBgXCIke3R5cGVOYW1lfVwiYCwgcmV0dXJuVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdFR5cGUgPSBnZXRHZW5pZXNTY3JpcHRUeXBlRnJvbVR5cGUodHlwZUFyZ3VtZW50VHlwZSk7XG4gICAgICAgICAgICBpZiAoc2NyaXB0VHlwZSA9PT0gR2VuaWVzU2NyaXB0VHlwZS5Nb25vYmVoYXZpb3VyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBnZXRGdWxsVHlwZU5hbWUodHlwZUFyZ3VtZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlT3ZlcmxvYWRlZENhbGxFeHByZXNzaW9uKGNhbGxFeHByZXNzaW9uLCBgXCIke3R5cGVOYW1lfVwiYCwgcmV0dXJuVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUeXBlTmFtZSh0eXBlOiBUeXBlKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sID0gdHlwZS5nZXRTeW1ib2woKTtcbiAgICAgICAgaWYgKHN5bWJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbC5nZXROYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGUuZ2V0VGV4dCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlT3ZlcmxvYWRlZENhbGxFeHByZXNzaW9uKGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbiwgdHlwZUFyZ3VtZW50VGV4dDogc3RyaW5nLCByZXR1cm5UeXBlOiBUeXBlLCBhZGRUc0lnbm9yZTogYm9vbGVhbiA9IGZhbHNlKTogQ2FsbEV4cHJlc3Npb24ge1xuICAgICAgICBjb25zdCBjYXN0VHlwZSA9IHJldHVyblR5cGUuZ2V0VGV4dCgpO1xuXG4gICAgICAgIGNhbGxFeHByZXNzaW9uLmdldFR5cGVBcmd1bWVudHMoKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBjYWxsRXhwcmVzc2lvbi5yZW1vdmVUeXBlQXJndW1lbnQoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhbGxFeHByZXNzaW9uLmluc2VydEFyZ3VtZW50KDAsIHR5cGVBcmd1bWVudFRleHQpO1xuXG4gICAgICAgIC8vIEdldCB0aGUgdGV4dCBvZiB0aGUgY2FsbCBleHByZXNzaW9uXG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uVGV4dCA9IGNhbGxFeHByZXNzaW9uLmdldFRleHQoKTtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIG5ldyB0ZXh0IHdpdGggdGhlIGNhc3RcbiAgICAgICAgY29uc3QgbmV3Q2FsbEV4cHJlc3Npb25UZXh0ID0gYCgke2NhbGxFeHByZXNzaW9uVGV4dH0gYXMgJHtjYXN0VHlwZX0pYDtcblxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBjYWxsIGV4cHJlc3Npb24gd2l0aCB0aGUgbmV3IHRleHRcbiAgICAgICAgY29uc3QgbmV3RXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dChuZXdDYWxsRXhwcmVzc2lvblRleHQpIGFzIENhbGxFeHByZXNzaW9uO1xuXG4gICAgICAgIGlmIChhZGRUc0lnbm9yZSkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBzb3VyY2UgZmlsZSB0aGF0IGNvbnRhaW5zIHRoZSBjYWxsIGV4cHJlc3Npb25cbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBuZXdFeHByZXNzaW9uLmdldFNvdXJjZUZpbGUoKTtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgY2FsbCBleHByZXNzaW9uXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IG5ld0V4cHJlc3Npb24uZ2V0U3RhcnQoKTtcblxuICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSB0cy1pZ25vcmUgY29tbWVudCBiZWZvcmUgdGhlIGNhbGwgZXhwcmVzc2lvblxuICAgICAgICAgICAgc291cmNlRmlsZS5pbnNlcnRUZXh0KHN0YXJ0LCBcIi8vIEB0cy1pZ25vcmVcXG5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3RXhwcmVzc2lvbjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBOb2RlLCBTeW50YXhLaW5kLCBUeXBlQ2hlY2tlciwgVHlwZSwgQ2FsbEV4cHJlc3Npb24gfSBmcm9tIFwidHMtbW9ycGhcIjtcbmltcG9ydCB7IFRyYW5zZm9ybWF0aW9uQ29udGV4dCB9IGZyb20gXCIuL1RyYW5zZm9ybWF0aW9uQ29udGV4dFwiO1xuaW1wb3J0IHsgSVRyYW5zZm9ybWVyIH0gZnJvbSBcIi4vSVRyYW5zZm9ybWVyXCI7XG5pbXBvcnQge0dlbmllc0luc3RhbmNlUHJvcE5hbWUsIGdldElzVW5pdHlBUElUeXBlLCBpc0dlbmllc1NjcmlwdFR5cGV9IGZyb20gXCIuLi9Db21waWxlclV0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBHZW5pZXNJbnN0YW5jZVRyYW5zZm9ybWVyIGltcGxlbWVudHMgSVRyYW5zZm9ybWVyIHtcbiAgICBub2RlVHlwZXMgPSBbU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbl07XG4gICAgdHJhbnNmb3JtZXJLZXkgPSBcIkdlbmllc0luc3RhbmNlVHJhbnNmb3JtZXJcIjtcblxuICAgIHRyYW5zZm9ybU5vZGUobm9kZTogTm9kZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0OiBUcmFuc2Zvcm1hdGlvbkNvbnRleHQpOiBOb2RlIHtcbiAgICAgICAgaWYgKCFOb2RlLmlzQ2FsbEV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FsbEV4cHJlc3Npb24gPSBub2RlLmFzS2luZE9yVGhyb3coU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbik7XG4gICAgICAgIGNvbnN0IHR5cGVDaGVja2VyID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjYWxsIGV4cHJlc3Npb24gaXMgYmVpbmcgbWFkZSBmcm9tIGEgVW5pdHkgdHlwZVxuICAgICAgICBjb25zdCBleHByZXNzaW9uVHlwZSA9IHR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGNhbGxFeHByZXNzaW9uLmdldEV4cHJlc3Npb24oKSk7XG4gICAgICAgIGlmICghZ2V0SXNVbml0eUFQSVR5cGUoZXhwcmVzc2lvblR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKTtcbiAgICAgICAgYXJncy5mb3JFYWNoKChhcmcsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24oYXJnKTtcbiAgICAgICAgICAgIGlmIChpc0dlbmllc1NjcmlwdFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmdUZXh0ID0gYXJnLmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdBcmdUZXh0ID0gYC8vQHRzLWlnbm9yZVxcbiR7YXJnVGV4dH0uJHtHZW5pZXNJbnN0YW5jZVByb3BOYW1lfWA7XG4gICAgICAgICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmcucmVwbGFjZVdpdGhUZXh0KG5ld0FyZ1RleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb247XG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGFtcHByb2plY3QvcmVtYXBwaW5nXCIpOyIsImltcG9ydCB7XG4gICAgQ2FsbEV4cHJlc3Npb24sXG4gICAgTWV0aG9kRGVjbGFyYXRpb24sXG4gICAgTm9kZSxcbiAgICBTeW50YXhLaW5kLFxuICAgIFR5cGUsXG4gICAgVHlwZUNoZWNrZXIsXG59IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHtUcmFuc2Zvcm1hdGlvbkNvbnRleHR9IGZyb20gXCIuL1RyYW5zZm9ybWF0aW9uQ29udGV4dFwiO1xuaW1wb3J0IHtJVHJhbnNmb3JtZXJ9IGZyb20gXCIuL0lUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtjbGVhblR5cGVUZXh0LCBnZXRJc1VuaXR5QVBJRGVjbGFyYXRpb24sIHR5cGVzQXJlRXF1YWx9IGZyb20gXCIuLi9Db21waWxlclV0aWxzXCI7XG5pbXBvcnQge3NlbGVjdEJlc3RPdmVybG9hZCwgaXNOdW1lcmljQ2FzdGFibGUgLCBpbmZlclBvc3NpYmxlVHlwZXN9IGZyb20gXCIuLi9NZXRob2RPdmVybG9hZFV0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBOdW1lcmljT3ZlcmxvYWRSZXNvbHV0aW9uVHJhbnNmb3JtZXIgaW1wbGVtZW50cyBJVHJhbnNmb3JtZXIge1xuICAgIG5vZGVUeXBlcyA9IFtTeW50YXhLaW5kLkNhbGxFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiTnVtZXJpY092ZXJsb2FkUmVzb2x1dGlvblRyYW5zZm9ybWVyXCI7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGlmICghTm9kZS5pc0NhbGxFeHByZXNzaW9uKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZSBhcyBDYWxsRXhwcmVzc2lvbjtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLmdldEV4cHJlc3Npb24oKTtcblxuICAgICAgICBpZiAoIU5vZGUuaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24oZXhwcmVzc2lvbikgJiYgIU5vZGUuaXNJZGVudGlmaWVyKGV4cHJlc3Npb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGhvZE5hbWVOb2RlID0gTm9kZS5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSA/IGV4cHJlc3Npb24uZ2V0TmFtZU5vZGUoKSA6IGV4cHJlc3Npb247XG5cbiAgICAgICAgY29uc3Qgc3ltYm9sID0gbWV0aG9kTmFtZU5vZGUuZ2V0U3ltYm9sKCk7XG4gICAgICAgIGlmICghc3ltYm9sKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG92ZXJsb2FkRGVjbGFyYXRpb25zID0gc3ltYm9sLmdldERlY2xhcmF0aW9ucygpLmZpbHRlcihkZWNsID0+XG4gICAgICAgICAgICBOb2RlLmlzTWV0aG9kRGVjbGFyYXRpb24oZGVjbCkgfHwgTm9kZS5pc01ldGhvZFNpZ25hdHVyZShkZWNsKVxuICAgICAgICApIGFzIE1ldGhvZERlY2xhcmF0aW9uW107XG5cbiAgICAgICAgaWYgKG92ZXJsb2FkRGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXRob2REZWNsYXJhdGlvbiA9IG92ZXJsb2FkRGVjbGFyYXRpb25zWzBdIGFzIE1ldGhvZERlY2xhcmF0aW9uO1xuXG4gICAgICAgIGlmICghZ2V0SXNVbml0eUFQSURlY2xhcmF0aW9uKG1ldGhvZERlY2xhcmF0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlQ2hlY2tlciA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlcjtcblxuICAgICAgICAvLyBQZXJmb3JtIG92ZXJsb2FkIHJlc29sdXRpb25cbiAgICAgICAgY29uc3QgYmVzdE92ZXJsb2FkID0gc2VsZWN0QmVzdE92ZXJsb2FkKG92ZXJsb2FkRGVjbGFyYXRpb25zLCBjYWxsRXhwcmVzc2lvbiwgdHlwZUNoZWNrZXIpO1xuXG4gICAgICAgIGlmICghYmVzdE92ZXJsb2FkKSB7XG4gICAgICAgICAgICAvLyBObyBzdWl0YWJsZSBvdmVybG9hZCBmb3VuZDsgZmFsbGJhY2sgdG8gdGhlIGZpcnN0IG92ZXJsb2FkXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBtZXRob2RTd2FwIHZhbHVlIGZyb20gSlNEb2NcbiAgICAgICAgY29uc3QganNEb2NzID0gYmVzdE92ZXJsb2FkLmdldEpzRG9jcygpO1xuICAgICAgICBsZXQgbWV0aG9kU3dhcFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QganNEb2Mgb2YganNEb2NzKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdzID0ganNEb2MuZ2V0VGFncygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuICAgICAgICAgICAgICAgIGlmICh0YWcuZ2V0VGFnTmFtZSgpID09PSAnbWV0aG9kU3dhcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kU3dhcFZhbHVlID0gdGFnLmdldENvbW1lbnRUZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRob2RTd2FwVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbWV0aG9kU3dhcFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBtZXRob2RTd2FwIG5vdCBmb3VuZDsgY2Fubm90IHByb2NlZWRcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gKipDaGVjayBpZiB0aGUgbWV0aG9kIGlzIGdlbmVyaWMqKlxuICAgICAgICBjb25zdCB0eXBlUGFyYW1ldGVycyA9IGJlc3RPdmVybG9hZC5nZXRUeXBlUGFyYW1ldGVycygpO1xuICAgICAgICBpZiAodHlwZVBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gVGhlIG1ldGhvZCBpcyBnZW5lcmljXG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgc2VsZWN0ZWQgb3ZlcmxvYWQgaW5mbyBpbiB0aGUgVHJhbnNmb3JtYXRpb25Db250ZXh0XG4gICAgICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbnRleHQuc2V0U3dhcE92ZXJsb2FkKGNhbGxFeHByZXNzaW9uLCB7XG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb246IGJlc3RPdmVybG9hZCxcbiAgICAgICAgICAgICAgICBtZXRob2RTd2FwVmFsdWUsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gKipEbyBub3QgbW9kaWZ5IHRoZSBjYWxsIGV4cHJlc3Npb24gaGVyZSoqXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluZmVyIHBvc3NpYmxlIHR5cGVzIGZvciBlYWNoIGFyZ3VtZW50XG4gICAgICAgIGNvbnN0IGFyZ3VtZW50VHlwZXNMaXN0ID0gY2FsbEV4cHJlc3Npb24uZ2V0QXJndW1lbnRzKCkubWFwKGFyZyA9PlxuICAgICAgICAgICAgaW5mZXJQb3NzaWJsZVR5cGVzKGFyZywgdHlwZUNoZWNrZXIpXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gUHJvY2VlZCB3aXRoIHN3YXBwaW5nIGZvciBub24tZ2VuZXJpYyBtZXRob2RzXG5cbiAgICAgICAgLy8gQnVpbGQgdGhlIG5ldyBtZXRob2QgY2FsbFxuICAgICAgICBjb25zdCBuZXdBcmd1bWVudHMgPSBjYWxsRXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKS5tYXAoKGFyZywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlQXJnVHlwZXMgPSBhcmd1bWVudFR5cGVzTGlzdFtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBwYXJhbVR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihiZXN0T3ZlcmxvYWQuZ2V0UGFyYW1ldGVycygpW2luZGV4XSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGFyZ1R5cGVNYXRjaCA9IHBvc3NpYmxlQXJnVHlwZXMuZmluZChhcmdUeXBlID0+IHR5cGVzQXJlRXF1YWwoYXJnVHlwZSwgcGFyYW1UeXBlKSk7XG5cbiAgICAgICAgICAgIGlmIChhcmdUeXBlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBFeGFjdCBtYXRjaCwgdXNlIGFyZ3VtZW50IGFzIGlzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5nZXRGdWxsVGV4dCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb3NzaWJsZUFyZ1R5cGVzLnNvbWUoYXJnVHlwZSA9PiBpc051bWVyaWNDYXN0YWJsZShhcmdUeXBlLCBwYXJhbVR5cGUpKSkge1xuICAgICAgICAgICAgICAgIC8vIENhc3QgYXJndW1lbnQgdG8gdGhlIHBhcmFtZXRlciB0eXBlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAoJHthcmcuZ2V0RnVsbFRleHQoKX0pIGFzICR7cGFyYW1UeXBlLmdldFRleHQoKX1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDYW5ub3QgY2FzdCwgYnV0IHByb2NlZWQgd2l0aCBjYXN0aW5nIHRvIHBhcmFtZXRlciB0eXBlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAoJHthcmcuZ2V0RnVsbFRleHQoKX0pIGFzICR7cGFyYW1UeXBlLmdldFRleHQoKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJbmNsdWRlIHRoZSBvYmplY3QgYWNjZXNzIGluIHRoZSBuZXcgbWV0aG9kIGNhbGxcbiAgICAgICAgbGV0IG5ld0V4cHJlc3Npb25UZXh0OiBzdHJpbmc7XG4gICAgICAgIGlmIChOb2RlLmlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKGV4cHJlc3Npb24pKSB7XG4gICAgICAgICAgICBjb25zdCBvYmplY3RUZXh0ID0gZXhwcmVzc2lvbi5nZXRFeHByZXNzaW9uKCkuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgbmV3RXhwcmVzc2lvblRleHQgPSBgJHtvYmplY3RUZXh0fS4ke21ldGhvZFN3YXBWYWx1ZX1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3RXhwcmVzc2lvblRleHQgPSBtZXRob2RTd2FwVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYWxsRXhwcmVzc2lvblRleHQgPSBgJHtuZXdFeHByZXNzaW9uVGV4dH0oJHtuZXdBcmd1bWVudHMuam9pbignLCAnKX0pYDtcblxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBvcmlnaW5hbCBjYWxsIHdpdGggdGhlIG5ldyBjYWxsXG4gICAgICAgIGNvbnN0IG5ld05vZGUgPSBjYWxsRXhwcmVzc2lvbi5yZXBsYWNlV2l0aFRleHQobmV3Q2FsbEV4cHJlc3Npb25UZXh0KTtcblxuICAgICAgICAvLyBHZXQgdGhlIHNvdXJjZSBmaWxlIHRoYXQgY29udGFpbnMgdGhlIGNhbGwgZXhwcmVzc2lvblxuICAgICAgICBjb25zdCBzb3VyY2VGaWxlID0gbmV3Tm9kZS5nZXRTb3VyY2VGaWxlKCk7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgY2FsbCBleHByZXNzaW9uXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbmV3Tm9kZS5nZXRTdGFydCgpO1xuXG4gICAgICAgIC8vIEluc2VydCB0aGUgdHMtaWdub3JlIGNvbW1lbnQgYmVmb3JlIHRoZSBjYWxsIGV4cHJlc3Npb25cbiAgICAgICAgc291cmNlRmlsZS5pbnNlcnRUZXh0KHN0YXJ0LCBcIi8vIEB0cy1pZ25vcmVcXG5cIik7XG5cbiAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgfVxuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0cy1tb3JwaFwiKTsiLCJpbXBvcnQgeyBTeW50YXhLaW5kLCBOb2RlLCBDYWxsRXhwcmVzc2lvbiwgVHlwZUNoZWNrZXIsIFR5cGUgfSBmcm9tICd0cy1tb3JwaCc7XG5pbXBvcnQge1xuICAgIGdldElzVW5pdHlBUElUeXBlLFxuICAgIGlzT3JJbmhlcml0c0Zyb21PYmplY3Rcbn0gZnJvbSAnLi4vQ29tcGlsZXJVdGlscyc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbkNvbnRleHQgfSBmcm9tICcuL1RyYW5zZm9ybWF0aW9uQ29udGV4dCc7XG5pbXBvcnQgeyBJVHJhbnNmb3JtZXIgfSBmcm9tICcuL0lUcmFuc2Zvcm1lcic7XG5cbmV4cG9ydCBjbGFzcyBPYmplY3RJbnN0YW50aWF0ZVRyYW5zZm9ybWVyIGltcGxlbWVudHMgSVRyYW5zZm9ybWVyIHtcbiAgICBub2RlVHlwZXMgPSBbU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbl07XG4gICAgdHJhbnNmb3JtZXJLZXkgPSBcIk9iamVjdEluc3RhbnRpYXRlVHJhbnNmb3JtZXJcIjtcblxuICAgIHRyYW5zZm9ybU5vZGUobm9kZTogTm9kZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0OiBUcmFuc2Zvcm1hdGlvbkNvbnRleHQpOiBOb2RlIHtcbiAgICAgICAgbGV0IG5ld05vZGUgPSBub2RlO1xuXG4gICAgICAgIGlmIChOb2RlLmlzQ2FsbEV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZSBhcyBDYWxsRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBjYWxsRXhwcmVzc2lvbi5nZXRFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICBjb25zdCB0eXBlQXJndW1lbnRzID0gY2FsbEV4cHJlc3Npb24uZ2V0VHlwZUFyZ3VtZW50cygpO1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kQXJndW1lbnRzID0gY2FsbEV4cHJlc3Npb24uZ2V0QXJndW1lbnRzKCk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlQXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRob2ROYW1lTm9kZSA9IGV4cHJlc3Npb24uZ2V0TGFzdENoaWxkQnlLaW5kKFN5bnRheEtpbmQuSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgaWYgKCFtZXRob2ROYW1lTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtZXRob2ROYW1lID0gbWV0aG9kTmFtZU5vZGUuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2ROYW1lID09PSAnSW5zdGFudGlhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBleHByZXNzaW9uLmdldEZpcnN0Q2hpbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzVHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihmaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3JJbmhlcml0c0Zyb21PYmplY3QoY2xhc3NUeXBlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXR1cm5UeXBlID0gdHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGNhbGxFeHByZXNzaW9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVBcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudCA9IHR5cGVBcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZUFyZ3VtZW50VHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0eXBlQXJndW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSB0aGlzLnByb2Nlc3NUeXBlQXJndW1lbnQoY2FsbEV4cHJlc3Npb24sIHR5cGVBcmd1bWVudFR5cGUsIHJldHVyblR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHByb2Nlc3NUeXBlQXJndW1lbnQoY2FsbEV4cHJlc3Npb246IENhbGxFeHByZXNzaW9uLCB0eXBlQXJndW1lbnRUeXBlOiBUeXBlLCByZXR1cm5UeXBlOiBUeXBlKTogTm9kZSB7XG4gICAgICAgIC8vIEZvciBub24tVW5pdHkgdHlwZXMsIHdlIHJlcGxhY2UgdGhlIGdlbmVyaWMgY2FsbCB3aXRoIHRoZSBub24tZ2VuZXJpYyB2ZXJzaW9uIGFuZCBjYXN0XG4gICAgICAgIGlmICghZ2V0SXNVbml0eUFQSVR5cGUodHlwZUFyZ3VtZW50VHlwZSkpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0eXBlIGFyZ3VtZW50c1xuICAgICAgICAgICAgY2FsbEV4cHJlc3Npb24uZ2V0VHlwZUFyZ3VtZW50cygpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsRXhwcmVzc2lvbi5yZW1vdmVUeXBlQXJndW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBjYXN0IHR5cGUgKHdoaWNoIGlzIHRoZSBnZW5lcmljIHR5cGUgcGFyYW1ldGVyKVxuICAgICAgICAgICAgY29uc3QgY2FzdFR5cGUgPSB0eXBlQXJndW1lbnRUeXBlLmdldFRleHQoKTtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSB0ZXh0IG9mIHRoZSBjYWxsIGV4cHJlc3Npb24gKG5vdyB3aXRob3V0IGdlbmVyaWMgdHlwZSBwYXJhbWV0ZXJzKVxuICAgICAgICAgICAgY29uc3QgY2FsbEV4cHJlc3Npb25UZXh0ID0gY2FsbEV4cHJlc3Npb24uZ2V0VGV4dCgpO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIG5ldyB0ZXh0IHdpdGggdGhlIGNhc3RcbiAgICAgICAgICAgIGNvbnN0IG5ld0NhbGxFeHByZXNzaW9uVGV4dCA9IGAoJHtjYWxsRXhwcmVzc2lvblRleHR9IGFzICR7Y2FzdFR5cGV9KWA7XG5cbiAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIGNhbGwgZXhwcmVzc2lvbiB3aXRoIHRoZSBuZXcgdGV4dFxuICAgICAgICAgICAgY29uc3QgbmV3RXhwcmVzc2lvbiA9IGNhbGxFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dChuZXdDYWxsRXhwcmVzc2lvblRleHQpIGFzIENhbGxFeHByZXNzaW9uO1xuXG4gICAgICAgICAgICAvLyBBZGQgdHMtaWdub3JlIGNvbW1lbnRcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBuZXdFeHByZXNzaW9uLmdldFNvdXJjZUZpbGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbmV3RXhwcmVzc2lvbi5nZXRTdGFydCgpO1xuICAgICAgICAgICAgc291cmNlRmlsZS5pbnNlcnRUZXh0KHN0YXJ0LCBcIi8vIEB0cy1pZ25vcmVcXG5cIik7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXdFeHByZXNzaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGxFeHByZXNzaW9uO1xuICAgIH1cbn0iLCJpbXBvcnQge1xuICAgIE5vZGUsXG4gICAgU3ludGF4S2luZCxcbn0gZnJvbSBcInRzLW1vcnBoXCI7XG5pbXBvcnQge1xuICAgIGNyZWF0ZUdlbmVyaWNUeXBlVmFyaWFibGUsXG4gICAgZ2V0SXNVbml0eUFQSVR5cGUsXG59IGZyb20gXCIuLi9Db21waWxlclV0aWxzXCI7XG5pbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbkNvbnRleHQgfSBmcm9tIFwiLi9UcmFuc2Zvcm1hdGlvbkNvbnRleHRcIjtcbmltcG9ydCB7IElUcmFuc2Zvcm1lciB9IGZyb20gXCIuL0lUcmFuc2Zvcm1lclwiO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJpY1R5cGVUcmFuc2Zvcm1lciBpbXBsZW1lbnRzIElUcmFuc2Zvcm1lciB7XG4gICAgbm9kZVR5cGVzID0gW1N5bnRheEtpbmQuTmV3RXhwcmVzc2lvbl07XG4gICAgdHJhbnNmb3JtZXJLZXkgPSBcIkdlbmVyaWNUeXBlVHJhbnNmb3JtZXJcIjtcblxuICAgIHRyYW5zZm9ybU5vZGUobm9kZTogTm9kZSwgY29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGlmIChub2RlLmlzS2luZChTeW50YXhLaW5kLk5ld0V4cHJlc3Npb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1OZXdFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gICAgICBORVcgRVhQUkVTU0lPTiBMT0dJQ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1OZXdFeHByZXNzaW9uKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KSB7XG4gICAgICAgIGNvbnN0IG5ld0V4cHJlc3Npb24gPSBub2RlLmFzS2luZE9yVGhyb3coU3ludGF4S2luZC5OZXdFeHByZXNzaW9uKTtcbiAgICAgICAgY29uc3QgdHlwZSA9IG5ld0V4cHJlc3Npb24uZ2V0VHlwZSgpO1xuICAgICAgICBjb25zdCB0eXBlQXJndW1lbnRzID0gbmV3RXhwcmVzc2lvbi5nZXRUeXBlQXJndW1lbnRzKCkubWFwKHQgPT4gdC5nZXRUeXBlKCkpO1xuICAgICAgICBjb25zdCBhcmdzID0gbmV3RXhwcmVzc2lvbi5nZXRBcmd1bWVudHMoKTtcblxuICAgICAgICBpZiAoZ2V0SXNVbml0eUFQSVR5cGUodHlwZSkgJiYgdHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VGaWxlID0gbm9kZS5nZXRTb3VyY2VGaWxlKCk7XG5cbiAgICAgICAgICAgIC8vIDIpIENyZWF0ZSB0aGUgYnJpZGdpbmcgdmFyaWFibGUgaWYgbmVlZGVkXG4gICAgICAgICAgICBjb25zdCBnZW5lcmljVmFyTmFtZSA9IGNyZWF0ZUdlbmVyaWNUeXBlVmFyaWFibGUoXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHNvdXJjZUZpbGUsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtYXRpb25Db250ZXh0XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyA0KSBSZXBsYWNlIGBuZXcgU29tZUdlbmVyaWM8Li4uPihhcmdzKWAgdGV4dCB3aXRoIHRoZSBicmlkZ2luZyB2YXJpYWJsZTpcbiAgICAgICAgICAgIC8vICAgIGBuZXcgX0dlbmVyaWNWYXIoYXJncykgYXMgU29tZUdlbmVyaWM8Li4uPmBcbiAgICAgICAgICAgIGNvbnN0IGFyZ3NUZXh0ID0gYXJncy5tYXAoYXJnID0+IGFyZy5nZXRGdWxsVGV4dCgpKS5qb2luKFwiLCBcIik7XG4gICAgICAgICAgICBjb25zdCBuZXdFeHByZXNzaW9uVGV4dCA9IGBuZXcgJHtnZW5lcmljVmFyTmFtZX0oJHthcmdzVGV4dH0pIGFzICR7dHlwZS5nZXRUZXh0KCl9YDtcbiAgICAgICAgICAgIHJldHVybiBuZXdFeHByZXNzaW9uLnJlcGxhY2VXaXRoVGV4dChuZXdFeHByZXNzaW9uVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIFN5bnRheEtpbmQsXG4gICAgTm9kZSxcbiAgICBCaW5hcnlFeHByZXNzaW9uLFxuICAgIFByZWZpeFVuYXJ5RXhwcmVzc2lvbixcbiAgICBQb3N0Zml4VW5hcnlFeHByZXNzaW9uLFxuICAgIEV4cHJlc3Npb25cbn0gZnJvbSAndHMtbW9ycGgnO1xuaW1wb3J0IHtUcmFuc2Zvcm1hdGlvbkNvbnRleHR9IGZyb20gXCIuL1RyYW5zZm9ybWF0aW9uQ29udGV4dFwiO1xuaW1wb3J0IHtJVHJhbnNmb3JtZXJ9IGZyb20gXCIuL0lUcmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtcbiAgICBnZXRJc1VuaXR5QVBJVHlwZSxcbn0gZnJvbSBcIi4uL0NvbXBpbGVyVXRpbHNcIjtcbmltcG9ydCB7XG4gICAgZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQsXG4gICAgZ2V0T3BlcmF0b3JNZXRob2ROYW1lLCBnZXRPcGVyYXRvck1ldGhvZFJldHVyblR5cGUsXG4gICAgZ2V0VW5hcnlPcGVyYXRvck1ldGhvZFJldHVyblR5cGUsIGlzQ29tcG91bmRBc3NpZ25tZW50LCB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbixcbn0gZnJvbSBcIi4uL09wZXJhdG9yT3ZlcmxvYWRpbmdVdGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgT3BlcmF0b3JPdmVybG9hZGluZ1RyYW5zZm9ybWVyIGltcGxlbWVudHMgSVRyYW5zZm9ybWVyIHtcbiAgICBub2RlVHlwZXMgPSBbU3ludGF4S2luZC5CaW5hcnlFeHByZXNzaW9uLCBTeW50YXhLaW5kLlByZWZpeFVuYXJ5RXhwcmVzc2lvbiwgU3ludGF4S2luZC5Qb3N0Zml4VW5hcnlFeHByZXNzaW9uXTtcbiAgICB0cmFuc2Zvcm1lcktleSA9IFwiT3BlcmF0b3JPdmVybG9hZGluZ1RyYW5zZm9ybWVyXCI7XG5cbiAgICB0cmFuc2Zvcm1Ob2RlKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGlmIChOb2RlLmlzQmluYXJ5RXhwcmVzc2lvbihub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtQmluYXJ5RXhwcmVzc2lvbihub2RlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKE5vZGUuaXNQcmVmaXhVbmFyeUV4cHJlc3Npb24obm9kZSkgfHwgTm9kZS5pc1Bvc3RmaXhVbmFyeUV4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVVuYXJ5RXhwcmVzc2lvbihub2RlLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNmb3JtQmluYXJ5RXhwcmVzc2lvbihub2RlOiBCaW5hcnlFeHByZXNzaW9uLCB0cmFuc2Zvcm1hdGlvbkNvbnRleHQ6IFRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IE5vZGUge1xuICAgICAgICBjb25zdCBvcGVyYXRvclRva2VuID0gbm9kZS5nZXRPcGVyYXRvclRva2VuKCk7XG4gICAgICAgIGNvbnN0IG9wZXJhdG9yS2luZCA9IG9wZXJhdG9yVG9rZW4uZ2V0S2luZCgpO1xuICAgICAgICBsZXQgb3BlcmF0b3JNZXRob2ROYW1lID0gZ2V0T3BlcmF0b3JNZXRob2ROYW1lKG9wZXJhdG9yS2luZCk7XG4gICAgICAgIFxuICAgICAgICBpZihpc0NvbXBvdW5kQXNzaWdubWVudChvcGVyYXRvcktpbmQpKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBlcXVpdmFsZW50T3BlcmF0b3JLaW5kID0gZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQob3BlcmF0b3JLaW5kKTtcbiAgICAgICAgICAgIG9wZXJhdG9yTWV0aG9kTmFtZSA9IGdldE9wZXJhdG9yTWV0aG9kTmFtZShlcXVpdmFsZW50T3BlcmF0b3JLaW5kKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG9wZXJhdG9yTWV0aG9kTmFtZSkge1xuXG4gICAgICAgICAgICAvLyBJZ25vcmUgdHJhbnNmb3JtYXRpb25zIGZvciAnPT0gbnVsbCcgYW5kICc9PSB1bmRlZmluZWQnXG4gICAgICAgICAgICBpZiAob3BlcmF0b3JLaW5kID09PSBTeW50YXhLaW5kLkVxdWFsc0VxdWFsc0VxdWFsc1Rva2VuXG4gICAgICAgICAgICAgICAgfHwgb3BlcmF0b3JLaW5kID09PSBTeW50YXhLaW5kLkVxdWFsc0VxdWFsc1Rva2VuXG4gICAgICAgICAgICAgICAgfHwgb3BlcmF0b3JLaW5kID09PSBTeW50YXhLaW5kLkV4Y2xhbWF0aW9uRXF1YWxzRXF1YWxzVG9rZW5cbiAgICAgICAgICAgICAgICB8fCBvcGVyYXRvcktpbmQgPT0gU3ludGF4S2luZC5FeGNsYW1hdGlvbkVxdWFsc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHQgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlLmdldFJpZ2h0KCkpO1xuICAgICAgICAgICAgICAgIGlmIChOb2RlLmlzTnVsbExpdGVyYWwocmlnaHQpIHx8IE5vZGUuaXNVbmRlZmluZWRLZXl3b3JkKHJpZ2h0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlLmdldExlZnQoKSk7XG4gICAgICAgICAgICBjb25zdCByaWdodCA9IHVud3JhcFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKG5vZGUuZ2V0UmlnaHQoKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkTGVmdCA9IHRoaXMudHJhbnNmb3JtTm9kZUlmTmVlZGVkKGxlZnQsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZFJpZ2h0ID0gdGhpcy50cmFuc2Zvcm1Ob2RlSWZOZWVkZWQocmlnaHQsIHRyYW5zZm9ybWF0aW9uQ29udGV4dCk7XG5cbiAgICAgICAgICAgIGxldCBsZWZ0VHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0cmFuc2Zvcm1lZExlZnQpO1xuICAgICAgICAgICAgbGV0IHJpZ2h0VHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbih0cmFuc2Zvcm1lZFJpZ2h0KTtcblxuICAgICAgICAgICAgaWYgKHJpZ2h0VHlwZS5pc0xpdGVyYWwoKSkge1xuICAgICAgICAgICAgICAgIHJpZ2h0VHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRCYXNlVHlwZU9mTGl0ZXJhbFR5cGUocmlnaHRUeXBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxlZnRUeXBlLmlzTGl0ZXJhbCgpKSB7XG4gICAgICAgICAgICAgICAgbGVmdFR5cGUgPSB0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIuZ2V0QmFzZVR5cGVPZkxpdGVyYWxUeXBlKGxlZnRUeXBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFnZXRJc1VuaXR5QVBJVHlwZShsZWZ0VHlwZSkgJiYgIWdldElzVW5pdHlBUElUeXBlKHJpZ2h0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbGVmdFRleHQgPSB0cmFuc2Zvcm1lZExlZnQuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgcmlnaHRUZXh0ID0gdHJhbnNmb3JtZWRSaWdodC5nZXRUZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBsZWZ0UmV0dXJuVHlwZSA9IGdldE9wZXJhdG9yTWV0aG9kUmV0dXJuVHlwZSh0cmFuc2Zvcm1hdGlvbkNvbnRleHQudHlwZUNoZWNrZXIsIGxlZnRUeXBlLCBvcGVyYXRvck1ldGhvZE5hbWUsIHJpZ2h0VHlwZSk7XG4gICAgICAgICAgICBjb25zdCByaWdodFJldHVyblR5cGUgPSBnZXRPcGVyYXRvck1ldGhvZFJldHVyblR5cGUodHJhbnNmb3JtYXRpb25Db250ZXh0LnR5cGVDaGVja2VyLCByaWdodFR5cGUsIG9wZXJhdG9yTWV0aG9kTmFtZSwgbGVmdFR5cGUpO1xuXG4gICAgICAgICAgICBpZihsZWZ0UmV0dXJuVHlwZSA9PSBudWxsICYmIHJpZ2h0UmV0dXJuVHlwZSA9PSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIYW5kbGUgY29tcG91bmQgYXNzaWdubWVudHMgKCs9LCAtPSwgZXRjLilcbiAgICAgICAgICAgIGlmIChpc0NvbXBvdW5kQXNzaWdubWVudChvcGVyYXRvcktpbmQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdE5hbWUgPSBsZWZ0LmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcXVpdmFsZW50T3BlcmF0b3JLaW5kID0gZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQob3BlcmF0b3JLaW5kKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcXVpdmFsZW50T3BlcmF0b3JNZXRob2ROYW1lID0gZ2V0T3BlcmF0b3JNZXRob2ROYW1lKGVxdWl2YWxlbnRPcGVyYXRvcktpbmQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVxdWl2YWxlbnRFeHByZXNzaW9uID0gYCR7bGVmdE5hbWV9ID0gJHtsZWZ0VHlwZS5nZXRTeW1ib2woKT8uZ2V0TmFtZSgpfS4ke2VxdWl2YWxlbnRPcGVyYXRvck1ldGhvZE5hbWV9KCR7bGVmdE5hbWV9LCAke3JpZ2h0VGV4dH0pYDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5yZXBsYWNlV2l0aFRleHQoZXF1aXZhbGVudEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB2YWxpZFR5cGUgPSBsZWZ0UmV0dXJuVHlwZSAhPSBudWxsID8gbGVmdFR5cGUgOiByaWdodFR5cGU7XG4gICAgICAgICAgICBjb25zdCBuZXdUZXh0ID0gYCR7dmFsaWRUeXBlIS5nZXRTeW1ib2woKT8uZ2V0TmFtZSgpfS4ke29wZXJhdG9yTWV0aG9kTmFtZX0oJHtsZWZ0VGV4dH0sICR7cmlnaHRUZXh0fSlgO1xuXG4gICAgICAgICAgICAvLyBBZGQgcGFyZW50aGVzZXMgdG8gbWFpbnRhaW4gb3JkZXIgb2Ygb3BlcmF0aW9uc1xuICAgICAgICAgICAgaWYgKE5vZGUuaXNCaW5hcnlFeHByZXNzaW9uKHRyYW5zZm9ybWVkTGVmdCkgfHwgTm9kZS5pc0JpbmFyeUV4cHJlc3Npb24odHJhbnNmb3JtZWRSaWdodCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRoZXNpemVkTmV3VGV4dCA9IGAoJHtuZXdUZXh0fSlgO1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnJlcGxhY2VXaXRoVGV4dChwYXJlbnRoZXNpemVkTmV3VGV4dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBub2RlLnJlcGxhY2VXaXRoVGV4dChuZXdUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNmb3JtVW5hcnlFeHByZXNzaW9uKG5vZGU6IFByZWZpeFVuYXJ5RXhwcmVzc2lvbiB8IFBvc3RmaXhVbmFyeUV4cHJlc3Npb24sIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogTm9kZSB7XG4gICAgICAgIGNvbnN0IG9wZXJhbmQgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlLmdldE9wZXJhbmQoKSk7XG4gICAgICAgIGNvbnN0IG9wZXJhdG9yS2luZCA9IG5vZGUuZ2V0T3BlcmF0b3JUb2tlbigpO1xuICAgICAgICBjb25zdCBvcGVyYXRvck1ldGhvZE5hbWUgPSBnZXRPcGVyYXRvck1ldGhvZE5hbWUob3BlcmF0b3JLaW5kLCB0cnVlKTtcblxuICAgICAgICBpZiAob3BlcmF0b3JNZXRob2ROYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBvcGVyYW5kVHlwZSA9IHRyYW5zZm9ybWF0aW9uQ29udGV4dC50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihvcGVyYW5kKTtcblxuICAgICAgICAgICAgaWYgKGdldFVuYXJ5T3BlcmF0b3JNZXRob2RSZXR1cm5UeXBlKG9wZXJhbmRUeXBlLCBvcGVyYXRvck1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3BlcmFuZFRleHQgPSBvcGVyYW5kLmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUZXh0ID0gYCR7b3BlcmFuZFR5cGUuZ2V0U3ltYm9sKCk/LmdldE5hbWUoKX0uJHtvcGVyYXRvck1ldGhvZE5hbWV9KCR7b3BlcmFuZFRleHR9KWA7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgcGFyZW50aGVzZXMgdG8gbWFpbnRhaW4gb3JkZXIgb2Ygb3BlcmF0aW9uc1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudGhlc2l6ZWROZXdUZXh0ID0gYCgke25ld1RleHR9KWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUucmVwbGFjZVdpdGhUZXh0KHBhcmVudGhlc2l6ZWROZXdUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNmb3JtTm9kZUlmTmVlZGVkKG5vZGU6IE5vZGUsIHRyYW5zZm9ybWF0aW9uQ29udGV4dDogVHJhbnNmb3JtYXRpb25Db250ZXh0KTogRXhwcmVzc2lvbiB7XG4gICAgICAgIGNvbnN0IHVud3JhcHBlZE5vZGUgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlKTtcbiAgICAgICAgaWYgKE5vZGUuaXNCaW5hcnlFeHByZXNzaW9uKHVud3JhcHBlZE5vZGUpIHx8IE5vZGUuaXNQcmVmaXhVbmFyeUV4cHJlc3Npb24odW53cmFwcGVkTm9kZSkgfHwgTm9kZS5pc1Bvc3RmaXhVbmFyeUV4cHJlc3Npb24odW53cmFwcGVkTm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybU5vZGUodW53cmFwcGVkTm9kZSwgdHJhbnNmb3JtYXRpb25Db250ZXh0KSBhcyBFeHByZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bndyYXBwZWROb2RlIGFzIEV4cHJlc3Npb247XG4gICAgfVxuICAgIFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHlwZXNjcmlwdFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwYXRoXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInR5cGVzY3JpcHQvbGliL3Rzc2VydmVybGlicmFyeVwiKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOSk7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIm5vZGVUeXBlcyIsIlN5bnRheEtpbmQiLCJDYWxsRXhwcmVzc2lvbiIsInRyYW5zZm9ybWVyS2V5IiwidHJhbnNmb3JtTm9kZSIsIm5vZGUiLCJ0cmFuc2Zvcm1hdGlvbkNvbnRleHQiLCJOb2RlIiwiaXNDYWxsRXhwcmVzc2lvbiIsImNhbGxFeHByZXNzaW9uIiwiYXNLaW5kT3JUaHJvdyIsInR5cGVDaGVja2VyIiwiZXhwcmVzc2lvbiIsImdldEV4cHJlc3Npb24iLCJpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiIsIm1ldGhvZE5hbWUiLCJnZXROYW1lIiwib2JqZWN0RXhwcmVzc2lvbiIsIm9iamVjdFR5cGUiLCJnZXRUeXBlQXRMb2NhdGlvbiIsImlzU2lnbmFsQnVzTWV0aG9kIiwiaXNTaWduYWxCdXNUeXBlIiwiaXNHZW5pZXNFdmVudE1ldGhvZCIsImlzR2VuaWVzRXZlbnRUeXBlIiwiYXJncyIsImdldEFyZ3VtZW50cyIsIm1ldGhvZEFyZ0luZGV4IiwibWV0aG9kQXJnc0NvdW50IiwibGVuZ3RoIiwibWV0aG9kQXJnIiwiY29udGV4dEV4cHJlc3Npb24iLCJnZXRDb250ZXh0RXhwcmVzc2lvbiIsImFkZEFyZ3VtZW50IiwiZ2V0VGV4dCIsInNvdXJjZUZpbGVHZW5lcmljVHlwZU1hcCIsIk1hcCIsImxhc3RHZW5lcmljVHlwZVZhckluZGV4Iiwib3ZlcmxvYWRNYXAiLCJzZXRTd2FwT3ZlcmxvYWQiLCJvdmVybG9hZEluZm8iLCJzZXQiLCJnZXRTd2FwT3ZlcmxvYWQiLCJnZXQiLCJwcm9wZXJ0eUluZm9DYWNoZSIsIkdlbmllc1NjcmlwdFVpRXZlbnRzIiwicHJvamVjdFJvb3QiLCJHZW5pZXNEZWNsYXJhdGlvbkZpbGVBbm5vdGF0aW9uIiwiR2VuaWVzSW5zdGFuY2VQcm9wTmFtZSIsIk1vbm9iZWhhdmlvdXJUeXBlTmFtZSIsIlNjcmlwdGFibGVPYmplY3RUeXBlTmFtZSIsIk5vblNlcmlhbGl6ZWREZWNvcmF0b3IiLCJTZXJpYWxpemVGaWVsZERlY29yYXRvciIsIkdFVF9JVEVNX05BTUUiLCJTRVRfSVRFTV9OQU1FIiwiY29tcG9uZW50TWV0aG9kcyIsIlNldCIsIkFsbG93ZWRVaUludGVyZmFjZXMiLCJVaUludGVyZmFjZVRvRW51bU1hcCIsIlBvaW50ZXJDbGljayIsIlBvaW50ZXJEb3duIiwiUG9pbnRlckVudGVyIiwiUG9pbnRlckV4aXQiLCJQb2ludGVyVXAiLCJCZWdpbkRyYWciLCJEZXNlbGVjdCIsIkRyYWciLCJEcm9wIiwiRW5kRHJhZyIsIkluaXRpYWxpemVQb3RlbnRpYWxEcmFnIiwiU2Nyb2xsIiwiU2VsZWN0IiwiU3VibWl0IiwiVXBkYXRlU2VsZWN0ZWQiLCJNb3ZlIiwiQ2FuY2VsIiwiQWxpYXNUb1R5cGVOYW1lIiwiQWxpYXNUb0Z1bGxUeXBlTmFtZSIsIkdlbmllc1NjcmlwdFR5cGUiLCJleHRlbmRzTW9ub0JlaGF2aW91ciIsImNsYXNzRGVjbCIsImJhc2VDbGFzcyIsImdldEJhc2VDbGFzcyIsImV4dGVuZHNTY3JpcHRhYmxlT2JqZWN0IiwidHlwZXNBcmVFcXVhbCIsInR5cGUxIiwidHlwZTIiLCJjbGVhblR5cGVUZXh0IiwiaW5oZXJpdHNGcm9tIiwidHlwZSIsImJhc2VOYW1lcyIsImJhc2VUeXBlcyIsImdldEJhc2VUeXBlcyIsImJhc2VUeXBlIiwiYmFzZVR5cGVOYW1lIiwiZ2V0U3ltYm9sIiwiaW5jbHVkZXMiLCJ2aXNpdGVkIiwic3ltYm9sIiwiZGVjbGFyYXRpb25zIiwiZ2V0RGVjbGFyYXRpb25zIiwiZGVjbGFyYXRpb24iLCJpc0NsYXNzRGVjbGFyYXRpb24iLCJoZXJpdGFnZUNsYXVzZXMiLCJnZXRIZXJpdGFnZUNsYXVzZXMiLCJoZXJpdGFnZUNsYXVzZSIsInR5cGVOb2RlcyIsImdldFR5cGVOb2RlcyIsInR5cGVOb2RlIiwiaGFzIiwiYWRkIiwicHVzaCIsImdldEdlbmVyaWNUeXBlS2V5IiwidHlwZUFyZ3VtZW50cyIsImdldFR5cGVOYW1lIiwibWFwIiwidCIsInRBcmdzIiwiZ2V0VHlwZUFyZ3VtZW50cyIsImpvaW4iLCJnZXRUeXBlTmFtZUFuZEVuc3VyZUltcG9ydGVkIiwic291cmNlRmlsZSIsInR5cGVOYW1lIiwiY3NUeXBlTmFtZSIsInR5cGVNb2R1bGUiLCJjdXJyZW50Iiwic2NyaXB0VHlwZSIsImdldEdlbmllc1NjcmlwdFR5cGVGcm9tVHlwZSIsIk5vbmUiLCJNb25vYmVoYXZpb3VyIiwiU2NyaXB0YWJsZU9iamVjdCIsImdldElzVW5pdHlBUElUeXBlIiwiRXJyb3IiLCJnZXRGdWxsVHlwZU5hbWUiLCJsYXN0RG90SW5kZXgiLCJsYXN0SW5kZXhPZiIsInN1YnN0cmluZyIsImV4aXN0aW5nSW1wb3J0IiwiZ2V0SW1wb3J0RGVjbGFyYXRpb25zIiwiZmluZCIsImltcG9ydERlY2wiLCJnZXRNb2R1bGVTcGVjaWZpZXJWYWx1ZSIsImdldE5hbWVkSW1wb3J0cyIsInNvbWUiLCJuYW1lZEltcG9ydCIsImFkZE5hbWVkSW1wb3J0IiwiaW1wb3J0U3RydWN0dXJlIiwia2luZCIsIlN0cnVjdHVyZUtpbmQiLCJJbXBvcnREZWNsYXJhdGlvbiIsIm1vZHVsZVNwZWNpZmllciIsIm5hbWVkSW1wb3J0cyIsIm5hbWUiLCJhZGRJbXBvcnREZWNsYXJhdGlvbiIsImZvckNzaGFycCIsImluY2x1ZGVBcmd1bWVudHMiLCJ0ZXh0IiwiYWxpYXNTeW1ib2wiLCJnZXRBbGlhc1N5bWJvbCIsImdldEZ1bGx5UXVhbGlmaWVkTmFtZSIsInJlcGxhY2UiLCJpc0V4cG9ydGVkIiwiZm9yRWFjaCIsImRlY2wiLCJpc0ludGVyZmFjZURlY2xhcmF0aW9uIiwic291cmNlRmlsZVBhdGgiLCJnZXRTb3VyY2VGaWxlIiwiZ2V0RmlsZVBhdGgiLCJyZWxhdGl2ZVBhdGgiLCJjb252ZXJ0VG9BbGlhc1BhdGgiLCJwYXJzZWRQYXRoIiwicGF0aCIsInBhcnNlIiwiZmlsZVBhdGhXaXRob3V0RXh0IiwiZGlyIiwicGFyc2VkIiwiYWxpYXNQYXRoIiwiY29udmVydFRvR2VuaWVzQWxpYXNQYXRoIiwicmVnZXgiLCJ0ZXN0IiwibWF0Y2giLCJudW1iZXIiLCJhcmciLCJpbmRleCIsImFyZ1RleHQiLCJ1cGRhdGVDaGlsZFBhdGhzIiwiY2hpbGRQcm9wZXJ0aWVzIiwicGFyZW50UGF0aCIsImNoaWxkUHJvcCIsInVwZGF0ZWRDaGlsZFByb3AiLCJQYXRoIiwiTmFtZSIsIkNoaWxkUHJvcGVydGllcyIsImV4dHJhY3RQcm9wZXJ0aWVzIiwiY2xzIiwiYmFzZVBhdGgiLCJ0eXBlQXJndW1lbnRNYXAiLCJjbGFzc05hbWUiLCJjYWNoZUtleSIsImdldFR5cGVQYXJhbWV0ZXJzIiwicCIsIkFycmF5IiwiZnJvbSIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSIsImdlbmVyaWNBcmdzIiwiY2FjaGVkUHJvcGVydGllcyIsInByb3AiLCJ1cGRhdGVkUHJvcCIsInByb3BlcnRpZXMiLCJnZXRQcm9wZXJ0aWVzIiwidmlzaWJpbGl0eSIsImdldFNjb3BlIiwiZGVjb3JhdG9ycyIsImV4dHJhY3REZWNvcmF0b3JzIiwiaXNTdGF0aWMiLCJpc1JlYWRvbmx5IiwiZCIsIlR5cGUiLCJyZXNvbHZlR2VuZXJpY1R5cGUiLCJnZXRUeXBlIiwiaXNBcnJheSIsInJlc29sdmVkVHlwZSIsInJlc29sdmVBcnJheUVsZW1lbnRUeXBlIiwicHJvcE5hbWUiLCJmdWxsUGF0aCIsImdldEluaXRpYWxpemVyIiwiZ2V0S2luZCIsIk5ld0V4cHJlc3Npb24iLCJuZXdFeHByZXNzaW9uIiwiUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uIiwicGFlIiwiU3RyaW5nTGl0ZXJhbCIsImdldExpdGVyYWxWYWx1ZSIsImluaXRpYWxpemVyRXhwcmVzc2lvbnMiLCJoYXNJbml0aWFsaXplciIsImluaXRpYWxpemVyIiwiQXJyYXlMaXRlcmFsRXhwcmVzc2lvbiIsImFycmF5TGl0ZXJhbCIsImkiLCJnZXRFbGVtZW50cyIsImVsZW1lbnQiLCJwcm9wZXJ0eUluZm8iLCJUeXBlTmFtZSIsIklzQXJyYXkiLCJJc0VudW0iLCJFbnVtS2V5cyIsIkVudW1WYWx1ZXMiLCJEZWNvcmF0b3JzIiwiSXNHZW5pZXNCZWhhdmlvdXJSZWYiLCJJc0dlbmllc1NjcmlwdGFibGVPYmplY3RSZWYiLCJJbml0aWFsaXplcnMiLCJBcnJheUVsZW1lbnRJbml0aWFsaXplciIsInVuZGVmaW5lZCIsIkFycmF5RGltZW5zaW9uIiwiZGltZW5zaW9uIiwiZ2V0QXJyYXlFbGVtZW50SW5pdGlhbGl6ZXIiLCJmaWxsRXh0cmFQcm9wZXJ0eUluZm8iLCJpc0VudW0iLCJpc1VuaXR5VHlwZSIsImdldElzVW5pdHlBUElEZWNsYXJhdGlvbiIsImdlbmllc1NjcmlwdFR5cGUiLCJnZXRHZW5pZXNTY3JpcHRUeXBlRnJvbU5vZGUiLCJrZXlzIiwidmFsdWVzIiwiZGVjIiwiRW51bURlY2xhcmF0aW9uIiwiZ2V0TWVtYmVycyIsIm1lbWJlciIsImdldFZhbHVlIiwiZXh0cmFjdEVudW1EZXRhaWxzIiwidG9TdHJpbmciLCJmaWxsRW51bUluZm8iLCJ0eXBlUGFyYW1zIiwidHlwZUFyZ3MiLCJwYXJhbSIsInVuaXF1ZVBhcmFtTmFtZSIsImdldENvbXBsZXRlVHlwZUFyZ3VtZW50TWFwIiwidW5zaGlmdCIsIm5ld0Jhc2UiLCJ1bmRlcmx5aW5nVHlwZU5hbWUiLCJwcm9wUGF0aCIsImdldEFycmF5RWxlbWVudFR5cGUiLCJjdXJyZW50RGltZW5zaW9uIiwiZXhpc3RpbmdUeXBlQXJndW1lbnRNYXAiLCJwcm9jZXNzSW5oZXJpdGFuY2VDaGFpbiIsImdldEhlcml0YWdlQ2xhdXNlQnlLaW5kIiwiRXh0ZW5kc0tleXdvcmQiLCJiYXNlVHlwZUFyZ3MiLCJiYXNlVHlwZVBhcmFtcyIsInJlc29sdmVkVHlwZUFyZ3MiLCJ1bmlxdWVCYXNlUGFyYW1OYW1lIiwidHlwZUFyZyIsImlzVHlwZVBhcmFtZXRlciIsImlzVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uIiwicGFyZW50IiwiZ2V0UGFyZW50IiwicGFyZW50TmFtZSIsInR5cGVBcmdOb2RlIiwiVHlwZVJlZmVyZW5jZSIsImlzSWRlbnRpZmllciIsInVuaXF1ZURlcml2ZWRQYXJhbU5hbWUiLCJwYXJlbnREZWNsIiwidW5pcXVlVHlwZU5hbWUiLCJnZXRJc1VuaXR5QVBJU291cmNlRmlsZSIsImZpcnN0Tm9kZSIsImdldEZpcnN0Q2hpbGQiLCJjb25zb2xlIiwibG9nIiwibGVhZGluZ0NvbW1lbnRzIiwiZ2V0TGVhZGluZ0NvbW1lbnRSYW5nZXMiLCJ0eXBlVGV4dCIsInRyaW0iLCJDbGFzc0RlY2xhcmF0aW9uIiwiaXNNb25vYmVoYXZpb3VyIiwiaXNTY3JpcHRhYmxlT2JqZWN0IiwiYWJzb2x1dGVQYXRoIiwibm9ybWFsaXplZFBhdGgiLCJzcGxpdCIsInNlcCIsImFzc2V0c0luZGV4IiwiaW5kZXhPZiIsImFzc2V0c1ByZWZpeCIsImNvbUdlbmllc01hdGNoIiwicmVzb2x2ZSIsImdldERlY29yYXRvcnMiLCJBcmdzIiwiYSIsIk51bWVyaWNhbEFsaWFzZXMiLCJwb3NpdGlvbnMiLCJkZWNvcmF0b3IiLCJzdGFydCIsImdldEZ1bGxTdGFydCIsImVuZCIsImdldEVuZCIsInNvcnQiLCJiIiwicmVwbGFjZVRleHQiLCJjb2xsZWN0Tm9kZXMiLCJkZXB0aCIsIm5vZGVzIiwiZm9yRWFjaENoaWxkIiwiY2hpbGQiLCJ0cmF2ZXJzZVBvc3RPcmRlciIsImNhbGxiYWNrIiwiY2xhc3NEZWNsYXJhdGlvbiIsInJlc3VsdFNldCIsImN1cnJlbnRDbGFzcyIsImNsYXNzVHlwZU5hbWUiLCJnZXRJbXBsZW1lbnRzIiwiaW1wbGVtZW50Q2xhdXNlIiwicXVldWUiLCJjdXJyZW50SWZhY2VUeXBlIiwic2hpZnQiLCJpZmFjZU5hbWUiLCJpbmhlcml0ZWRUeXBlIiwiYWxsU3RhdGVtZW50cyIsImdldFN0YXRlbWVudHMiLCJpbXBvcnREZWNsYXJhdGlvbnMiLCJmaWx0ZXIiLCJzdG10IiwidmFyaWFibGVTdGF0ZW1lbnRzIiwiVmFyaWFibGVTdGF0ZW1lbnQiLCJvdGhlclN0YXRlbWVudHMiLCJuZXdUZXh0IiwicmVwbGFjZVdpdGhUZXh0IiwiY3JlYXRlR2VuZXJpY1R5cGVWYXJpYWJsZSIsImdlbmVyaWNNYXAiLCJnZW5lcmljS2V5IiwiZ2VuZXJpY1R5cGVOYW1lIiwiZ2V0VHlwZUFyZ05hbWVBbmRFbnN1cmVJbXBvcnRlZCIsImdlbmVyaWNEZWNsYXJhdGlvbiIsImdlbmVyaWNWYXJOYW1lIiwiYWRkVmFyaWFibGVTdGF0ZW1lbnQiLCJkZWNsYXJhdGlvbktpbmQiLCJWYXJpYWJsZURlY2xhcmF0aW9uS2luZCIsIkNvbnN0IiwiZ2V0SXNWYWxpZFVuaXR5R2VuZXJpY1R5cGVBcmciLCJhcmdUeXBlIiwiY29uc3RyYWludCIsImdldENvbnN0cmFpbnQiLCJpc0NsYXNzTGlrZURlY2xhcmF0aW9uQmFzZSIsImlzRnJvbUV4dGVybmFsTGlicmFyeSIsImlzRGVjbGFyYXRpb25GaWxlIiwicmVzb2x2ZU5hbWUiLCJTeW1ib2xGbGFncyIsIkFsbCIsImdldERlY2xhcmVkVHlwZU9mU3ltYm9sIiwiaXNUaGlzRXhwcmVzc2lvbiIsImdldE5hbWVOb2RlIiwiZ1R5cGUiLCJmaWxlUGF0aCIsImdldERpcmVjdG9yeVBhdGgiLCJpbXBvcnREZWNsYXJhdGlvbiIsInN0YXJ0c1dpdGgiLCJzZXRNb2R1bGVTcGVjaWZpZXIiLCJpbmZlclBvc3NpYmxlVHlwZXMiLCJ0eXBlcyIsImluZmVycmVkVHlwZU5hbWVzIiwiYnJhbmRlZFR5cGUiLCJnZXRUeXBlQnlOYW1lIiwiZ2V0QnJhbmRlZFR5cGVzIiwibnVtZXJpY0luZm8iLCJnZXROdW1lcmljVmFsdWUiLCJpbmZvIiwiaGFzRGVjaW1hbCIsImluZmVyVHlwZXNGcm9tTnVtZXJpY0luZm8iLCJzY29yZU92ZXJsb2FkIiwib3ZlcmxvYWQiLCJhcmd1bWVudFR5cGVzTGlzdCIsInBhcmFtZXRlcnMiLCJnZXRQYXJhbWV0ZXJzIiwic2NvcmUiLCJwYXJhbVR5cGUiLCJhcmdUeXBlcyIsImFyZ1Njb3JlIiwic2NvcmVQYXJhbWV0ZXIiLCJwb3NzaWJsZUFyZ1R5cGVzIiwiYmVzdFNjb3JlIiwiTWF0aCIsIm1heCIsImlzVHlwZUFzc2lnbmFibGVUbyIsImlzVmFsaWROdW1lcmljYWxUeXBlIiwiaXNOdW1lcmljQ2FzdGFibGUiLCJmcm9tVHlwZSIsInRvVHlwZSIsImZyb21UeXBlTmFtZSIsInRvVHlwZU5hbWUiLCJieXRlIiwic2J5dGUiLCJzaG9ydCIsInVzaG9ydCIsImludCIsInVpbnQiLCJmbG9hdCIsImRvdWJsZSIsIm51bWVyaWNMaXRlcmFsSW5mbyIsImdldE51bWVyaWNMaXRlcmFsSW5mbyIsImlzVmFyaWFibGVEZWNsYXJhdGlvbiIsImlzUHJvcGVydHlEZWNsYXJhdGlvbiIsInZhbHVlSW5mbyIsInBlcmZvcm1GbG93QW5hbHlzaXMiLCJpc051bWVyaWNMaXRlcmFsIiwiTnVtYmVyIiwiaXNQcmVmaXhVbmFyeUV4cHJlc3Npb24iLCJnZXRPcGVyYXRvclRva2VuIiwiTWludXNUb2tlbiIsIm9wZXJhbmQiLCJnZXRPcGVyYW5kIiwidXNhZ2VOb2RlIiwiY3VycmVudFZhbHVlSW5mbyIsImluaXRWYWx1ZUluZm8iLCJnZXROdW1lcmljVmFsdWVGcm9tRXhwcmVzc2lvbiIsIm1ldGhvZERlY2xhcmF0aW9uIiwiZ2V0Rmlyc3RBbmNlc3RvckJ5S2luZCIsIk1ldGhvZERlY2xhcmF0aW9uIiwic3RhdGVtZW50cyIsInVzYWdlU3RhcnQiLCJnZXRTdGFydCIsImFzc2lnbm1lbnRzIiwiZ2V0RGVzY2VuZGFudHMiLCJpc0JpbmFyeUV4cHJlc3Npb24iLCJpc1Bvc3RmaXhVbmFyeUV4cHJlc3Npb24iLCJhc3NpZ25tZW50Iiwib3BlcmF0b3JLaW5kIiwibGVmdCIsImdldExlZnQiLCJyaWdodCIsImdldFJpZ2h0IiwiaXNBc3NpZ25tZW50VG9TeW1ib2wiLCJFcXVhbHNUb2tlbiIsIlBsdXNFcXVhbHNUb2tlbiIsIk1pbnVzRXF1YWxzVG9rZW4iLCJBc3Rlcmlza0VxdWFsc1Rva2VuIiwiU2xhc2hFcXVhbHNUb2tlbiIsIlBlcmNlbnRFcXVhbHNUb2tlbiIsImV2YWx1YXRlQ29tcG91bmRBc3NpZ25tZW50IiwiZGVsdGEiLCJQbHVzUGx1c1Rva2VuIiwiZXhwciIsImV4cHJTeW1ib2wiLCJsZWZ0SW5mbyIsInJpZ2h0SW5mbyIsImV2YWx1YXRlQmluYXJ5T3BlcmF0aW9uIiwiYmluYXJ5T3BlcmF0b3JLaW5kIiwiUGx1c1Rva2VuIiwiQXN0ZXJpc2tUb2tlbiIsIlNsYXNoVG9rZW4iLCJQZXJjZW50VG9rZW4iLCJyZXN1bHRWYWx1ZSIsIm92ZXJsb2FkcyIsImNvbXBhdGlibGVPdmVybG9hZHMiLCJjb25zdHJhaW50VHlwZSIsImZpbHRlck92ZXJsb2Fkc0J5VHlwZUFyZ3VtZW50cyIsImNhbGxBcmdzIiwicGFyYW1zIiwiZXZlcnkiLCJpc09wdGlvbmFsIiwiYmVzdE92ZXJsb2FkIiwiaGlnaGVzdFNjb3JlIiwiQ1VTVE9NX0RJQUdOT1NUSUNfQ09ERVMiLCJBTExPV0VEX0lOSEVSSVRBTkNFX1RZUEVTIiwiQ09NUE9ORU5UX01FVEhPRFMiLCJpc1R5cGVDb21wYXRpYmxlV2l0aFBhcmFtZXRlciIsImFyZ3VtZW50VHlwZSIsInBhcmFtZXRlclR5cGUiLCJhZGREaWFnbm9zdGljIiwiZGlhZ25vc3RpY3MiLCJtZXNzYWdlVGV4dCIsImNvZGUiLCJnZXRXaWR0aCIsImRpYWdub3N0aWMiLCJmaWxlIiwiY29tcGlsZXJOb2RlIiwiY2F0ZWdvcnkiLCJEaWFnbm9zdGljQ2F0ZWdvcnkiLCJzb3VyY2UiLCJnZXRDbGFzc2VzIiwiaW1wbGVtZW50ZWRJbnRlcmZhY2VzIiwiYmFzZUNsYXNzTmFtZSIsImRpYWdub3N0aWNNZXNzYWdlIiwiaW50ZiIsInByb2Nlc3NDbGFzc0RpYWdub3N0aWNzIiwiZ2V0RGVzY2VuZGFudHNPZktpbmQiLCJjYWxsRXhwciIsIm1ldGhvZERlY2xhcmF0aW9ucyIsIm1ldGhvZFN5bWJvbCIsImlzTWV0aG9kRGVjbGFyYXRpb24iLCJnZXRNZXRob2ROYW1lIiwiY2FsbEFyZ1R5cGVzIiwiZ2V0UHJvamVjdCIsImdldFR5cGVDaGVja2VyIiwiaGFzTWF0Y2hpbmdOb25HZW5lcmljT3ZlcmxvYWQiLCJ2YWxpZEFyZ3MiLCJtIiwidHlwZUFyZ1R5cGUiLCJpc1ZhbGlkQ29tcG9uZW50VHlwZUFyZyIsInByb2Nlc3NHZW5lcmljTWV0aG9kQ2FsbCIsInByb3BlcnR5QWNjZXNzIiwiYXNLaW5kIiwib3ZlcmxvYWREZWNsYXJhdGlvbnMiLCJpc01ldGhvZFNpZ25hdHVyZSIsInNlbGVjdEJlc3RPdmVybG9hZCIsIm1ldGhvZFR5cGVQYXJhbXMiLCJoYXNUeXBlQXJncyIsInR5cGVQYXJhbU1hcCIsIm1pbiIsInBhcmFtZXRlciIsImFyZ3VtZW50IiwiaXNVc2VyRGVmaW5lZFR5cGUiLCJ0eXBlUGFyYW1OYW1lIiwiY2hlY2tQYXJhbWV0ZXJUeXBlc0ZvclVuaXR5QXBpQ2FsbHMiLCJwcm9jZXNzQ2FsbEV4cHJlc3Npb25EaWFnbm9zdGljcyIsIm5ld0V4cHIiLCJ0eXBlU3ltYm9sIiwiY2xhc3NEZWNsYXJhdGlvbnMiLCJleHBlY3RlZFR5cGVBcmdzQ291bnQiLCJwcm92aWRlZFR5cGVBcmdzQ291bnQiLCJwcm9jZXNzVHlwZVVzYWdlRGlhZ25vc3RpY3MiLCJpc1Byb21pc2UiLCJpc1Byb21pc2VQYXJlbnQiLCJ3cmFwcGVkVGV4dCIsIndyYXAiLCJvcmlnaW5hbFRleHQiLCJnZXRPcGVyYXRvck1ldGhvZFJldHVyblR5cGUiLCJvcGVyYXRvck1ldGhvZE5hbWUiLCJyaWdodFR5cGUiLCJtZXRob2RzIiwiZ2V0TWV0aG9kcyIsIm1ldGhvZCIsImxlZnRQYXJhbWV0ZXJUeXBlIiwicmlnaHRQYXJhbWV0ZXJUeXBlIiwiaGFzUmlnaHRUeXBlIiwiZ2V0UmV0dXJuVHlwZSIsImdldE9wZXJhdG9yTWV0aG9kTmFtZSIsImlzVW5hcnkiLCJFeGNsYW1hdGlvblRva2VuIiwiVGlsZGVUb2tlbiIsIk1pbnVzTWludXNUb2tlbiIsIkVxdWFsc0VxdWFsc1Rva2VuIiwiRXF1YWxzRXF1YWxzRXF1YWxzVG9rZW4iLCJFeGNsYW1hdGlvbkVxdWFsc1Rva2VuIiwiRXhjbGFtYXRpb25FcXVhbHNFcXVhbHNUb2tlbiIsIkdyZWF0ZXJUaGFuVG9rZW4iLCJMZXNzVGhhblRva2VuIiwiR3JlYXRlclRoYW5FcXVhbHNUb2tlbiIsIkxlc3NUaGFuRXF1YWxzVG9rZW4iLCJCYXJUb2tlbiIsIkFtcGVyc2FuZFRva2VuIiwiQ2FyZXRUb2tlbiIsIkxlc3NUaGFuTGVzc1RoYW5Ub2tlbiIsIkdyZWF0ZXJUaGFuR3JlYXRlclRoYW5Ub2tlbiIsInVud3JhcFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uIiwiaXNQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiIsImlzQ29tcG91bmRBc3NpZ25tZW50IiwiRmlyc3RDb21wb3VuZEFzc2lnbm1lbnQiLCJMYXN0Q29tcG91bmRBc3NpZ25tZW50IiwiZ2V0RXF1aXZhbGVudE9wZXJhdG9yRm9yQ29tcG91bmQiLCJjb21wb3VuZE9wZXJhdG9yS2luZCIsIkFtcGVyc2FuZEVxdWFsc1Rva2VuIiwiQmFyRXF1YWxzVG9rZW4iLCJDYXJldEVxdWFsc1Rva2VuIiwiTGVzc1RoYW5MZXNzVGhhbkVxdWFsc1Rva2VuIiwiR3JlYXRlclRoYW5HcmVhdGVyVGhhbkVxdWFsc1Rva2VuIiwiR3JlYXRlclRoYW5HcmVhdGVyVGhhbkdyZWF0ZXJUaGFuRXF1YWxzVG9rZW4iLCJHcmVhdGVyVGhhbkdyZWF0ZXJUaGFuR3JlYXRlclRoYW5Ub2tlbiIsImdldFVuYXJ5T3BlcmF0b3JNZXRob2RSZXR1cm5UeXBlIiwidW53cmFwVHlwZSIsImNvbnRleHQiLCJnZXRCaW5hcnlPcGVyYXRvck5vZGVSZXR1cm5UeXBlIiwiZ2V0VW5hcnlPcGVyYXRvck5vZGVSZXR1cm5UeXBlIiwiVHlwZUNoZWNrZXIiLCJpc051bGxMaXRlcmFsIiwiaXNVbmRlZmluZWRLZXl3b3JkIiwibGVmdFR5cGUiLCJpc0xpdGVyYWwiLCJnZXRCYXNlVHlwZU9mTGl0ZXJhbFR5cGUiLCJsZWZ0UmV0dXJuVHlwZSIsInJpZ2h0UmV0dXJuVHlwZSIsImVxdWl2YWxlbnRPcGVyYXRvck1ldGhvZE5hbWUiLCJjb25zdHJ1Y3RvciIsInRzQ29uZmlnUGF0aCIsInByb2plY3QiLCJQcm9qZWN0IiwidHNDb25maWdGaWxlUGF0aCIsInNraXBBZGRpbmdGaWxlc0Zyb21Uc0NvbmZpZyIsInJvb3REaXJlY3RvcnkiLCJkaXJuYW1lIiwic2V0UHJvamVjdFJvb3QiLCJUcmFuc2Zvcm1hdGlvbkNvbnRleHQiLCJ0cmFuc2Zvcm1lcnMiLCJwaGFzZSIsInRyYW5zZm9ybWVyIiwiUHJvbWlzZVdyYXBwZXJUcmFuc2Zvcm1lciIsIkNTaGFycEV2ZW50VHJhbnNmb3JtZXIiLCJSZWZUcmFuc2Zvcm1lciIsIkV2ZW50Q29udGV4dFRyYW5zZm9ybWVyIiwiRGVsZWdhdGVUb0Fycm93RnVuY3Rpb25UcmFuc2Zvcm1lciIsIkJyYWNrZXRBY2Nlc3NUcmFuc2Zvcm1lciIsIk9iamVjdEluc3RhbnRpYXRlVHJhbnNmb3JtZXIiLCJDb21wb25lbnRDYWxsVHJhbnNmb3JtZXIiLCJTY3JpcHRhYmxlT2JqZWN0Q3JlYXRlSW5zdGFuY2VUcmFuc2Zvcm1lciIsIkV4dGVuc2lvbk1ldGhvZFRyYW5zZm9ybWVyIiwiR2VuaWVzSW5zdGFuY2VUcmFuc2Zvcm1lciIsIkdlbmVyaWNUeXBlVHJhbnNmb3JtZXIiLCJPcGVyYXRvck92ZXJsb2FkaW5nVHJhbnNmb3JtZXIiLCJOdW1lcmljT3ZlcmxvYWRSZXNvbHV0aW9uVHJhbnNmb3JtZXIiLCJHZW5lcmljTWV0aG9kVHJhbnNmb3JtZXIiLCJjb21waWxlIiwiZmlsZXNUb0NvbXBpbGUiLCJwcm9qZWN0RmlsZXMiLCJtb3ZlZEZpbGVzIiwiYWRkU291cmNlRmlsZXNBdFBhdGhzIiwiZml4UmVmZXJlbmNlcyIsInNhdmVTeW5jIiwiY29sbGVjdGVkRmlsZXMiLCJwcm9jZXNzZWQiLCJkZXBlbmRlbmN5R3JhcGgiLCJnZXRTb3VyY2VGaWxlT3JUaHJvdyIsImNvbGxlY3RGaWxlcyIsInNvcnRlZEZpbGVzIiwidG9wb2xvZ2ljYWxTb3J0IiwidHJhbnNmb3JtZWRDb2RlTWFwIiwib3V0cHV0cyIsInMiLCJ0cmFuc2Zvcm1lZENvZGUiLCJnZXRGdWxsVGV4dCIsInNldERlZmF1bHRFeHBvcnQiLCJ1cGRhdGVJbXBvcnRzVG9BbGlhc1BhdGhzIiwiaW5pdGlhbGl6ZUNvbXBpbGVPdXRwdXQiLCJhcHBseVRyYW5zZm9ybWF0aW9uRGlmZnMiLCJlIiwiZXJyb3IiLCJlbWl0IiwianNvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWZhdWx0RXhwb3J0U3ltYm9sIiwiZ2V0RGVmYXVsdEV4cG9ydFN5bWJvbCIsImRlZmF1bHRFeHBvcnRlZENsYXNzIiwiaXNEZWZhdWx0RXhwb3J0Iiwic2V0SXNEZWZhdWx0RXhwb3J0IiwibW92ZWRNYXAiLCJvbGRQYXRoIiwibmV3UGF0aCIsInNmIiwiZ2V0U291cmNlRmlsZXMiLCJpbXAiLCJyYXdJbXBvcnQiLCJvbGRBYnNQYXRoIiwicmVzb2x2ZVNwZWNpZmllciIsIm5ld0Fic1BhdGgiLCJuZXdJbXBvcnRTcGVjaWZpZXIiLCJuZXdTb3VyY2VGaWxlIiwiZ2VuaWVzUGF0aCIsImdldFJlbGF0aXZlUGF0aEFzTW9kdWxlU3BlY2lmaWVyVG8iLCJpbXBvcnRlckRpciIsInJlbGF0aXZlIiwic3BlY2lmaWVyIiwiZ3JvdXBUcmFuc2Zvcm1lcnNCeVBoYXNlIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsInJ1blRyYW5zZm9ybWVycyIsInRyYW5zZm9ybWVyc0J5UGhhc2UiLCJwaGFzZXMiLCJPYmplY3QiLCJub2RlVHlwZSIsImNvbnRpbnVlUHJvY2Vzc2luZyIsInByb2Nlc3NlZE5vZGVzIiwicmV0cnlDb3VudCIsIk1BWF9SRVRSSUVTIiwibm9kZXNUb1Byb2Nlc3MiLCJ3YXNGb3Jnb3R0ZW4iLCJuZXdOb2RlIiwiZXJyb3JzIiwiZ2V0R2VuaWVzRGlhZ25vc3RpY3MiLCJmaXhNaXNzaW5nSW1wb3J0cyIsInNvcnRJbXBvcnRzQW5kVmFycyIsImdldERpYWdub3N0aWNzIiwiRmlsZVBhdGgiLCJJc1N1Y2Nlc3NmdWwiLCJFcnJvcnMiLCJKc1NvdXJjZSIsIklzTW9ub2JlaGF2aW91ciIsIklzU2NyaXB0YWJsZU9iaiIsIlByb3BlcnRpZXMiLCJJZCIsIkRlZmF1bHRUeXBlTmFtZSIsIkluaGVyaXRhbmNlQ2hhaW4iLCJTdXBwb3J0ZWRVaUV2ZW50cyIsIlJlZmVyZW5jZWRTcGVjaWZpZXJzIiwiaXNTY3JpcHRhYmxlT2JqIiwiZGVmYXVsdFR5cGVOYW1lIiwiaW5oZXJpdGFuY2VDaGFpbiIsInN1cHBvcnRlZFVpRXZlbnRzIiwidHJhdmVyc2VQcm90b3R5cGVDaGFpbiIsImYiLCJyZWZlcmVuY2VkU3BlY2lmaWVycyIsIkRlY29yYXRvciIsInJlbW92ZURlY29yYXRvcnMiLCJqc1NvdXJjZSIsImdldEVtaXRPdXRwdXQiLCJnZXRPdXRwdXRGaWxlcyIsInJlbWFwU291cmNlcyIsImNvbXBpbGVPdXRwdXQiLCJhbGxFcnJvcnMiLCJlbWl0dGVkSnMiLCJvcmlnaW5Ub1RyYW5zZm9ybWVkU291cmNlTWFwIiwiZ2VuZXJhdGVNYXAiLCJnZXRCYXNlTmFtZSIsImluY2x1ZGVDb250ZW50IiwiaGlyZXMiLCJzb3VyY2VNYXBDb21tZW50UmVnZXgiLCJiYXNlNjRNYXAiLCJ0c1RvSnNNYXBKc29uIiwiQnVmZmVyIiwidHNUb0pzTWFwIiwicmVtYXBwZWQiLCJmaW5hbE1hcEpzb24iLCJpbmxpbmVGaW5hbE1hcCIsImdldEdlbmllc1NlbWFudGljRGlhZ25vc3RpY3MiLCJsaW5lIiwiY29sdW1uIiwiZ2V0TGluZUFuZENvbHVtbkF0UG9zIiwibWVzc2FnZSIsImZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQiLCJnZXRQcmVFbWl0RGlhZ25vc3RpY3MiLCJkaWFnIiwiY29tcGlsZXJPYmplY3QiLCJjb2xsZWN0ZWQiLCJnZXRSZWZlcmVuY2luZ1NvdXJjZUZpbGVzIiwicmVmRmlsZSIsImZpbGVzIiwidG9wb2xvZ2ljYWxTb3J0V2l0aFRhcmphbiIsInRvcG9sb2dpY2FsU29ydFdpdGhDeWNsZXMiLCJpbmRleE1hcCIsImxvd0xpbmtNYXAiLCJzdGFjayIsIm9uU3RhY2siLCJzY2NMaXN0Iiwic3Ryb25nQ29ubmVjdCIsImRlcCIsInNjYyIsInciLCJwb3AiLCJkZWxldGUiLCJzb3J0ZWQiLCJvcmlnaW5hbEZpbGVTdHJpbmciLCJkbXAiLCJkaWZmX21hdGNoX3BhdGNoIiwib3JpZ2luYWwiLCJ0cmFuc2Zvcm1lZFRleHQiLCJkaWZmcyIsImRpZmZfbWFpbiIsIm9yaWdpbmFsUG9zIiwidHJhbnNmb3JtZWRQb3MiLCJvcCIsInJlbW92ZSIsImVyciIsImFwcGVuZFJpZ2h0Iiwic291cmNlRmlsZUdlbmVyaWNNYXAiLCJtZXRob2ROYW1lTm9kZSIsImdldExhc3RDaGlsZEJ5S2luZCIsIklkZW50aWZpZXIiLCJmaXJzdENoaWxkIiwiY2xhc3NUeXBlIiwiaXNPckluaGVyaXRzRnJvbUdhbWVPYmplY3RPckNvbXBvbmVudCIsImluc3RhbmNlIiwiaW5zdGFuY2VUeXBlIiwibWV0aG9kU3dhcFZhbHVlIiwiZGVjbGFyaW5nVHlwZSIsInR5cGVBcmdzTm9kZXMiLCJyZXBsYWNlV2l0aE5vbkdlbmVyaWNDYWxsIiwiZ2VuZXJpY01ldGhvZFZhck5hbWUiLCJjcmVhdGVHZW5lcmljTWV0aG9kVmFyaWFibGUiLCJhcmdzVGV4dCIsImluc3RhbmNlVGV4dCIsImlzR2VuaWVzU2NyaXB0VHlwZSIsIm5ld0V4cHJlc3Npb25UZXh0IiwiZ2V0S2V5IiwibGVhZGluZ1RyaXZpYSIsIm1hcHBpbmciLCJ0eXBlS2V5IiwicGFyZW50Q2xhc3MiLCJjc2hhcnBUeXBlTmFtZSIsIm1ldGhvZENhbGwiLCJ0eXBlQXJnc1RleHQiLCJpc0ludGVyZmFjZSIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJjb21waWxlRmlsZXMiLCJjdXJyZW50RmxhZyIsImV4aXQiLCJyZXN1bHQiLCJzdGRvdXQiLCJ3cml0ZSIsIm1haW4iLCJldmVudEV4cHJlc3Npb24iLCJldmVudFR5cGUiLCJpc0NTaGFycEV2ZW50VHlwZSIsInByb3BlcnR5TmFtZSIsIm5ld0NhbGxFeHByZXNzaW9uIiwiY3JlYXRlTmV3Q2FsbEV4cHJlc3Npb24iLCJ0b0xvd2VyQ2FzZSIsImFkZFRzSWdub3JlQ29tbWVudCIsIm1ldGhvZFByZWZpeCIsIm5ld01ldGhvZE5hbWUiLCJuZXdDYWxsRXhwcmVzc2lvblRleHQiLCJpbnNlcnRUZXh0IiwicmVxdWlyZSIsInNpZ25hdHVyZSIsImdldFJlc29sdmVkU2lnbmF0dXJlIiwiZ2V0VHlwZU9mU3ltYm9sQXRMb2NhdGlvbiIsImlzRGVsZWdhdGVUeXBlIiwiaXNBcnJvd0Z1bmN0aW9uIiwid3JhcEluQXJyb3dGdW5jdGlvbiIsImdldENhbGxTaWduYXR1cmVzIiwiX3BhcmFtVHlwZSIsImNhbGxTaWduYXR1cmVzIiwiZXhwZWN0ZWRQYXJhbUNvdW50IiwicGFyYW1OYW1lcyIsIl8iLCJhcnJvd0Z1bmN0aW9uVGV4dCIsIkVsZW1lbnRBY2Nlc3NFeHByZXNzaW9uIiwiaXNFbGVtZW50QWNjZXNzRXhwcmVzc2lvbiIsImVsZW1lbnRBY2Nlc3MiLCJhcmd1bWVudEV4cHJlc3Npb24iLCJnZXRBcmd1bWVudEV4cHJlc3Npb24iLCJnZXRJdGVtTWV0aG9kcyIsInNldEl0ZW1NZXRob2RzIiwibWV0aG9kU2lnbmF0dXJlcyIsImdldFNpZ25hdHVyZSIsImdldERlY2xhcmF0aW9uIiwidmFsdWVFeHByZXNzaW9uIiwiaW5kZXhQYXJhbVR5cGUiLCJ2YWx1ZVBhcmFtVHlwZSIsImluZGV4QXJnVHlwZSIsInZhbHVlQXJnVHlwZSIsImV4cHJlc3Npb25UZXh0IiwiaW5kZXhUZXh0IiwidmFsdWVUZXh0Iiwic2V0SXRlbUNhbGwiLCJnZXRJdGVtQ2FsbCIsIkJpbmFyeUV4cHJlc3Npb24iLCJiaW5hcnlFeHByZXNzaW9uIiwiaXNSZWZUeXBlIiwicmVmRXhwcmVzc2lvbiIsInByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiIsImpzRG9jVGFncyIsImdldEpzRG9jcyIsImZsYXRNYXAiLCJnZXRUYWdzIiwidGFnIiwiZ2V0VGFnTmFtZSIsImV4dGVuc2lvblRhZyIsImV4dGVuc2lvbkdlbmVyaWNBcmdJbmRleCIsImV4dGVuc2lvbkdlbmVyaWNBcmdJbmRleFRhZyIsImdldENvbW1lbnRUZXh0IiwicGFyc2VJbnQiLCJpc05hTiIsImV4dGVuc2lvbkNvbW1lbnQiLCJleHRlbnNpb25DbGFzcyIsImV4dGVuc2lvbk1ldGhvZCIsInR5cGVQYXJhbWV0ZXJzIiwicGFyc2VFeHRlbnNpb25Db21tZW50IiwiZXh0cmFjdEFuZE9yZGVyVHlwZUFyZ3VtZW50cyIsInBhcnRzIiwiY2xhc3NTaG9ydE5hbWUiLCJuYW1lc3BhY2UiLCJlbnN1cmVJbXBvcnQiLCJjb21tZW50IiwiZ3JvdXBzIiwiYXJndW1lbnRzIiwibmFtZVNwYWNlIiwiaGFzSW1wb3J0IiwiZ2V0TW9kdWxlU3BlY2lmaWVyIiwiZ2V0TGl0ZXJhbFRleHQiLCJUeXBlRm9ybWF0RmxhZ3MiLCJnZXRTeW1ib2xPclRocm93IiwiZ2V0RGVjbGFyZWRUeXBlIiwidHlwZUFyZ01hcCIsImNhbGxUeXBlQXJncyIsImNhbGxUeXBlUGFyYW1zIiwic29ydGVkUGFyYW1zIiwic3BsaWNlIiwibWV0aG9kQXJndW1lbnRzIiwiaXNUeXBlb2ZBcmd1bWVudCIsInJldHVyblR5cGUiLCJ0eXBlQXJndW1lbnQiLCJ0eXBlQXJndW1lbnRUeXBlIiwicHJvY2Vzc1R5cGVBcmd1bWVudCIsImdldFR5cGVGcm9tVHlwZW9mQXJndW1lbnQiLCJnZXRGaXJzdENoaWxkQnlLaW5kIiwiaXNUeXBlTm9kZSIsImlzVHlwZU9mQXJnIiwiY3JlYXRlT3ZlcmxvYWRlZENhbGxFeHByZXNzaW9uIiwidHlwZUFyZ3VtZW50VGV4dCIsImFkZFRzSWdub3JlIiwiY2FzdFR5cGUiLCJuZXdDYWxsIiwicmVtb3ZlVHlwZUFyZ3VtZW50IiwiaW5zZXJ0QXJndW1lbnQiLCJleHByZXNzaW9uVHlwZSIsIm5ld0FyZ1RleHQiLCJqc0RvY3MiLCJqc0RvYyIsInRhZ3MiLCJuZXdBcmd1bWVudHMiLCJpc09ySW5oZXJpdHNGcm9tT2JqZWN0IiwiaXNLaW5kIiwidHJhbnNmb3JtTmV3RXhwcmVzc2lvbiIsIlByZWZpeFVuYXJ5RXhwcmVzc2lvbiIsIlBvc3RmaXhVbmFyeUV4cHJlc3Npb24iLCJ0cmFuc2Zvcm1CaW5hcnlFeHByZXNzaW9uIiwidHJhbnNmb3JtVW5hcnlFeHByZXNzaW9uIiwiZXF1aXZhbGVudE9wZXJhdG9yS2luZCIsInRyYW5zZm9ybWVkTGVmdCIsInRyYW5zZm9ybU5vZGVJZk5lZWRlZCIsInRyYW5zZm9ybWVkUmlnaHQiLCJsZWZ0VGV4dCIsInJpZ2h0VGV4dCIsImxlZnROYW1lIiwiZXF1aXZhbGVudEV4cHJlc3Npb24iLCJwYXJlbnRoZXNpemVkTmV3VGV4dCIsIm9wZXJhbmRUeXBlIiwib3BlcmFuZFRleHQiLCJ1bndyYXBwZWROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9