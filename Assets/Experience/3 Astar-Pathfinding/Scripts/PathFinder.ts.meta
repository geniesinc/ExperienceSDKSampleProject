fileFormatVersion: 2
guid: 70a9551617c212c42957a827d3cbc7d4
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: 11500000, guid: 22604dd76f55453daccee3ed9e7b94b5, type: 3}
  SerializedAsset: '{"IsCompiled":true,"CompilerVersion":"2.0.63","ReferencedSpecifiers":[],"Source":"\"use
    strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst
    UnityEngine_1 = require(\"UnityEngine\");\nclass Node {\n    get fCost() { return
    this.gCost + this.hCost; } // Total cost\n    constructor(position) {\n       
    this.gCost = 0; // Cost from start node\n        this.hCost = 0; // Heuristic
    cost to end node\n        this.parent = null;\n        this.position = position;\n   
    }\n}\nclass PathFinder {\n    constructor(grid) {\n        this.openSet = [];\n       
    this.closedSet = new Set();\n        this.allNodes = new Map();\n        this.grid
    = grid;\n    }\n    findPath(start, end) {\n        let startNode = this.getNode(start);\n       
    let endNode = this.getNode(end);\n        this.openSet.push(startNode);\n       
    while (this.openSet.length > 0) {\n            let currentNode = this.getLowestFCostNode(this.openSet);\n           
    if (currentNode.position.x === endNode.position.x && currentNode.position.y ===
    endNode.position.y) {\n                return this.retracePath(startNode, endNode);\n           
    }\n            this.openSet = this.openSet.filter(n => n !== currentNode);\n           
    this.closedSet.add(currentNode);\n            this.getNeighbors(currentNode).forEach(neighbor
    => {\n                if (this.closedSet.has(neighbor) || this.isBlocked(neighbor.position))\n                   
    return;\n                let newCostToNeighbor = currentNode.gCost + this.getDistance(currentNode,
    neighbor);\n                if (newCostToNeighbor < neighbor.gCost || !this.openSet.includes(neighbor))
    {\n                    neighbor.gCost = newCostToNeighbor;\n                   
    neighbor.hCost = this.getDistance(neighbor, endNode);\n                    neighbor.parent
    = currentNode;\n                    if (!this.openSet.includes(neighbor)) {\n                       
    this.openSet.push(neighbor);\n                    }\n                }\n           
    });\n        }\n        return []; // No path found\n    }\n    getNode(position)
    {\n        const key = `${position.x},${position.y}`;\n        if (this.allNodes.has(key))
    {\n            return this.allNodes.get(key);\n        }\n        const node
    = new Node(position);\n        this.allNodes.set(key, node);\n        return
    node;\n    }\n    getNeighbors(node) {\n        const directions = [{ x: 0, y:
    1 }, { x: 0, y: -1 }, { x: 1, y: 0 }, { x: -1, y: 0 }];\n        const neighbors
    = [];\n        directions.forEach(dir => {\n            const neighborPos = new
    UnityEngine_1.Vector2Int(node.position.x + dir.x, node.position.y + dir.y);\n           
    if (neighborPos.x >= 0 && neighborPos.y >= 0 && neighborPos.x < this.grid.length
    && neighborPos.y < this.grid[0].length) {\n                neighbors.push(this.getNode(neighborPos));\n           
    }\n        });\n        return neighbors;\n    }\n    isBlocked(position) {\n       
    return this.grid[position.x][position.y] !== 0;\n    }\n    getDistance(a, b)
    {\n        let dstX = Math.abs(a.position.x - b.position.x);\n        let dstY
    = Math.abs(a.position.y - b.position.y);\n        return dstX + dstY;\n    }\n   
    getLowestFCostNode(nodes) {\n        return nodes.reduce((acc, curr) => curr.fCost
    < acc.fCost ? curr : acc);\n    }\n    retracePath(startNode, endNode) {\n       
    let path = [];\n        let currentNode = endNode;\n        while (currentNode
    !== startNode) {\n            path.push(currentNode.position);\n            currentNode
    = currentNode.parent;\n        }\n        path.push(startNode.position);\n       
    path.reverse();\n        return path;\n    }\n}\nexports.default = PathFinder;\n//#
    sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aEZpbmRlci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF3QztBQUV4QyxNQUFNLElBQUk7SUFJTixJQUFJLEtBQUssS0FBYSxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFZO0lBR3BFLFlBQVksUUFBb0I7UUFMaEMsVUFBSyxHQUFXLENBQUMsQ0FBQyxDQUFDLHVCQUFzQjtRQUN6QyxVQUFLLEdBQVcsQ0FBQyxDQUFDLENBQUMsNkJBQTRCO1FBRS9DLFdBQU0sR0FBZ0IsSUFBSTtRQUd0QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVE7SUFDNUI7Q0FDSjtBQUVBLE1BQXFCLFVBQVU7SUFNM0IsWUFBWSxJQUFnQjtRQUpwQixZQUFPLEdBQVcsRUFBRTtRQUNwQixjQUFTLEdBQWMsSUFBSSxHQUFHLEVBQUU7UUFDaEMsYUFBUSxHQUFzQixJQUFJLEdBQUcsRUFBRTtRQUczQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUk7SUFDcEI7SUFFQSxRQUFRLENBQUMsS0FBaUIsRUFBRSxHQUFlO1FBQ3ZDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ25DLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBRS9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUU1QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN2RCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO2dCQUNoRyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztZQUMvQztZQUVBLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssV0FBVyxDQUFDO1lBQzFELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUUvQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDOUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7b0JBQUUsT0FBTTtnQkFFN0UsSUFBSSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztnQkFDbkYsSUFBSSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ3hFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsaUJBQWlCO29CQUNsQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQztvQkFDcEQsUUFBUSxDQUFDLE1BQU0sR0FBRyxXQUFXO29CQUU3QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7d0JBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDL0I7Z0JBQ0o7WUFDSixDQUFDLENBQUM7UUFDTjtRQUVBLE9BQU8sRUFBRSxDQUFDLENBQUMsZ0JBQWU7SUFDOUI7SUFFUSxPQUFPLENBQUMsUUFBb0I7UUFDaEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUU7UUFDekMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBRTtRQUNsQztRQUVBLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBRVEsWUFBWSxDQUFDLElBQVU7UUFDM0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztRQUM3RSxNQUFNLFNBQVMsR0FBVyxFQUFFO1FBRTVCLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBSSx3QkFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNwRixJQUFJLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDckgsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzdDO1FBQ0osQ0FBQyxDQUFDO1FBRUYsT0FBTyxTQUFTO0lBQ3BCO0lBRVEsU0FBUyxDQUFDLFFBQW9CO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDbEQ7SUFFUSxXQUFXLENBQUMsQ0FBTyxFQUFFLENBQU87UUFDaEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sSUFBSSxHQUFHLElBQUk7SUFDdEI7SUFFUSxrQkFBa0IsQ0FBQyxLQUFhO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDM0U7SUFFUSxXQUFXLENBQUMsU0FBZSxFQUFFLE9BQWE7UUFDOUMsSUFBSSxJQUFJLEdBQWlCLEVBQUU7UUFDM0IsSUFBSSxXQUFXLEdBQUcsT0FBTztRQUV6QixPQUFPLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO1lBQy9CLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTztRQUNyQztRQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxFQUFFO1FBRWQsT0FBTyxJQUFJO0lBQ2Y7Q0FDSjtBQWhHQSw2QkFnR0EiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIlBhdGhGaW5kZXIudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXX0=","ScriptHash":"ad358cd5b3883bf2354d52df4280acde","Specifier":"@assets/Experience/3
    Astar-Pathfinding/Scripts/PathFinder","DefaultTypeName":"@assets/Experience/3
    Astar-Pathfinding/Scripts/PathFinder.PathFinder","IsMonobehaviour":false,"IsScriptableObj":false,"InheritanceChain":[],"Properties":[],"SupportedUiEvents":"None","DisplayName":"PathFinder","name":"PathFinder","hideFlags":"NotEditable"}'
